module alias P = SQLParser;

module SKStore;

base class Accumulator<V1: frozen, V2: frozen>(default: V2) {
  fun getType(): File ~> V2;
  fun accumulate(acc: V2, value: V1): V2;
  fun dismiss(cumul: V2, value: V1): ?V2;
}

class Types<K: Key, V: File>(key: Key ~> K, file: File ~> V)

fun eagerMap<K: Key, V: File, K2: Key, V2: File>(
  handle: EHandle<K, V>,
  keyConv: Key ~> K2,
  fileConv: File ~> V2,
  name: String,
  context: mutable Context,
  compute: (
    mutable Context,
    mutable TWriter<K2, V2>,
    K,
    mutable NonEmptyIterator<V>,
  ) ~> void,
): EHandle<K2, V2> {
  dirName = subDirName(context, name);
  handle.map(keyConv, fileConv, context, dirName, compute);
}

fun eagerMultiMap<K: Key, V: File, K2: Key, V2: File>(
  keyConv: Key ~> K2,
  fileConv: File ~> V2,
  name: String,
  context: mutable Context,
  mappings: Array<
    (
      EHandle<K, V>,
      (
        mutable Context,
        mutable TWriter<K2, V2>,
        K,
        mutable NonEmptyIterator<V>,
      ) ~> void,
    ),
  >,
): EHandle<K2, V2> {
  dirName = subDirName(context, name);
  EHandle::multiMap(
    keyConv,
    fileConv,
    context,
    mappings.map(m -> (m.i0, (m.i1, None()))),
    dirName,
  )
}

fun eagerMapReduce<K: Key, V: File, K2: Key, V2: File, V3: File>(
  handle: EHandle<K, V>,
  keyConv: Key ~> K2,
  fileConv: File ~> V2,
  name: String,
  context: mutable Context,
  compute: (
    mutable Context,
    mutable TWriter<K2, V2>,
    K,
    mutable NonEmptyIterator<V>,
  ) ~> void,
  accumulator: Accumulator<V2, V3>,
): EHandle<K2, V3> {
  dirName = subDirName(context, name);
  handle.mapReduce(
    keyConv,
    fileConv,
    context,
    dirName,
    compute,
    accReducer(accumulator),
  )
}

fun eagerMultiMapReduce<K: Key, V: File, K2: Key, V2: File, V3: File>(
  keyConv: Key ~> K2,
  fileConv: File ~> V2,
  name: String,
  context: mutable Context,
  mappings: Array<
    (
      EHandle<K, V>,
      (
        mutable Context,
        mutable TWriter<K2, V2>,
        K,
        mutable NonEmptyIterator<V>,
      ) ~> void,
    ),
  >,
  accumulator: Accumulator<V2, V3>,
): EHandle<K2, V3> {
  dirName = subDirName(context, name);
  EHandle::multiMapReduce(
    keyConv,
    fileConv,
    context,
    mappings.map(m -> (m.i0, (m.i1, None()))),
    dirName,
    accReducer(accumulator),
  )
}

fun makeInput<K: Key, V: File>(
  convKey: Key ~> K,
  convValue: File ~> V,
  context: mutable Context,
  name: String,
  content: Array<(K, V)> = Array[],
): String {
  dirName = subDirName(context, name);
  _ = context.mkdir(convKey, convValue, dirName, content);
  dirName.toString()
}

fun makeLazy<K: Key, V: File>(
  convKey: Key ~> K,
  convValue: File ~> V,
  context: mutable Context,
  name: String,
  f: (mutable Context, LHandle<K, V>, K) ~> Array<V>,
  collect: Bool = true,
): String {
  dirName = subDirName(context, name);
  _ = LHandle::create(convKey, convValue, context, dirName, f, collect);
  dirName.toString()
}

class Check<V: File>(valid: Bool, optPrevious: ?V)
class Loading<V: File>(internal: V, result: V)

fun makeAsyncLazy<K: Key, V: File, C: frozen>(
  convKey: Key ~> K,
  convValue: File ~> V,
  context: mutable Context,
  name: String,
  params: (mutable Context, K) ~> C,
  call: (String, String, K, C) ~> void,
  check: (V, C) ~> Check<V>,
  loading: (String, C, ?V) ~> Loading<V>,
): String {
  dirName = subDirName(context, name);
  resultsDirs = DirName::create(dirName.toString() + "sk_prv/results/");
  results = context.mkdir(convKey, convValue, resultsDirs, Array[]);
  _ = LHandle::create(convKey, convValue, context, dirName, (ctx, self, key) ~> {
    ps = params(ctx, key);
    // FastOption error: Signature must be specified
    perform: (?V) -> Array<V> = optPrevious -> {
      ksuid = Ksuid::create().toString();
      call(self.getDirName().toString(), ksuid, key, ps);
      loadingValue = loading(ksuid, ps, optPrevious);
      ctx.postpone(
        ToWrite(resultsDirs, key, _ctx ~> Array[loadingValue.internal]),
      );
      Array[loadingValue.result]
    };
    results.maybeGet(ctx, key).map(r -> check(r, ps)) match {
    | Some(Check(true, Some(v))) -> Array[v]
    | Some(Check(_, optPrevious)) -> perform(optPrevious)
    | _ -> perform(None())
    }
  });
  dirName.toString()
}

fun accReducer<V1: File, V2: File>(
  accumulator: Accumulator<V1, V2>,
): EReducer<V1, V2> {
  EReducer{
    type => accumulator.getType(),
    canReset => true,
    init => iter ~> {
      acc = accumulator.default;
      for (x in iter) {
        !acc = accumulator.accumulate(acc, x)
      };
      Array[acc]
    },
    update => (state, old, new) ~> {
      acc = state[0];
      for (x in old) {
        accumulator.dismiss(acc, x) match {
        | Some(v) -> !acc = v
        | _ -> return None()
        }
      };
      for (x in new) {
        !acc = accumulator.accumulate(acc, x)
      };
      Some(Array[acc])
    },
  }
}

fun subDirName(context: mutable Context, name: String): DirName {
  path = context.currentArrow() match {
  | Some(arrow) ->
    b64 = base64(arrow.key);
    `${arrow.childName}${b64}/${name}/`
  | None() -> `/sk/${name}/`
  };
  DirName::create(path)
}

fun parentName(context: mutable Context): DirName {
  path = context.currentArrow() match {
  | Some(arrow) -> `${arrow.childName}${base64(arrow.key)}/`
  | None() -> `/sk/`
  };
  DirName::create(path)
}

fun base64(toEncode: Key): String {
  encoded = `b64_${Base64.encodeString(toEncode.toString(), true)}`;
  encoded.searchRight(ch ~> ch != '=') match {
  | Some(i) ->
    _ = i.next();
    encoded.getIter().substring(i)
  | None() -> ""
  }
}

module end; /* SKStore */
