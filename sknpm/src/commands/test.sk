module Sknpm;

fun test(): (
  Cli.Command,
  (Skargo.GlobalContext, Cli.ParseResults) ~> Result<void, void>,
) {
  (
    Cli.Command("test")
      .short("t")
      .about("Run the tests")
      .arg(
        Cli.Arg::string("manifest-path")
          .value_name("PATH")
          .about("Path to Skargo.toml"),
      )
      .arg(
        Cli.Arg::string("target-dir")
          .value_name("PATH")
          .about("Directory for all generated artifacts"),
      )
      .arg(
        Cli.Arg::string("out-dir")
          .value_name("PATH")
          .about("Copy final artifacts to this directory"),
      )
      .args(Skargo.kProfileArgs)
      .arg(
        Cli.Arg::string("target")
          .repeatable()
          .positional()
          .about(
            "If specified, only run tests for the specified test targets (defined in target.json)",
          ),
      )
      .arg(
        Cli.Arg::string("filter")
          .repeatable()
          .short("f")
          .long("filter")
          .about("If specified, only run tests with names matching the filter"),
      )
      .arg(Cli.Arg::string("junitxml").about("Generate a JUnit XML report")),
    (gctx, args) ~> execCommand(gctx, args, execTest),
  )
}

fun execTest(brunner: BuildRunner, args: Cli.ParseResults): Result<void, void> {
  execCustomTests(brunner, args)?;
  execSkTests(brunner, args)?;
  Success(void)
}

fun execCustomTests(
  brunner: BuildRunner,
  args: Cli.ParseResults,
): Result<void, void> {
  ws = brunner.bctx.ws;
  root = ws.package.manifest.package_id.source_id.url;
  tests_dir = Path.join(root, "ts/tests");
  if (!FileSystem.exists(tests_dir)) return Success(void);
  target_dir = brunner.target_layout.dest;
  console = brunner.bctx.gctx.console;
  skargo(args, false, console)?;
  name = ws.package.manifest.package_id.name;
  package = Package::create(root, name, console)?;
  syncDirs(tests_dir, target_dir, Set["node_modules"], console);
  _ = exec(Array["npm", "i", "--prefix", target_dir], console)?;
  packageDir = Path.join(Path.join(target_dir, "node_modules"), package.name);
  _ = manage(brunner, package, Some(packageDir))?;
  targetsFile = Path.join(target_dir, "targets.json");
  availables = if (FileSystem.exists(targetsFile)) {
    targets(targetsFile, console)?;
  } else {
    Map[]
  };
  services = Array<String>[];
  targets = Array<String>[];
  if (args.getArray("target").size() > 0) {
    for (v in args.getArray("target")) {
      availables.maybeGet(v) match {
      | Some(target) ->
        !services = services.concat(target.services);
        !targets = services.concat(target.paths)
      | _ ->
        console.error(`${v} target not defined.`);
        return Failure(void)
      }
    }
  } else {
    availables.each((_, target) -> {
      !services = services.concat(target.services);
    })
  };
  processes = mutable Vector<Int>[];
  done = mutable Set<String>[];
  environment = mutable Map<String, String>[];
  if (!services.isEmpty()) {
    console.status(
      "Running",
      "Services " + Set::createFromItems(services).join(", "),
    );
  };
  for (s in services) {
    if (!done.contains(s)) {
      runService(
        Path.join(target_dir, s),
        root,
        processes,
        environment,
        console,
      )?;
      done.insert(s);
    }
  };
  run_playwright(target_dir, args, console, targets, environment, processes)
}

fun execSkTests(
  brunner: BuildRunner,
  args: Cli.ParseResults,
): Result<void, void> {
  units = mutable Vector[];
  for (unit in brunner.bctx.roots) {
    dfs(brunner, unit, units)
  };
  tests = units.filter(u ->
    (u.target.kind is Skargo.TestTarget _) &&
      u.arch match {
      | Skargo.TargetArchHost() -> false
      | Skargo.TargetArchTriple(t) -> t.isWasm32()
      }
  );
  if (tests.isEmpty()) return Success(void);
  console = brunner.bctx.gctx.console;
  if (tests.size() > 1) {
    console.error("Multiple tests targets.");
    return Failure(void)
  };
  skargo(args, true, console)?;
  wasm_file = Path.join(brunner.target_layout.dest, "test.wasm");
  if (!FileSystem.exists(wasm_file)) {
    console.error("Unable to find test wasm file");
    return Failure(void)
  };
  target_dir = brunner.target_layout.dest;
  saveArchive(target_dir);
  tests_dir = Path.join(target_dir, "tests");
  _ = exec(Array["npm", "i", "--prefix", tests_dir], console)?;
  tsDir = Path.join(target_dir, "ts");
  checkDir(tsDir);
  saveSkTestsTs(tsDir);
  ws = brunner.bctx.ws;
  root = ws.package.manifest.package_id.source_id.url;
  package = Package::create(root, "sk_tests", console)?;
  packageDir = Path.join(Path.join(tests_dir, "node_modules"), "sk_tests");
  npmDir = manage(
    brunner,
    package,
    Some(packageDir),
    Some((tests[0], "sk_tests")),
  )?;
  copy(wasm_file, Path.join(Path.join(npmDir, "dist"), "test.wasm"));
  run_playwright(tests_dir, args, console);
}

fun run_playwright(
  target_dir: String,
  args: Cli.ParseResults,
  console: Skargo.Console,
  targets: Array<String> = Array[],
  environment: readonly Map<String, String> = Map[],
  processes: readonly Vector<Int> = Vector[],
): Result<void, void> {
  console.status("Running", "Playwright");
  Environ.set_current_dir(target_dir);
  environment.each(Environ.set_var);
  reporter = args.maybeGetString("junitxml").map(v -> {
    Environ.set_var("PLAYWRIGHT_JUNIT_OUTPUT_NAME", v);
    "junit"
  });
  filters = if (args.getArray("filter").size() > 0) {
    Array["-g", args.getArray("filter").join("|")]
  } else {
    Array[]
  };
  exec(Array["npx", "playwright", "install"], console) match {
  | Success _ -> void
  | Failure _ ->
    processes.each(p -> _ = exec(Array["kill", p.toString()], console));
    return Failure(void)
  };
  cmd = Array[
    "npx",
    "playwright",
    "test",
    `--reporter=${reporter.default("line")}`,
  ].concat(filters).concat(targets);
  exec(cmd, console, Skargo.VerbosityQuiet()) match {
  | Success _ -> void
  | Failure _ ->
    processes.each(p -> _ = exec(Array["kill", p.toString()], console));
    return Failure(void)
  };
  Success(void)
}

module end;
