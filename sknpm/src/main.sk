module Sknpm;

class Tag(name: String, version: ?Int) uses Orderable {
  static fun fromString(str: String): Result<Tag, String> {
    components = str.split(".");
    if (components.size() > 2) {
      return Failure(`Invalid tag string ${str}`)
    };
    v = (components.maybeGet(1) match {
    | Some(v) ->
      v.toIntOption() match {
      | Some(vn) if (vn >= 0) -> Success(Some(vn))
      | Some _ -> Failure("Tag version nust be positive")
      | _ -> Failure("Tag version nust be an integer")
      }
    | _ -> Success(None())
    })?;
    Success(Tag(components[0], v))
  }

  fun compare(other: Tag): Order {
    (this, other) match {
    | (Tag(n1, None()), Tag(n2, None())) -> n1.compare(n2)
    | (Tag(n1, Some(v1)), Tag(n2, Some(v2))) ->
      nComp = n1.compare(n2);
      if (nComp == EQ()) {
        v1.compare(v2);
      } else {
        nComp
      }
    | (Tag(n1, None()), Tag(n2, Some(v2))) ->
      nComp = n1.compare(n2);
      if (nComp == EQ()) {
        0.compare(v2);
      } else {
        nComp
      }
    | (Tag(n1, Some(v1)), Tag(n2, None())) ->
      nComp = n1.compare(n2);
      if (nComp == EQ()) {
        v1.compare(0);
      } else {
        nComp
      }
    }
  }

  fun toString(): String {
    this.version match {
    | Some(v) -> `${this.name}.${v}`
    | _ -> this.name
    }
  }
}

// TODO: This can probably be replaced with Semver.Version altogether, as it
// already handles the prerelease tag.
class Version(version: Semver.Version, tag: ?Tag) uses Orderable {
  //
  static fun fromString(str: String): Result<Version, String> {
    components = str.split("-");
    if (components.size() > 2) {
      return Failure(`Invalid version-tag string ${str}`)
    };
    version = (try {
      Success(Semver.Version::fromString(components[0]))
    } catch {
    | ex -> Failure(ex.getMessage())
    })?;
    optTag = components.maybeGet(1) match {
    | Some(strTag) ->
      tag = Tag::fromString(strTag)?;
      Some(tag)
    | _ -> None()
    };
    Success(Version(version, optTag))
  }

  fun toString(): String {
    this.tag match {
    | Some(tag) -> `${this.version}-${tag}`
    | _ -> this.version.toString()
    }
  }

  fun incrMajor(): this {
    !this.version = this.version with {major => this.version.major + 1};
    this
  }

  fun incrMinor(): this {
    !this.version = this.version with {minor => this.version.minor + 1};
    this
  }

  fun incrPatch(): this {
    !this.version = this.version with {patch => this.version.patch + 1};
    this
  }

  fun compare(other: Version): Order {
    (this, other) match {
    | (Version(v1, None()), Version(v2, None())) -> v1.compare(v2)
    | (Version(v1, Some(t1)), Version(v2, Some(t2))) ->
      vComp = v1.compare(v2);
      if (vComp == EQ()) {
        t1.compare(t2);
      } else {
        vComp
      }
    | (Version(v1, Some(_)), Version(v2, None())) ->
      vComp = v1.compare(v2);
      if (vComp == EQ()) {
        LT();
      } else {
        vComp
      }
    | (Version(v1, None()), Version(v2, Some(_))) ->
      vComp = v1.compare(v2);
      if (vComp == EQ()) {
        GT();
      } else {
        vComp
      }
    }
  }
}

class Target(paths: Array<String>, services: Array<String>) {
  //
  static fun fromJSON(value: JSON.Value): Target {
    json = value.expectObject();
    strArray = name ->
      json
        .maybeGetArray(name)
        .map(arr -> arr.value.map(v -> v.expectString()).toArray())
        .default(Array[]);
    Target(strArray("paths"), strArray("services"))
  }
}

fun main(): void {
  cmd = Cli.Command("sknpm")
    .about("Skip's npm package builder")
    .arg(
      Cli.Arg::bool("version")
        .short("V")
        .long("version")
        .about("Print version info and exit"),
    )
    .arg(
      Cli.Arg::bool("quiet")
        .short("q")
        .long("quiet")
        .about("Do not print skargo log messages")
        .global(),
    )
    .arg(
      Cli.Arg::bool("verbose")
        .short("v")
        .long("verbose")
        .repeatable()
        .about("Use verbose output (-vv very verbose)")
        .global(),
    )
    .arg(
      Cli.Arg::string("color")
        .value_name("WHEN")
        .default("auto")
        .about("Coloring: auto, always, never")
        .global(),
    );
  suppliers = Array[check, build, test, run, publish, help];
  commands = mutable Map[];
  for (supplier in suppliers) {
    (subcommand, cmdFn) = supplier();
    !cmd = cmd.subcommand(subcommand);
    commands.set(subcommand.name, cmdFn);
  };
  !cmd = cmd.help();
  args = cmd.parseArgs();
  if (args.getBool("version")) {
    // FIXME
    // #env("SKARGO_PKG_VERSION")
    print_string("sknpm " + "FIXME");
  } else {
    gctx = Skargo.GlobalContext::create(args);
    args.maybeGetSubcommand() match {
    | Some(subcmd) ->
      commands.maybeGet(subcmd) match {
      | Some(handler) ->
        handler(gctx, args) match {
        | Failure _ -> skipExit(2)
        | _ -> void
        }
      | _ -> invariant_violation(`unknown subcommand ${subcmd}`)
      }
    | None() -> print_string(Cli.usage(args.cmd, true))
    }
  }
}

module end;
