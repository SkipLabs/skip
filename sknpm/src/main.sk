module Sknpm;

class SystemCallException(code: Int, error: ?String = None()) extends Exception

private class UserConfig{
  formatOnCheck: Bool = false,
  autoRemoveState: Bool = false,
  repositories: Array<String> = Array[],
} {
  fun update(json: JSON.Object, dir: String): UserConfig {
    json.maybeGetBool("auto-remove-state").each(v -> !this.autoRemoveState = v);
    json.maybeGetBool("format-on-check").each(v -> !this.formatOnCheck = v);
    json.maybeGetArray("repositories").each(v ->
      !this.repositories = v.value
        .map(jv -> Path.join(dir, jv.expectString()))
        .toArray()
    );
    this;
  }
}

private class Env{
  rootDir: String,
  manifest: Manifest,
  console: Skargo.Console,
  config: UserConfig,
} {
  static fun create(verbosity: Skargo.ConsoleVerbosity): Env {
    rootDir = findRootDir();
    config = findUserConfig();
    Env{
      rootDir,
      manifest => Manifest::read(Path.join(rootDir, kManifestFile)),
      console => Skargo.Console(verbosity),
      config,
    }
  }

  fun getDependencies(): Map<String, Manifest> {
    // TODO When we start having remote repositories, this will also download the dependencies.
    getDependencies(this.manifest, this.config.repositories) match {
    | Success(v) -> v
    | Failure(e) -> throw e
    };
  }

  static fun fromFile(path: String, verbosity: Skargo.ConsoleVerbosity): Env {
    rootDir = Path.dirname(path);
    config = findUserConfig(Some(rootDir));
    Env{
      rootDir,
      manifest => Manifest::read(path),
      console => Skargo.Console(verbosity),
      config,
    }
  }
}

fun envCmd(args: Cli.ParseResults, fn: (Cli.ParseResults, Env) ~> void): void {
  env = Env::create(getVerbosity(args));
  fn(args, env)
}

private fun run(args: Array<String>, console: Skargo.Console): String {
  console.status_verbose("Running", args.join(" "));
  (stdout_cb, stderr_cb) = if (console.verbosity >= Skargo.VerbosityProlix()) {
    (print_raw, print_error_raw)
  } else {
    ((_) -> void, (_) -> void)
  };

  p = System.subprocess(args, stdout_cb, stderr_cb);
  if (!p.success()) {
    console.error(
      "command exited with non-zero status\n\n" +
        "Caused by:\n" +
        "  process did not exit successfully: \`" +
        args[0] +
        `\` (exit status: ${p.exitcode()})\n` +
        "  --- stdout\n" +
        p.stdout.split("\n").map(l -> "  " + l).join("\n") +
        "\n" +
        "  --- stderr\n" +
        p.stderr.split("\n").map(l -> "  " + l).join("\n") +
        "\n",
    );
    skipExit(p.exitcode());
  };

  p.stdout
}

class ManifestDependency{
  version: ?Semver.VersionReq = None(),
  path: ?String = None(),
} {
  static fun fromTOML(basePath: String, toml: TOML.Value): ManifestDependency {
    toml match {
    | TOML.String(v) ->
      ManifestDependency{version => Some(Semver.VersionReq::fromString(v))}
    | t @ TOML.Table _ ->
      t.maybeGetString("path") match {
      | Some(path) ->
        ManifestDependency{
          // FIXME: This breaks on absolute paths.
          path => Some(Path.join(basePath, path)),
          version => t
            .maybeGetString("version")
            .map(Semver.VersionReq::fromString),
        }
      | _ -> invariant_violation("TODO")
      }
    | _ -> invariant_violation("Invalid dependency specification.")
    }
  }
}

class TargetTriple(
  machine: String,
  vendor: ?String,
  operatingsystem: ?String,
) uses Orderable, Show {
  //
  static fun fromString(str: String): TargetTriple {
    components = str.split("-");
    if (components.isEmpty() || components.size() > 3) {
      invariant_violation("Invalid target triplet string " + str)
    };
    TargetTriple(
      components[0],
      components.maybeGet(1) match {
      | Some(v) if (v != "unknown") -> Some(v)
      | _ -> None()
      },
      components.maybeGet(2) match {
      | Some(v) if (v != "unknown") -> Some(v)
      | _ -> None()
      },
    )
  }

  fun isWasm32(): Bool {
    this.machine == "wasm32"
  }

  fun allows(target: TargetTriple): Bool {
    this.machine == target.machine &&
      this.vendor.default("unknown") == target.vendor.default("unknown") &&
      this.operatingsystem.default("unknown") ==
        target.operatingsystem.default("unknown")
  }

  fun toString(): String {
    `${this.machine}-${this.vendor.default(
      "unknown",
    )}-${this.operatingsystem.default("unknown")}`
  }
}

class ManifestBinary(name: String, main: String) uses Equality {
  static fun fromTOML(toml: TOML.Table): ManifestBinary {
    name = toml.getString("name");
    main = toml.getString("main");

    ManifestBinary(name, main)
  }
}

class Manifest{
  name: String,
  path: String,
  version: Semver.Version,
  srcs: Array<String>,
  tests: Array<String>,
  testHarness: String,
  dependencies: Map<String, ManifestDependency>,
  buildDependencies: Map<String, ManifestDependency>,
  bin: Array<ManifestBinary>,
} uses Equality {
  //
  fun ==(other: Manifest): Bool {
    this.name == other.name &&
      this.path == other.path &&
      this.version == other.version
  }

  static fun read(path: String): Manifest {
    basePath = Path.dirname(path);
    toml = TOML.decode(FileSystem.readTextFile(path));
    package = toml.getTable("package");
    name = package.getString("name");
    version = Semver.Version::fromString(package.getString("version"));

    srcs = package.maybeGetArray("srcs") match {
    | Some(arr) -> arr.map(x -> x.expectString())
    | _ ->
      FileSystem.readFilesRecursive(Path.join(basePath, "src"), f ->
        f.endsWith(".sk")
      ).toArray()
    };

    testHarness = package.maybeGetString("test-harness").default("SKTest.main");

    tests = package.maybeGetArray("tests") match {
    | Some(arr) -> arr.map(x -> x.expectString())
    | _ ->
      testsPath = Path.join(basePath, "tests");
      if (FileSystem.exists(testsPath)) {
        FileSystem.readFilesRecursive(testsPath, f ->
          f.endsWith(".sk")
        ).toArray()
      } else {
        Array[]
      }
    };

    dependencies = toml.maybeGetTable("dependencies") match {
    | Some(table) ->
      table.map.map((_, v) -> ManifestDependency::fromTOML(basePath, v))
    | _ -> Map[]
    };

    buildDependencies = toml.maybeGetTable("build-dependencies") match {
    | Some(bDependencies) ->
      bDependencies.map.map((_, v) -> ManifestDependency::fromTOML(basePath, v))
    | _ -> Map[]
    };

    bin = toml.maybeGetArray("bin") match {
    | Some(arr) -> arr.map(t -> ManifestBinary::fromTOML(t.expectTable()))
    | None() -> Array[]
    };

    Manifest{
      name,
      path => basePath,
      version,
      srcs,
      tests,
      testHarness,
      dependencies,
      buildDependencies,
      bin,
    }
  }
}

private fun fetchLatestManifest(
  name: String,
  constraint: ManifestDependency,
  reps: Array<String>,
): ?Manifest {
  constraint.path match {
  | Some(path) -> return Some(Manifest::read(Path.join(path, kManifestFile)))
  | _ -> void
  };

  constraint.version match {
  | None() -> invariant_violation("unreachable")
  | Some(r) ->
    // Fetch highest available version within range.
    optLast: ?Manifest = None();
    for (repo in reps) {
      dir = Path.join(repo, name);
      mFile = Path.join(dir, kManifestFile);
      if (FileSystem.exists(mFile)) {
        manifest = Manifest::read(mFile);
        if (r.matches(manifest.version)) {
          !optLast = optLast match {
          | Some(
            last,
          ) if (r.matches(last.version) && last.version < manifest.version) ->
            Some(manifest)
          | None() -> Some(manifest)
          | _ -> optLast
          }
        };
      }
    };
    optLast
  }
}

// TODO: Backtrack on conflict, and try previous versions.
private fun solveDependencies(
  manifest: Manifest,
  solved: mutable Map<String, Manifest>,
  reps: Array<String>,
): ?UnsatisfiableDependency {
  for ((name, constraint) in manifest.dependencies.items()) {
    if (solved.containsKey(name)) {
      fetchLatestManifest(name, constraint, reps) match {
      | Some(depManifest) if (depManifest.version == solved[name].version) ->
        void
      | _ ->
        return Some(UnsatisfiableDependency(manifest.path, name, constraint))
      }
    } else {
      fetchLatestManifest(name, constraint, reps) match {
      | Some(depManifest) ->
        solved.set(name, depManifest);
        res = solveDependencies(depManifest, solved, reps);
        if (res.isSome()) {
          return res
        }
      | _ ->
        return Some(UnsatisfiableDependency(manifest.path, name, constraint))
      }
    };
  };
  None()
}

class UnsatisfiableDependency(
  path: String,
  name: String,
  constraint: ManifestDependency,
) extends Exception {}

fun getDependencies(
  manifest: Manifest,
  reps: Array<String>,
): Result<Map<String, Manifest>, Exception> {
  result = mutable Map[manifest.name => manifest];
  solveDependencies(manifest, result, reps)
    .map(e -> Failure(e))
    .default(Success(result.chill()));
}

const kManifestFile: String = "Skargo.toml";
const kVersionFile: String = "version.sk";
const kDevProfile: String = "dev";
const kReleaseProfile: String = "release";
const kDebugProfile: String = "debug";
const kUserConfiguration: String = ".skargoconfig";
const kDefaultTarget: String = "host";
const kTargetDir: String = "target";

private fun findUserConfig(optPath: ?String = None()): UserConfig {
  configFiles = mutable Vector<String>[];
  path = optPath.default(getcwd());
  loop {
    file = Path.join(path, kUserConfiguration);
    if (FileSystem.exists(file)) {
      configFiles.push(file)
    };
    if (Path.isRoot(path)) {
      break void;
    };
    !path = Path.parentname(path)
  };
  config = UserConfig{};
  configFiles.reversed().each(cFile ->
    try {
      json = JSON.decode(FileSystem.readTextFile(cFile)).expectObject();
      !config = config.update(json, Path.parentname(cFile));
    } catch {
    | _exn -> void
    }
  );
  config
}

private fun findRootDir(): String {
  path = getcwd();

  loop {
    if (FileSystem.exists(Path.join(path, kManifestFile))) {
      return path
    };
    if (Path.isRoot(path)) {
      invariant_violation(
        `Could not find \`${kManifestFile}\` in \`${getcwd()} or any parent directory.\``,
      )
    };

    !path = Path.parentname(path)
  }
}

fun getProfile(args: Cli.ParseResults): String {
  args.maybeGetString("profile") match {
  | Some(p) -> p
  | None() if (args.getBool("release")) -> kReleaseProfile
  | None() -> kDevProfile
  }
}

fun getVerbosity(args: Cli.ParseResults): Skargo.ConsoleVerbosity {
  // TODO: Properly support -q/--quiet for VerbosityQuiet, -v for VerbosityVerbose,
  // and -vv for VerbosityProlix.
  if (args.getBool("verbose")) {
    Skargo.VerbosityProlix()
  } else {
    Skargo.VerbosityNormal()
  }
}

private class BuildContext{
  env: Env,
  skc: String,
  targetDir: String,
  target: ?TargetTriple,
  profile: String,
  stateDb: String,
  files: Array<String>,
  deps: Map<String, Manifest>,
} {
  static fun create(
    env: Env,
    target: ?String,
    targetDirOpt: ?String,
    profile: String,
  ): BuildContext {
    targetDir = targetDirOpt match {
    | Some(d) -> d
    | None() -> Path.join(getTargetDir(env.rootDir, target), profile)
    };
    skc = Environ.varOpt("SKC").default("skc");
    deps = env.getDependencies();
    BuildContext{
      env,
      skc,
      targetDir,
      target => target.map(TargetTriple::fromString),
      profile,
      stateDb => Path.join(targetDir, "state.db"),
      files => getFiles(env.manifest, deps).concat(
        Array[Path.join(targetDir, kVersionFile)],
      ),
      deps,
    }
  }

  static fun hostBinary(env: Env, profile: String, binary: String): String {
    Path.join(Path.join(getTargetDir(env.rootDir, None()), profile), binary);
  }

  fun isWasm32(): Bool {
    this.target.map(t -> t.isWasm32()).default(false);
  }
}

private fun getTargetDir(rootDir: String, targetOpt: ?String): String {
  // TODO: Build artifacts in subdirectory corresponding to build profile (dev/release).
  dir = Path.join(rootDir, kTargetDir);
  Path.join(dir, targetOpt.default(kDefaultTarget))
}

private fun getFiles(
  manifest: Manifest,
  deps: Map<String, Manifest>,
): Array<String> {
  files = manifest.tests;
  for (dep in deps) {
    !files = files.concat(dep.srcs)
  };
  files.collect(Array)
}

const kAuthor: String = "Skiplabs";

class NpmVersionException(
  version: Version,
  existing: Version,
) extends Exception {
  fun getMessage(): String {
    `You are trying to publish a package with an earlier or identical version (${
      this.version
    }) to an existing one (${
      this.existing
    }).\nIf this is what you really want to do please use the --force option.`;
  }
}

class NpmDefinitionException() extends Exception {
  fun getMessage(): String {
    "npm.json file must be defined";
  }
}

class Tag(name: String, version: ?Int) uses Orderable {
  static fun fromString(str: String): Tag {
    components = str.split(".");
    if (components.size() > 2) {
      invariant_violation("Invalid tag string " + str)
    };
    v = components.maybeGet(1).map(v -> v.toInt());
    v.each(vn -> invariant(vn >= 0, "Tag version nust be positive"));
    Tag(components[0], v)
  }

  fun compare(other: Tag): Order {
    (this, other) match {
    | (Tag(n1, None()), Tag(n2, None())) -> n1.compare(n2)
    | (Tag(n1, Some(v1)), Tag(n2, Some(v2))) ->
      nComp = n1.compare(n2);
      if (nComp == EQ()) {
        v1.compare(v2);
      } else {
        nComp
      }
    | (Tag(n1, None()), Tag(n2, Some(v2))) ->
      nComp = n1.compare(n2);
      if (nComp == EQ()) {
        0.compare(v2);
      } else {
        nComp
      }
    | (Tag(n1, Some(v1)), Tag(n2, None())) ->
      nComp = n1.compare(n2);
      if (nComp == EQ()) {
        v1.compare(0);
      } else {
        nComp
      }
    }
  }

  fun toString(): String {
    this.version match {
    | Some(v) -> `${this.name}.${v}`
    | _ -> this.name
    }
  }
}

// TODO: This can probably be replaced with Semver.Version altogether, as it
// already handles the prerelease tag.
class Version(version: Semver.Version, tag: ?Tag) uses Orderable {
  //
  static fun fromString(str: String): Version {
    components = str.split("-");
    if (components.size() > 2) {
      invariant_violation("Invalid version-tag string " + str)
    };
    Version(
      Semver.Version::fromString(components[0]),
      components.maybeGet(1).map(Tag::fromString),
    )
  }

  fun toString(): String {
    this.tag match {
    | Some(tag) -> `${this.version}-${tag}`
    | _ -> this.version.toString()
    }
  }

  fun compare(other: Version): Order {
    (this, other) match {
    | (Version(v1, None()), Version(v2, None())) -> v1.compare(v2)
    | (Version(v1, Some(t1)), Version(v2, Some(t2))) ->
      vComp = v1.compare(v2);
      if (vComp == EQ()) {
        t1.compare(t2);
      } else {
        vComp
      }
    | (Version(v1, Some(_)), Version(v2, None())) ->
      vComp = v1.compare(v2);
      if (vComp == EQ()) {
        LT();
      } else {
        vComp
      }
    | (Version(v1, None()), Version(v2, Some(_))) ->
      vComp = v1.compare(v2);
      if (vComp == EQ()) {
        GT();
      } else {
        vComp
      }
    }
  }
}

class GitDiffException() extends Exception {
  fun getMessage(): String {
    "You have git local changes.\nPlease, commit your changes or stash them before publishing.";
  }
}

class Package(
  name: String,
  author: ?String,
  version: Version,
  optNodeVersion: ?String = None(),
  optBinary: ?String = None(),
  sideEffects: Bool = false,
) {
  static fun check(manifest: Manifest): void {
    file = Path.join(manifest.path, "npm.json");
    if (!FileSystem.exists(file)) {
      throw NpmDefinitionException()
    }
  }

  static fun create(manifest: Manifest, test: Bool = false): Package {
    file = Path.join(manifest.path, "npm.json");
    if (FileSystem.exists(file)) {
      contents = FileSystem.readTextFile(file);
      json = JSON.decode(contents).expectObject();
      Package(
        json.getString("name"),
        json.maybeGetString("author"),
        Version::fromString(json.getString("version")),
        json.maybeGetString("node-version"),
        json.maybeGetString("binary"),
        json.maybeGetBool("sideEffects").default(false),
      )
    } else {
      if (!test) print_debug("The npm.json file is not defined");
      Package(
        if (test) "sk_tests" else manifest.name,
        Some(kAuthor),
        // FIXME
        Version::fromString("0.1.0-FIXME"),
      )
    }
  }

  fun update(path: String, version: Version): void {
    file = Path.join(path, "npm.json");
    stream = mutable Vector[];
    (this with {version}).toJSON().writeToStream(stream.push, 2);
    FileSystem.writeTextFile(file, stream.join(""));
  }

  fun toJSON(): JSON.Value {
    map = mutable Map<String, JSON.Value>[
      "name" => JSON.String(this.name),
      "version" => JSON.String(this.version.toString()),
    ];
    this.author.each(a -> map.set("author", JSON.String(a)));
    this.optNodeVersion.each(v -> map.set("node-version", JSON.String(v)));
    this.optBinary.each(b -> map.set("binary", JSON.String(b)));
    if (this.sideEffects) {
      map.set("sideEffects", JSON.Bool(this.sideEffects))
    };
    JSON.Object(map.chill());
  }
}

class Target(paths: Array<String>, services: Array<String>) {
  //
  static fun fromJSON(value: JSON.Value): Target {
    json = value.expectObject();
    strArray = name ->
      json
        .maybeGetArray(name)
        .map(arr -> arr.value.map(v -> v.expectString()).toArray())
        .default(Array[]);
    Target(strArray("paths"), strArray("services"))
  }
}

fun targets(file: String): Map<String, Target> {
  contents = FileSystem.readTextFile(file);
  json = JSON.decode(contents).expectObject();
  json.value.map((_, v) -> Target::fromJSON(v));
}

fun main(): void {
  cmd = Cli.Command("sknpm")
    .about("Skip's npm package builder")
    .arg(
      Cli.BoolArg("version")
        .short("V")
        .long("version")
        .about("Print version info and exit"),
    )
    .arg(
      Cli.BoolArg("verbose")
        .short("v")
        .long("verbose")
        .about("Use verbose output")
        .global(),
    );
  suppliers = Array[checker, build, test, runner, publish, help];
  commands = mutable Map[];
  for (supplier in suppliers) {
    (subcommand, cmdFn) = supplier();
    !cmd = cmd.subcommand(subcommand);
    commands.set(subcommand.name, cmdFn);
  };
  !cmd = cmd.help();
  args = cmd.parseArgs();
  if (args.getBool("version")) {
    print_string(
      // FIXME
      Environ.args().next().default("sknpm") + " " + "FIXME",
    );
    skipExit(0);
  } else {
    args.maybeGetSubcommand() match {
    | Some(subcmd) ->
      commands.maybeGet(subcmd) match {
      | Some(handler) ->
        skipExit(
          try {
            handler(args);
            0
          } catch {
          | SystemCallException(code, _) -> code
          | e @ NpmDefinitionException _
          | e @ GitDiffException _ ->
            print_error(e.getMessage());
            2
          | exn -> throw exn
          },
        )
      | _ -> invariant_violation(`Unknown subcommand ${subcmd}`)
      }
    | None() ->
      print_string(Cli.usage(args.cmd, true));
      skipExit(0)
    }
  };
}

/********* Check **********/

fun checker(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("check")
      .short("c")
      .about("Run tsc on ts source files")
      .arg(
        Cli.BoolArg("test")
          .short("t")
          .long("test")
          .about("Run tsc on ts tests files, with build package"),
      ),
    args ~> envCmd(args, execCheck),
  )
}

fun execCheck(args: Cli.ParseResults, env: Env): void {
  (tsDir, info, n) = if (args.getBool("test")) {
    tsDir = Path.join(env.rootDir, "ts/tests");
    invariant(FileSystem.exists(tsDir), "No typescript test to check");
    bc = BuildContext::create(
      env,
      Some("wasm32-unknown-unknown"),
      None(),
      Skargo.kDevProfile,
    );
    _ = buildIfNeeded(bc, false);
    package = Package::create(env.manifest);
    npmDir = manage(bc, package, None());
    (tsDir, Some((package.name, npmDir)), "tests")
  } else {
    (Path.join(env.rootDir, "ts/src"), None(), "source")
  };
  invariant(FileSystem.exists(tsDir), `No ${n} typescript to check`);
  tsc(tsDir, info, env.console);
}

/********* Build **********/

fun build(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("build")
      .short("b")
      .about("Build the npm package")
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(
        Cli.StringArg("profile").about(
          "Build artifacts with the specified profile",
        ),
      )
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Build artifacts in release mode, with optimizations"),
      )
      .arg(
        Cli.StringArg("npm-out").about(
          "Directory for all generated npm package",
        ),
      )
      .arg(
        Cli.StringArg("html").about(
          "Build minimal html support for specified launcher",
        ),
      ),
    args ~> envCmd(args, execBuild),
  )
}

fun execBuild(args: Cli.ParseResults, env: Env): void {
  bc = BuildContext::create(
    env,
    Some("wasm32-unknown-unknown"),
    args.maybeGetString("target-dir"),
    getProfile(args),
  );
  _ = buildIfNeeded(bc, false);
  _ = manage(bc, Package::create(env.manifest), args.maybeGetString("npm-out"));
  args.maybeGetString("html") match {
  | Some(launcher) ->
    writeIndex(bc.targetDir, launcher);
    writeRun(bc.targetDir, env.console)
  | _ -> void
  }
}

/********* Test **********/

fun test(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("test")
      .short("t")
      .about("Run the tests")
      .arg(
        Cli.StringArg("target")
          .repeatable()
          .positional()
          .about(
            "If specified, only run tests for the specified test targets (defined in target.json)",
          ),
      )
      .arg(
        Cli.StringArg("filter")
          .repeatable()
          .short("f")
          .long("filter")
          .about("If specified, only run tests with names matching the filter"),
      )
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(
        Cli.StringArg("profile").about(
          "Build artifacts with the specified profile",
        ),
      )
      .arg(Cli.StringArg("junitxml").about("Generate a JUnit XML report"))
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Build artifacts in release mode, with optimizations"),
      ),
    args ~> envCmd(args, execTest),
  )
}

fun execTest(args: Cli.ParseResults, env: Env): void {
  package = Package::create(env.manifest, true);
  bc = BuildContext::create(
    env,
    Some("wasm32-unknown-unknown"),
    args.maybeGetString("target-dir"),
    getProfile(args),
  );
  tests = Path.join(env.manifest.path, "ts/tests");
  targetDir = Path.join(bc.targetDir, "tests");
  customTests = FileSystem.exists(tests);
  if (!customTests) {
    !bc.env.manifest.bin = Array[
      ManifestBinary("test", env.manifest.testHarness),
    ];
  };
  _ = buildIfNeeded(bc, !customTests);
  _ = manage(bc, Package::create(env.manifest), None());
  if (customTests) {
    syncDirs(
      tests,
      targetDir,
      Set["node_modules"],
      bc.env.console.verbosity >= Skargo.VerbosityVerbose(),
    );
  } else {
    saveArchive(bc.targetDir);
  };
  _ = run(
    Array["npm", "i", "--prefix", targetDir, "--save-dev", "@types/node"],
    bc.env.console,
  );
  tsDir = Path.join(bc.targetDir, "ts");
  optBinName: ?String = None();
  if (!customTests) {
    checkDir(tsDir);
    saveSkTestsTs(tsDir);
    !optBinName = Some("sk_tests")
  };
  packageDir = Path.join(Path.join(targetDir, "node_modules"), package.name);
  _ = manage(bc, package, Some(packageDir), optBinName);
  targetsFile = Path.join(targetDir, "targets.json");
  availables = if (FileSystem.exists(targetsFile)) {
    targets(targetsFile);
  } else {
    Map[]
  };
  services = Array<String>[];
  targets = Array<String>[];
  if (args.getArray("target").size() > 0) {
    args.getArray("target").each(v ->
      availables.maybeGet(v) match {
      | Some(target) ->
        !services = services.concat(target.services);
        !targets = services.concat(target.paths)
      | _ -> invariant_violation(`${v} target not defined.`)
      }
    )
  } else {
    availables.each((_, target) -> {
      !services = services.concat(target.services);
    })
  };

  processes = mutable Vector<Int>[];
  done = mutable Set<String>[];
  environment = mutable Map<String, String>[];
  services.each(s -> {
    if (!done.contains(s)) {
      runService(
        Path.join(targetDir, s),
        bc.env.manifest.path,
        processes,
        environment,
        bc.env.console.verbosity >= Skargo.VerbosityVerbose(),
      );
      done.insert(s);
    }
  });
  Environ.set_current_dir(targetDir);
  environment.each(Environ.set_var);
  reporter = args.maybeGetString("junitxml").map(v -> {
    Environ.set_var("PLAYWRIGHT_JUNIT_OUTPUT_NAME", v);
    "junit"
  });
  filters = if (args.getArray("filter").size() > 0) {
    Array["-g", args.getArray("filter").join("|")]
  } else {
    Array[]
  };
  cmd = Array[
    "npx",
    "playwright",
    "test",
    `--reporter=${reporter.default("line")}`,
  ].concat(filters).concat(targets);
  try {
    _ = run(Array["npx", "playwright", "install"], bc.env.console);
    p = System.subprocess(cmd, print_raw, print_error_raw);
    if (!p.success()) {
      throw SystemCallException(p.exitcode());
    };
    processes.each(p -> _ = run(Array["kill", p.toString()], bc.env.console));
  } catch {
  | exn ->
    processes.each(p -> _ = run(Array["kill", p.toString()], bc.env.console));
    throw exn
  }
}

fun runService(
  serviceFile: String,
  root: String,
  processes: mutable Vector<Int>,
  environment: mutable Map<String, String>,
  verbose: Bool,
): void {
  if (FileSystem.exists(serviceFile)) {
    cmd = Array["make", "-f", serviceFile, `ROOT_DIR=${root}`];
    if (verbose) {
      print_error(`>> ${cmd.join(" ")}`)
    };
    p = System.subprocess(cmd, s -> if (verbose) print_raw(s));
    if (verbose || !p.success()) {
      if (!verbose) print_raw(p.stdout);
      print_error_raw(p.stderr);
    };
    if (!p.success()) {
      throw SystemCallException(p.exitcode());
    };
    p.stdout.split("\n").each(line -> {
      indexOf(line, "sknpm") match {
      | Some(index) ->
        siter = line.getIter().drop(index);
        cleaned = line.substring(siter);
        elems = cleaned.split("=");
        if (elems.size() >= 2) {
          elems[0] match {
          | "sknpm.process" -> processes.push(elems[1].toInt())
          | s if (s.startsWith("sknpm.env:")) ->
            envName = s.split(":")[1];
            envValue = elems.drop(1).join("=");
            environment.set(envName, envValue)
          | _ -> print_error("Unmanaged command: " + line)
          }
        } else {
          print_error("Unmanaged command: " + line)
        }
      | _ -> void
      }
    });
  };
}

fun buildIfNeeded(bc: BuildContext, test: Bool): Bool {
  checker = Skbuild.TimeChecker();
  bc.files.each(f -> !checker = checker.add(f));
  buildNeeded = for (bin in bc.env.manifest.bin) {
    wasmFile = Path.join(bc.targetDir, bin.name + ".wasm");
    if (checker.isYoungerThan(wasmFile)) break true;
  } else {
    false
  };
  if (buildNeeded) {
    skargo(
      !test,
      bc.profile,
      bc.env.console.verbosity >= Skargo.VerbosityVerbose(),
    )
  };
  buildNeeded
}

fun manage(
  bc: BuildContext,
  package: Package,
  optTarget: ?String = None(),
  optBinName: ?String = None(),
  clean: Bool = false,
): String {
  npmDir = optTarget.default(Path.join(bc.targetDir, "npm"));
  if (clean && FileSystem.exists(npmDir)) {
    _ = run(Array["rm", "-rf", Path.join(npmDir, "*")], bc.env.console);
  };
  tsDir = Path.join(bc.targetDir, "ts");
  checkDir(tsDir);
  dependencies = mutable Vector[];
  resources = mutable Map[];
  bc.deps.each((_k, v) -> {
    depsDir = Path.join(v.path, "ts/src");
    if (FileSystem.exists(depsDir)) {
      dependencies.push(v)
    };

    // TODO: This is dirty and britle.
    for (file in FileSystem.readDirectory(Path.join(bc.targetDir, "build"))) {
      if (file.startsWith(v.name)) {
        depsResFile = Path.join(bc.targetDir, `build/${file}/resources.json`);
        if (FileSystem.exists(depsResFile)) {
          contents = FileSystem.readTextFile(depsResFile);
          json = JSON.decode(contents).expectObject();
          json.value.each((f, v) -> {
            copy(f, Path.join(tsDir, Path.basename(f)));
            resources.add(f, v.expectString())
          })
        };

        break void
      }
    };
  });
  pckDependencies = mutable Map[];
  dependencies.each(dep -> {
    tsd = Path.join(dep.path, "ts/src");
    FileSystem.readFilesRecursive(
      tsd,
      f -> f.endsWith(".ts"),
      f -> Path.basename(f) != "node_modules",
    ).each(f ->
      copy(f, Path.join(tsDir, relative(f, tsd).default(Path.basename(f))))
    );
    // TODO manage same package usage
    packageFile = Path.join(tsd, "package.json");
    if (FileSystem.exists(packageFile)) {
      contents = FileSystem.readTextFile(packageFile);
      json = JSON.decode(contents).expectObject();
      json.maybeGetObject("dependencies").each(dps ->
        dps.value.each((k, v) -> pckDependencies.add(k, v.expectString()))
      )
    }
  });
  packageFile = Path.join(tsDir, "package.json");
  packageContents = JSON.Object(
    Map[
      "dependencies" => JSON.Object(
        pckDependencies.map((_, v) -> JSON.String(v)),
      ),
      "type" => JSON.String("module"),
    ],
  );

  FileSystem.writeTextFile(packageFile, packageContents.toString());

  tsconfig = Path.join(tsDir, "tsconfig.json");
  FileSystem.writeTextFile(tsconfig, tsConfig(dependencies.map(d -> d.name)));
  tsc(tsDir, None(), bc.env.console);
  jsDir = Path.join(tsDir, "js");
  invariant(FileSystem.exists(jsDir), "Invalid typescript build");
  // TODO: manage subdirectories
  jsFiles = FileSystem.readFilesRecursive(
    jsDir,
    f ~> f.endsWith(".js"),
    _f ~> false,
  );
  mapFiles = FileSystem.readFilesRecursive(
    jsDir,
    f ~> f.endsWith(".map"),
    _f ~> false,
  );
  declFiles = FileSystem.readFilesRecursive(
    jsDir,
    f ~> f.endsWith(".d.ts"),
    _f ~> false,
  );
  distDir = Path.join(npmDir, "dist");
  checkDir(distDir);
  jsResources = mutable Map[];
  resources.each((k, f) ->
    jsResources.add(
      Path.join(jsDir, Path.basename(k.take(k.length() - 3))) + ".js",
      f,
    )
  );
  copyAndConvertImport(
    package.version,
    distDir,
    jsResources.chill(),
    jsFiles,
    () -> {
      bins = bc.env.manifest.bin;
      invariant(bins.size() == 1, "Unable to get binary name");
      bins[0].name
    },
    bc.env.console.verbosity >= Skargo.VerbosityVerbose(),
  );
  for (bin in bc.env.manifest.bin) {
    wasmFile = Path.join(bc.targetDir, bin.name + ".wasm");
    copy(wasmFile, distDir)
  };
  if (bc.env.console.verbosity >= Skargo.VerbosityVerbose()) {
    print_string(">> Copy mapping files associating '.mjs' instead of '.js'.");
  };
  mapFiles.each(mapFile -> {
    contents = FileSystem.readTextFile(mapFile);
    json = JSON.decode(contents).expectObject();
    file = Path.basename(mapFile);
    newJS = JSON.Object(
      json.value.map((k, v) ->
        k match {
        | "file" ->
          f = v.expectString().replace(".js", ".mjs");
          !file = f + ".map";
          JSON.String(f)
        | "sources" ->
          JSON.Array(
            v.expectArray().value.map(src ->
              JSON.String(src.expectString().replace("../", "../src/"))
            ),
          )
        | _ -> v
        }
      ),
    );
    jsMapfile = Path.join(distDir, file);
    FileSystem.writeTextFile(jsMapfile, newJS.toString());
  });
  if (bc.env.console.verbosity >= Skargo.VerbosityVerbose()) {
    print_string(">> Copy types declaration files.");
  };
  declFiles.each(f -> copyToDir(f, distDir));
  srcDir = Path.join(npmDir, "src");
  checkDir(srcDir);
  if (bc.env.console.verbosity >= Skargo.VerbosityVerbose()) {
    print_string(">> Copy source files.");
  };
  FileSystem.readFilesRecursive(
    tsDir,
    f -> f.endsWith(".ts"),
    _f -> false,
  ).each(f -> copyToDir(f, srcDir));
  if (bc.env.console.verbosity >= Skargo.VerbosityVerbose()) {
    print_string(">> Manage license and package files.");
  };
  licenseFile = Path.join(npmDir, "LICENSE");
  FileSystem.writeTextFile(licenseFile, license());
  npmPackageFile = Path.join(npmDir, "package.json");
  npmPackage = mutable Map[
    "name" => JSON.String(package.name),
    "version" => JSON.String(package.version.toString()),
    "type" => JSON.String("module"),
    "dependencies" => JSON.Object(
      pckDependencies.map((_, v) -> JSON.String(v)),
    ),
    "sideEffects" => JSON.Bool(package.sideEffects),
  ];
  bins = bc.env.manifest.bin;
  if (bins.size() == 1) {
    binName = optBinName.default(bins[0].name);
    npmPackage.add("main", JSON.String(`./dist/${binName}.mjs`));
    npmPackage.add("types", JSON.String(`./dist/${binName}.d.ts`));
  } else {
    exports = mutable Map[];
    typesVersions = mutable Map[];
    for (bin in bins) {
      exports.add(`./${bin.name}`, JSON.String(`./dist/${bin.name}.mjs`));
      typesVersions.add(
        `./${bin.name}`,
        JSON.String(`./dist/${bin.name}.d.ts`),
      );
    };
    npmPackage.add("exports", JSON.Object(unsafe_chill_trust_me(exports)));
    npmPackage.add(
      "typesVersions",
      JSON.Object(unsafe_chill_trust_me(typesVersions)),
    );
  };
  package.author.each(a -> npmPackage.add("author", JSON.String(a)));
  package.optNodeVersion.each(version ->
    npmPackage.add("engines", JSON.Object(Map["node" => JSON.String(version)]))
  );
  package.optBinary.each(binary -> {
    npmPackage.add(
      "bin",
      JSON.Object(Map[binary => JSON.String(`./dist/${binary}.mjs`)]),
    );
    npmPackage.add(
      "scripts",
      JSON.Object(Map["cli" => JSON.String(`node ./dist/${binary}.mjs`)]),
    );
  });
  npmPackageContents = JSON.Object(npmPackage.chill());
  stream = mutable Vector[];
  npmPackageContents.writeToStream(stream.push, 2);
  FileSystem.writeTextFile(npmPackageFile, stream.join(""));
  npmDir
}

fun relative(path: String, to: String): ?String {
  if (!to.endsWith("/")) {
    !to = to + "/";
  };
  if (path.startsWith(to)) {
    Some(path.sub(path.getIter().drop(to.chars().size()), path.chars().size()))
  } else {
    None()
  }
}

fun tsConfig(deps: Vector<String>): String {
  path = JSON.Array(Vector[JSON.String("./*")]);
  paths = mutable Map<String, JSON.Value>[];
  deps.each(v -> paths.set(`#${v}` + "/*", path));
  config = JSON.Object(
    Map[
      "compilerOptions" => JSON.Object(
        Map[
          "target" => JSON.String("ES2021"),
          "outDir" => JSON.String("js"),
          "baseUrl" => JSON.String("."),
          "paths" => JSON.Object(unsafe_chill_trust_me(paths)),
          "strictNullChecks" => JSON.Bool(true),
          "module" => JSON.String("node16"),
          "sourceMap" => JSON.Bool(true),
          "declaration" => JSON.Bool(true),
          "declarationMap" => JSON.Bool(true),
          "incremental" => JSON.Bool(true),
          "verbatimModuleSyntax" => JSON.Bool(true),
        ],
      ),
    ],
  );
  stream = mutable Vector[];
  config.writeToStream(stream.push, 2);
  stream.join("")
}

fun tsc(tsDir: String, link: ?(String, String), console: Skargo.Console): void {
  tsconfig = Path.join(tsDir, "tsconfig.json");
  _ = run(
    Array["npm", "i", "--prefix", tsDir, "--save-dev", "@types/node"],
    console,
  );
  link.each(l -> {
    node_modules = Path.join(tsDir, "node_modules");
    if (FileSystem.exists(node_modules)) {
      (name, path) = l;
      symlink = Path.join(node_modules, name);
      if (FileSystem.exists(symlink)) {
        _ = run(Array["rm", symlink], console);
      };
      _ = run(Array["ln", "-s", path, symlink], console)
    }
  });
  _ = run(Array["tsc", "--project", tsconfig], console);
}

fun copyToDir(tsFile: String, dir: String): void {
  contents = FileSystem.readTextFile(tsFile);
  target = Path.join(dir, Path.basename(tsFile));
  lines = contents.split("\n").map(line -> {
    if (
      line.startsWith("import ") ||
      line.startsWith("export {") ||
      line.startsWith("export type {")
    ) {
      elements = line.split(" from ");
      if (elements.size() == 2) {
        imported = elements[1].split("\"");
        if (imported.size() == 3) {
          elems = imported[1].split("/");
          size = elems.size();
          if (size > 1 && elems[0].startsWith("#")) {
            !elems = elems.mapWithIndex((idx, v) -> if (idx == 0) "." else v);
            !line = `${elements[0]} from "${elems.join("/")}"`
          }
        }
      }
    } else {
      indexOf(line, "import(\"#") match {
      | Some(index) ->
        indexOf(line, "/", index) match {
        | Some(end) ->
          prefix = line.take(index);
          siter = line.getIter().drop(end);
          suffix = line.substring(siter);
          !line = `${prefix}import(\".${suffix}`
        | _ -> void
        }
      | _ -> void
      }
    };
    line;
  });
  FileSystem.writeTextFile(target, lines.join("\n"));
}

fun copyAndConvertImport(
  version: Version,
  distDir: String,
  resources: Map<String, String>,
  jsFiles: Vector<String>,
  binary: () -> String,
  verbose: Bool,
): void {
  if (verbose) {
    print_string(">> Copy js files and convert to valid imports.");
  };
  nameLine = "var wasm64 = \"/*--NAME--*/\";";
  modulesLines = "/*--MODULES--*/";
  base64Line = "export var base64 = \"\";";
  versionLine = "const npmVersion = \"\";";

  sourceMappingPrefix = "//# sourceMappingURL=";
  runtime = "";
  loaderFiles = mutable Vector<String>[];
  moduleFiles = mutable Vector<String>[];
  tmplFiles = mutable Vector[];
  jsFiles.each(f -> {
    saved = SKStore.newObstack();
    optLoaderFile: ?String = None();
    optModuleFile: ?String = None();
    optRuntimeFile: ?String = None();
    jsBasename = Path.basename(f);
    mjsBasename = jsBasename.replace(".js", ".mjs");
    jsSourceMapping = `${sourceMappingPrefix}${jsBasename}.map`;
    mjsSourceMapping = `${sourceMappingPrefix}${mjsBasename}.map`;
    contents = FileSystem.readTextFile(f);
    withInit = false;
    withLoader = false;
    withRuntime = false;
    withTmpl = false;
    optCategory: ?String = None();
    lines = contents.split("\n").map(line -> {
      if (line.startsWith("import ") || line.startsWith("export {")) {
        !line = line.replace(".js", ".mjs");
        elements = line.split(" from ");
        if (elements.size() == 2) {
          imported = elements[1].split("\"");
          if (imported.size() == 3) {
            elems = imported[1].split("/");
            size = elems.size();
            if (size > 1 && elems[0].startsWith("#")) {
              !elems = elems.mapWithIndex((idx, v) -> if (idx == 0) "." else v);
              !line = `${elements[0]} from "${elems.join("/")}"`
            }
          }
        }
      };
      cLine = line.trim();
      if (
        cLine == nameLine ||
        cLine == modulesLines ||
        cLine == base64Line ||
        cLine == versionLine
      ) {
        !withTmpl = true;
      } else if (cLine == "/** @sk init */") {
        !withInit = true;
      } else if (cLine == "/** @sk loader */") {
        !withLoader = true;
      } else if (cLine == "/** @sk runtime */") {
        !withRuntime = true;
      } else if (cLine == jsSourceMapping) {
        !line = mjsSourceMapping;
      };
      line;
    });
    tf = Path.join(distDir, mjsBasename);
    invariant(
      i(withInit) + i(withLoader) + i(withRuntime) + i(optCategory.isSome()) <=
        1,
      `The file ${Path.basename(f).replace(
        ".js",
        ".ts",
      )} cannot have multiple behaviors.`,
    );
    if (withInit) {
      !optModuleFile = Some(Path.basename(tf));
    } else if (withLoader) {
      !optLoaderFile = Some(Path.basename(tf));
    } else if (withRuntime) {
      invariant(runtime.isEmpty(), "Multiple runtime defined");
      !optRuntimeFile = Some(Path.basename(tf));
    };
    copied = if (!withTmpl) {
      FileSystem.writeTextFile(tf, lines.join("\n"));
      SKStore.destroyObstackWithValue(
        saved,
        List[(optModuleFile, optLoaderFile, optRuntimeFile)],
      ).getHead();
    } else {
      copied = SKStore.destroyObstackWithValue(
        saved,
        List[((f, tf, lines), (optModuleFile, optLoaderFile, optRuntimeFile))],
      );
      head = copied.getHead();
      tmplFiles.push(head.i0);
      head.i1
    };
    copied.i0.each(moduleFiles.push);
    copied.i1.each(loaderFiles.push);
    copied.i2.each(f -> !runtime = f);
  });
  if (verbose) {
    print_string(">> Manage found templates.");
  };
  invariant(!runtime.isEmpty(), "Runtime must be defined.");
  saved = SKStore.newObstack();
  modules = mutable Vector[];
  importLine = m -> {
    mName = m.split(".", 2)[0];
    modules.push(mName);
    `import {init as ${mName}} from "./${m}";`
  };
  strModules = Vector[importLine(runtime)].concat(loaderFiles.map(importLine))
    .concat(moduleFiles.map(importLine))
    .concat(Vector[`modules = [${modules.join(", ")}];`])
    .join("\n");
  tmplFiles.each(fi -> {
    inner = SKStore.newObstack();
    (sf, tf, lines) = fi;
    if (verbose) {
      print_string(`>> Manage ${sf} template.`);
    };
    !lines = lines.map(line -> {
      cLine = line.trim();
      if (cLine == nameLine) {
        `var wasm64 = "${binary()}";`
      } else if (cLine == modulesLines) {
        strModules
      } else if (cLine == base64Line) {
        resources.maybeGet(sf) match {
        | Some(b64File) ->
          `export var base64 = "${FileSystem.readTextFile(b64File)}";`
        | _ -> invariant_violation("Resource file not found.")
        }
      } else if (cLine == versionLine) {
        `const npmVersion = "${version}";`
      } else {
        line
      }
    });
    FileSystem.writeTextFile(tf, lines.join("\n"));
    SKStore.destroyObstack(inner);
  });
  SKStore.destroyObstack(saved);
}

fun i(v: Bool): Int {
  if (v) 1 else 0;
}

fun check(
  several: String,
  files: readonly Vector<String>,
  optSingle: ?String,
): void {
  optSingle.each(single ->
    invariant(!files.isEmpty(), `${single} must be defined.`)
  );
  if (files.size() > 1) {
    invariant_violation(
      `Several ${several} have been found (${files.map(f ->
        f.split(".").take(files.size() - 1).join(".")
      )}), please specify which one to use.`,
    )
  }
}

fun writeIndex(target: String, name: String): void {
  FileSystem.writeTextFile(
    Path.join(target, "index.html"),
    Array[
      "<!DOCTYPE html>",
      "<html>",
      "  <head lang=\"en\">",
      "    <meta charset=\"utf-8\">",
      "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />",
      `    <script type="module" src=\"./npm/dist/${name}.mjs\"></script>`,
      "    <link rel=\"icon\" href=\"data:,\">",
      "  </head>",
      "  <body>",
      "  </body>",
      "</html>",
    ].join("\n"),
  )
}

fun writeRun(target: String, console: Skargo.Console): void {
  runFile = Path.join(target, "run.sh");
  FileSystem.writeTextFile(
    runFile,
    "#!/bin/bash\npython3 -m http.server 8000\n",
  );
  _ = run(Array["chmod", "+x", runFile], console);
}

fun license(): String {
  `MIT License

Copyright (c) 2023 SkipLabs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.`
}

fun indexOf(inStr: String, s: String, start: Int = 0): ?Int {
  chars1 = inStr.chars();
  chars2 = s.chars();
  for (i in Range(start, chars1.size())) {
    if (chars2.size() > chars1.size() - i) {
      return None();
    };
    j = 0;
    while (j < chars2.size()) {
      if (chars1[i + j] != chars2[j]) {
        break void;
      };
      !j = j + 1;
    };
    if (j == chars2.size()) {
      return Some(i);
    }
  };
  None()
}

/********* Run **********/

fun runner(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("run")
      .short("r")
      .about("Call npm run on generated npm package")
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(Cli.StringArg("profile").about("Run for the specified profile"))
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Run for release profile"),
      )
      .arg(Cli.StringArg("bin").about("Run the specified binary"))
      .arg(Cli.StringArg("path").about("Path of the package to run"))
      .arg(
        Cli.StringArg("npm-out").about(
          "Directory for all generated npm package",
        ),
      )
      .extra(),
    execRun,
  )
}

fun execRun(args: Cli.ParseResults): void {
  env = args.maybeGetString("path") match {
  | Some(path) ->
    manifestFile = Path.join(Path.resolve(path), Skargo.kManifestFile);
    invariant(
      FileSystem.exists(manifestFile),
      `Invalid skargo directory ${path}`,
    );
    Env::fromFile(
      manifestFile,
      if (args.getBool("verbose")) Skargo.VerbosityVerbose() else {
        Skargo.VerbosityNormal()
      },
    )
  | _ ->
    Env::create(
      if (args.getBool("verbose")) Skargo.VerbosityVerbose() else {
        Skargo.VerbosityNormal()
      },
    )
  };
  bc = BuildContext::create(
    env,
    Some("wasm32-unknown-unknown"),
    args.maybeGetString("target-dir"),
    getProfile(args),
  );
  npmDir = args
    .maybeGetString("npm-out")
    .default(Path.join(bc.targetDir, "npm"));

  neededBuild = buildIfNeeded(bc, false);
  if (neededBuild) {
    npmInstall = Array["npm", "--prefix", npmDir, "install"];
    exitCode = system(npmInstall.join(" "));
    if (exitCode != 0) {
      throw SystemCallException(exitCode);
    }
  };
  cmdArgs = Array["npm", "--prefix", npmDir, "run"].concat(args.extra);
  if (env.console.verbosity >= Skargo.VerbosityVerbose()) {
    // TODO: colors
    print_error(`>> ${cmdArgs.join(" ")}`)
  };
  p = system(cmdArgs.join(" "));
  if (p != 0) {
    throw SystemCallException(p);
  }
}

/********* Publish **********/

fun publish(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("publish")
      .short("p")
      .about("Call npm publish on generated npm package")
      .arg(
        Cli.StringArg("target-dir").about(
          "Directory for all generated artifacts",
        ),
      )
      .arg(Cli.StringArg("profile").about("Publish with the specified profile"))
      .arg(
        Cli.BoolArg("release")
          .short("r")
          .long("release")
          .about("Publish with release profile"),
      )
      .arg(Cli.StringArg("bin").about("Publish for specified binary"))
      .arg(Cli.StringArg("npmVersion").about("Publish with specified version"))
      .arg(Cli.BoolArg("force").short("f").about("Do not check version"))
      .arg(
        Cli.StringArg("npm-out").about(
          "Directory for all generated npm package",
        ),
      )
      .extra(),
    args ~> envCmd(args, execPublish),
  )
}

fun execPublish(args: Cli.ParseResults, env: Env): void {
  gdiff = run(Array["git", "diff"], env.console);
  if (!gdiff.isEmpty()) {
    throw GitDiffException()
  };
  Package::check(env.manifest);
  package = Package::create(env.manifest);
  version = args
    .maybeGetString("npmVersion")
    .map(Version::fromString)
    .default(package.version);
  if (!args.getBool("force")) {
    view = run(Array["npm", "view", package.name, "--json"], env.console);
    json = JSON.decode(view).expectObject();
    optVersion = json.maybeGetArray("versions").flatMap(versions -> {
      sorted = versions.value
        .map(v -> v.expectString())
        .map(Version::fromString)
        .sorted();
      sorted.maybeGet(sorted.size() - 1)
    });
    optVersion match {
    | Some(v) if (version <= v) -> throw NpmVersionException(version, v)
    | _ -> void
    }
  };
  if (package.version != version) {
    package.update(env.manifest.path, version)
  };
  bc = BuildContext::create(
    env,
    Some("wasm32-unknown-unknown"),
    args.maybeGetString("target-dir"),
    getProfile(args),
  );
  _ = run(
    Array[
      "skargo",
      "build",
      "--target",
      "wasm32-unknown-unknown",
      "--profile",
      bc.profile,
    ],
    bc.env.console,
  );
  userNpmDir = args.maybeGetString("npm-out");
  npmDir = manage(bc, Package::create(env.manifest), userNpmDir, None(), true);
  Environ.set_current_dir(npmDir);
  if (userNpmDir.isSome()) {
    udiff = run(Array["git", "diff"], env.console);
    if (!udiff.isEmpty()) {
      throw GitDiffException()
    }
  };
  cmdArgs = version.tag match {
  | Some(tag) -> args.extra.concat(Array["--tag", tag.toString()])
  | _ -> args.extra
  };
  _ = run(Array["npm", "publish"].concat(cmdArgs), bc.env.console);
}

fun help(): (Cli.Command, Cli.ParseResults ~> void) {
  (
    Cli.Command("help")
      .arg(
        Cli.StringArg("command")
          .positional()
          .about(
            "If specified, the subcommand for which help is to be displayed",
          ),
      )
      .about("Displays help for a skargo subcommand"),
    args ~> envCmd(args, execHelp),
  )
}

fun execHelp(args: Cli.ParseResults, _env: Env): void {
  optSubcmd = args.maybeGetString("command");
  optSubcmd.flatMap(subcmd ->
    args.cmd._subcommands.filter(cmd -> cmd.name == subcmd).maybeGet(0)
  ) match {
  | Some(cmd) -> print_string(Cli.usage(cmd, true, Some(args.cmd)))
  | _ ->
    optSubcmd match {
    | Some(subcmd) -> print_error(`error: Invalid subcommand ${subcmd}.`)
    | _ -> print_error("error: No subcommand specified.")
    };
    print_string(Cli.usage(args.cmd, true))
  };
}

fun syncDirs(
  fromDir: String,
  toDir: String,
  exclude: Set<String>,
  verbose: Bool,
): void {
  checkDir(toDir);
  FileSystem.readFilesRecursive(
    fromDir,
    _f -> true,
    src -> {
      if (!exclude.contains(Path.basename(src))) {
        relative(src, fromDir).each(rp -> {
          dst = Path.join(toDir, rp);
          checkDir(Path.basename(dst));
        });
        true
      } else {
        false
      }
    },
  ).each(src ->
    relative(src, fromDir).each(rp -> {
      dst = Path.join(toDir, rp);
      if (isYoungerThan(src, dst)) {
        copy(src, dst, verbose)
      }
    })
  )
}

fun mtime(path: String): ?Int {
  if (FileSystem.exists(path)) {
    p = System.subprocess(Array["stat", "-c", "%Y", path]);
    if (!p.success()) {
      None()
    } else {
      p.stdout.trim().toIntOption()
    }
  } else {
    None()
  }
}

fun isYoungerThan(file1: String, file2: String): Bool {
  optTime1 = mtime(file1);
  optTime2 = mtime(file2);
  optTime1.isNone() || optTime2.isNone() || optTime1 > optTime2
}

@cpp_extern("SKIP_sknpm_save_sk_tests_ts")
native fun saveSkTestsTs(targetDir: String): void;

@cpp_extern("SKIP_sknpm_save_archive")
native fun saveArchive(targetDir: String): void;

private fun skargo(build: Bool, profile: String, verbose: Bool): void {
  checkSuccess = p ~> {
    if (build) {
      p.success()
    } else {
      p.success() || p.exitcode() == 1 && p.stderr.isEmpty()
    }
  };
  args = Array[
    "skargo",
    if (build) "build" else "test",
    "--target",
    "wasm32-unknown-unknown",
    "--profile",
    profile,
  ];
  if (verbose) {
    print_error(`>> ${args.join(" ")}`)
  };
  p = System.subprocess(args);
  success = checkSuccess(p);
  if (verbose || !success) {
    print_raw(p.stdout);
    print_error_raw(p.stderr);
  };
  if (!success) {
    throw SystemCallException(p.exitcode());
  }
}

fun checkDir(dir: String): void {
  _ = System.subprocess(Array["mkdir", "-p", dir]);
}

fun copy(src: String, dst: String, verbose: Bool = false): void {
  cmd = Array["cp", src, dst];
  if (verbose) {
    print_error(`>> ${cmd.join(" ")}`)
  };
  _ = System.subprocess(cmd);
}

module end;
