module Sknpm;

mutable class Printer(
  prefix: String,
  color: TermColor.Color = TermColor.Yellow(),
  private mutable out: String = "",
  private mutable err: String = "",
) {
  mutable fun printString(v: String): void {
    this.!out = this.print(this.out + v)
  }

  mutable fun printError(v: String): void {
    this.!err = this.print(this.err + v)
  }

  readonly private fun print(v: String): String {
    lines = v.split("\n");
    if (!this.prefix.isEmpty()) {
      formatted_prefix = this.formatted_prefix();
      for (i in Range(0, lines.size() - 1)) {
        print_debug(`${formatted_prefix} ${lines[i]}`)
      };
    } else {
      for (i in Range(0, lines.size() - 1)) {
        print_debug(lines[i])
      }
    };
    lines.last()
  }

  readonly private fun print_raw(v: String): void {
    if (!this.prefix.isEmpty()) {
      print_debug_raw(`${this.formatted_prefix()} ${v}`)
    } else {
      print_debug_raw(v)
    }
  }

  readonly private fun formatted_prefix(): String {
    TermColor.colored(
      this.prefix,
      this.color,
      TermColor.Default(),
      Array[TermColor.Bold()],
    )
  }

  mutable fun flush(): void {
    if (!this.out.isEmpty()) this.print_raw(this.out);
    this.!out = "";
    if (!this.err.isEmpty()) this.print_raw(this.err);
    this.!err = "";
  }
}

class BuildRunner(
  bctx: Skargo.BuildContext,
  target_layout: Skargo.Layout,
  hashes: Map<Skargo.Unit, Int>,
) {
  static fun create(bctx: Skargo.BuildContext): BuildRunner {
    host_layout = Skargo.Layout::create(
      bctx,
      "host",
      bctx.build_config.requested_profile,
    );
    target_layout = bctx.build_config.requested_arch match {
    | Skargo.TargetArchHost() -> host_layout
    | Skargo.TargetArchTriple(t) ->
      Skargo.Layout::create(
        bctx,
        t.toString(),
        bctx.build_config.requested_profile,
      )
    };

    hashes = mutable Map[];
    for (unit in bctx.roots) {
      _ = Skargo.hash_of(unit, bctx, hashes)
    };

    BuildRunner(bctx, target_layout, hashes.chill())
  }

  fun build_dir_for(unit: Skargo.Unit): String {
    assert(unit.target.is_build_script());

    name = unit.pkg.name();
    hash = this.hashes[unit].toStringHex();

    Path.join(this.target_layout.build, `${name}-${hash}`)
  }

  fun binary_file_for(unit: Skargo.Unit): String {
    assert(unit.target.is_bin() || unit.target.is_test());
    name = unit.target.name;
    hash = this.hashes[unit].toStringHex();
    Path.join(this.target_layout.deps, `${name}-${hash}.wasm`)
  }
}

private fun skargo(
  args: Cli.ParseResults,
  test: Bool,
  console: Skargo.Console,
): Result<void, void> {
  console.status("Running", "Skargo build");
  cmd_args = mutable Vector["skargo", "build", "--target", "wasm32"];
  push = (name, value) -> {
    cmd_args.push(name);
    cmd_args.push(value);
  };
  Array["manifest-path", "target-dir", "profile"].each(prop ->
    args.maybeGetString(prop).each(v -> push("--" + prop, v))
  );
  if (args.getBool("release")) {
    cmd_args.push("-r");
  };
  if (test) {
    cmd_args.push("--tests");
  };
  verbosityArgs(reduceVerbosity(console.verbosity)).each(cmd_args.push);
  console.status_verbose("Command", cmd_args.join(" "));
  printer = mutable Printer("[skargo] ");
  p = System.subprocess(
    cmd_args.toArray(),
    printer.printString,
    printer.printError,
  ).fromSuccess();
  printer.flush();
  if (!p.success()) {
    Failure(void)
  } else {
    Success(void)
  }
}

fun tsc(
  tsDir: String,
  link: ?(String, String),
  console: Skargo.Console,
): Result<void, void> {
  tsconfig = Path.join(tsDir, "tsconfig.json");
  console.status("Running", `npm install on '${tsDir}'`);
  npmcmd = Array["npm", "i", "--prefix", tsDir, "--save-dev", "@types/node"];
  _ = exec(npmcmd, console)?;
  link.each(l -> {
    node_modules = Path.join(tsDir, "node_modules");
    if (FileSystem.exists(node_modules)) {
      (name, path) = l;
      symlink = Path.join(node_modules, name);
      if (FileSystem.exists(symlink)) {
        _ = exec(Array["rm", symlink], console);
      };
      _ = exec(Array["ln", "-s", path, symlink], console)
    }
  });
  console.status("Running", `Typescript compiler on '${tsconfig}'`);
  _ = exec(Array["tsc", "--project", tsconfig], console)?;
  Success(void)
}

fun execCommand(
  gctx: Skargo.GlobalContext,
  args: Cli.ParseResults,
  fn: (BuildRunner, Cli.ParseResults) ~> Result<void, void>,
): Result<void, void> {
  ws = Skargo.workspace(args, gctx);
  opts = Skargo.compile_options(withTarget(args));
  bctx = Skargo.create_bctx(gctx, ws, opts);
  brunner = BuildRunner::create(bctx);
  withTimer(
    () -> fn(brunner, args),
    (t, res) ->
      res match {
      | Success _ ->
        gctx.console.status(
          "Finished",
          `${opts.build_config.requested_profile} target(s) in ${t}s`,
        )
      | _ ->
        if (gctx.console.verbosity >= Skargo.VerbosityNormal()) {
          formatted_status = TermColor.colored(
            "Finished with error(s)",
            TermColor.Red(),
            TermColor.Default(),
            Array[TermColor.Bold()],
          );
          print_debug(
            `    ${formatted_status} ${
              opts.build_config.requested_profile
            } target(s) in ${t}s`,
          )
        }
      }
    ,
  )
}

private fun exec(
  args: Array<String>,
  console: Skargo.Console,
  verbosity: Skargo.ConsoleVerbosity = Skargo.VerbosityProlix(),
): Result<String, void> {
  if (args.isEmpty()) return Success("");
  printer = mutable Printer(`[${args[0]}]`);
  console.status_verbose("Command", args.join(" "));
  (stdout_cb, stderr_cb) = if (console.verbosity >= verbosity) {
    (printer.printString, printer.printError)
  } else {
    ((_) -> void, (_) -> void)
  };
  p = System.subprocess(args, stdout_cb, stderr_cb).fromSuccess();
  printer.flush();
  if (!p.success()) {
    if (console.verbosity < verbosity) {
      console.error(
        "command exited with non-zero status\n\n" +
          "Caused by:\n" +
          "  process did not exit successfully: \`" +
          args[0] +
          `\` (exit status: ${p.exitcode()})\n` +
          "  --- stdout\n" +
          p.stdout.split("\n").map(l -> "  " + l).join("\n") +
          "\n" +
          "  --- stderr\n" +
          p.stderr.split("\n").map(l -> "  " + l).join("\n") +
          "\n",
      );
    };
    Failure(void)
  } else {
    Success(p.stdout)
  }
}

fun reduceVerbosity(
  verbosity: Skargo.ConsoleVerbosity,
): Skargo.ConsoleVerbosity {
  verbosity match {
  | Skargo.VerbosityQuiet() -> Skargo.VerbosityQuiet()
  | Skargo.VerbosityNormal() -> Skargo.VerbosityQuiet()
  | Skargo.VerbosityVerbose() -> Skargo.VerbosityNormal()
  | Skargo.VerbosityProlix() -> Skargo.VerbosityVerbose()
  }
}

fun verbosityArgs(verbosity: Skargo.ConsoleVerbosity): ?String {
  verbosity match {
  | Skargo.VerbosityQuiet() -> Some("--quiet")
  | Skargo.VerbosityNormal() -> None()
  | Skargo.VerbosityVerbose() -> Some("-v")
  | Skargo.VerbosityProlix() -> Some("-vv")
  }
}

fun withTimer<T, E>(
  f: () -> Result<T, E>,
  g: (Float, Result<T, E>) -> void,
): Result<T, E> {
  t0 = Time.time_ms();
  res = f();
  t1 = Time.time_ms();
  g((t1 - t0).toFloat() / 1000.0, res);
  res
}

fun dfs(
  brunner: BuildRunner,
  unit: Skargo.Unit,
  res: mutable Vector<Skargo.Unit>,
): void {
  if (res.contains(unit)) return void;

  for (dep in brunner.bctx.unit_graph[unit]) {
    dfs(brunner, dep, res)
  };

  res.push(unit)
}

fun manage(
  brunner: BuildRunner,
  package: Package,
  optTarget: ?String = None(),
  optBinary: ?(Skargo.Unit, String) = None(),
  clean: Bool = false,
): Result<String, void> {
  optBinName = optBinary.map(v -> v.i1);
  target_dir = brunner.target_layout.dest;
  npmDir = optTarget.default(Path.join(target_dir, "npm"));
  console = brunner.bctx.gctx.console;
  if (clean && FileSystem.exists(npmDir)) {
    _ = exec(Array["rm", "-rf", Path.join(npmDir, "*")], console);
  };
  tsDir = Path.join(target_dir, "ts");
  checkDir(tsDir);
  units = mutable Vector[];
  for (unit in brunner.bctx.roots) {
    dfs(brunner, unit, units)
  };
  libraries = units.filter(u ->
    (u.target.kind is Skargo.LibTarget(Skargo.LibraryTypeSklib _)) &&
      u.build_opts.relocation_model == "static" &&
      u.arch match {
      | Skargo.TargetArchHost() -> false
      | Skargo.TargetArchTriple(t) -> t.isWasm32()
      }
  );
  binaries = optBinary match {
  | Some(v) -> Vector[v.i0]
  | _ ->
    units.filter(u -> {
      u.arch match {
      | Skargo.TargetArchTriple(t) if (t.isWasm32()) -> void
      | _ -> return false
      };
      u.target.kind match {
      | Skargo.BinTarget _
      | Skargo.LibTarget(Skargo.LibraryTypeCdylib()) ->
        true
      | _ -> false
      }
    })
  };
  distDir = Path.join(npmDir, "dist");
  checkDir(distDir);
  dependencies = mutable Vector[];
  for (u in libraries) {
    root = u.pkg.manifest.package_id.source_id.url;
    depsDir = Path.join(root, "ts/src");
    if (FileSystem.exists(depsDir)) {
      dependencies.push((u, depsDir))
    };
    npmJson = Path.join(root, "npm.json");
    if (FileSystem.exists(npmJson)) {
      name = u.pkg.manifest.package_id.name;
      pck = Package::create(root, name, console)?;
      manageAssets(root, tsDir, distDir, name, pck.assets, console)?
    }
  };
  pckDependencies = mutable Map[];
  pckDevDependencies = mutable Map[];

  for (dep in dependencies) {
    tsd = dep.i1;
    FileSystem.readFilesRecursive(
      tsd,
      f -> f.endsWith(".ts"),
      f -> f != Path.join(tsd, "node_modules") && f != Path.join(tsd, "js"),
    ).each(f ->
      copy(f, Path.join(tsDir, relative(f, tsd).default(Path.basename(f))))
    );
    // TODO manage same package usage
    packageFile = Path.join(tsd, "package.json");
    if (FileSystem.exists(packageFile)) {
      res = try {
        // TODO: Manage multiple time same dependencies
        contents = FileSystem.readTextFile(packageFile);
        json = JSON.decode(contents).expectObject();
        json.maybeGetObject("dependencies").each(dps -> {
          dps.value.each((k, v) -> {
            pv = v.expectString();
            pckDependencies.maybeGet(k) match {
            | Some(epv) ->
              if (epv != pv) {
                invariant_violation(
                  `Same package '${k}' used with different versions '${epv} vs ${pv}'.`,
                )
              }
            | _ -> pckDependencies.add(k, v.expectString())
            }
          })
        });
        json.maybeGetObject("devDependencies").each(dps -> {
          dps.value.each((k, v) -> {
            pv = v.expectString();
            pckDevDependencies.maybeGet(k) match {
            | Some(epv) ->
              if (epv != pv) {
                invariant_violation(
                  `Same package '${k}' used with different versions '${epv} vs ${pv}'.`,
                )
              }
            | _ -> pckDevDependencies.add(k, v.expectString())
            }
          })
        });
        Success(void)
      } catch {
      | _ ->
        console.error(`Unable to retrieve '${packageFile}' package`);
        Failure(void)
      };
      res?
    }
  };
  packageFile = Path.join(tsDir, "package.json");
  packageContents = JSON.Object(
    Map[
      "dependencies" => JSON.Object(
        pckDependencies.map((_, v) -> JSON.String(v)),
      ),
      "devDependencies" => JSON.Object(
        pckDevDependencies.map((_, v) -> JSON.String(v)),
      ),
      "type" => JSON.String("module"),
    ],
  );
  FileSystem.writeTextFile(packageFile, packageContents.toString());
  tsconfig = Path.join(tsDir, "tsconfig.json");
  FileSystem.writeTextFile(
    tsconfig,
    tsConfig(dependencies.map(d -> d.i0.pkg.manifest.package_id.name)),
  );
  tsc(tsDir, None(), console)?;
  jsDir = Path.join(tsDir, "js");
  if (!FileSystem.exists(jsDir)) {
    console.error("Invalid typescript build");
    return Failure(void)
  };
  // TODO: manage subdirectories
  jsFiles = FileSystem.readFilesRecursive(
    jsDir,
    f ~> f.endsWith(".js"),
    f ~> f != Path.join(jsDir, "node_modules") && f != Path.join(jsDir, "js"),
  );
  mapFiles = FileSystem.readFilesRecursive(
    jsDir,
    f ~> f.endsWith(".map"),
    f ~> f != Path.join(jsDir, "node_modules") && f != Path.join(jsDir, "js"),
  );
  declFiles = FileSystem.readFilesRecursive(
    jsDir,
    f ~> f.endsWith(".d.ts"),
    f ~> f != Path.join(jsDir, "node_modules") && f != Path.join(jsDir, "js"),
  );
  copyAndConvertImport(
    package.version,
    distDir,
    jsFiles,
    jsDir,
    () -> {
      if (binaries.size() == 1) {
        return Success(binaries[0].target.name)
      };
      console.error("Unable to get binary name");
      Failure(void)
    },
    console,
  )?;
  for (bin in binaries) {
    bin.target.kind match {
    | Skargo.LibTarget(Skargo.LibraryTypeCdylib()) ->
      binName = bin.pkg.name();
      wasmFile = Path.join(target_dir, `lib${binName}.so`);
      distFile = Path.join(distDir, binName + ".wasm");
      copy(wasmFile, distFile)
    | _ ->
      wasmFile = Path.join(target_dir, bin.target.name + ".wasm");
      copy(wasmFile, distDir)
    }
  };
  console.status_verbose(
    "Progress",
    "Copy mapping files associating '.mjs' instead of '.js'",
  );
  for (mapFile in mapFiles) {
    contents = FileSystem.readTextFile(mapFile);
    res = try {
      json = JSON.decode(contents).expectObject();
      file = relative(mapFile, jsDir).default(Path.basename(mapFile));
      rpd = Path.dirname(file);
      newJS = JSON.Object(
        json.value.map((k, v) ->
          k match {
          | "file" ->
            f = v.expectString().replace(".js", ".mjs");
            !file = Path.join(rpd, f) + ".map";
            JSON.String(f)
          | "sources" ->
            start = if (rpd.isEmpty() || rpd == ".") "../src/" else {
              rpd.split("/").map(_v -> "..").join("/") + "/../src/"
            };
            JSON.Array(
              v.expectArray().value.map(src ->
                JSON.String(start + src.expectString().replace("../", ""))
              ),
            )
          | _ -> v
          }
        ),
      );
      jsMapfile = Path.join(distDir, file);
      checkDir(Path.dirname(jsMapfile));
      FileSystem.writeTextFile(jsMapfile, newJS.toString());
      Success(void)
    } catch {
    | _ ->
      console.error(`Unable to copy mapping file'${mapFile}'`);
      Failure(void)
    };
    res?
  };
  console.status_verbose("Progress", "Copy types declaration files");
  declFiles.each(f -> copyToDir(f, distDir, jsDir));
  srcDir = Path.join(npmDir, "src");
  checkDir(srcDir);
  console.status_verbose("Progress", "Copy source files");
  FileSystem.readFilesRecursive(
    tsDir,
    f -> f.endsWith(".ts"),
    f -> f != Path.join(tsDir, "node_modules") && f != Path.join(tsDir, "js"),
  ).each(f -> copyToDir(f, srcDir, tsDir));
  console.status_verbose("Progress", "Manage license and package files");
  licenseFile = Path.join(npmDir, "LICENSE");
  FileSystem.writeTextFile(licenseFile, license());
  npmPackageFile = Path.join(npmDir, "package.json");
  npmPackage = mutable Map[
    "name" => JSON.String(package.name),
    "version" => JSON.String(package.version.toString()),
    "type" => JSON.String("module"),
    "dependencies" => JSON.Object(
      pckDependencies.map((_, v) -> JSON.String(v)),
    ),
    "sideEffects" => JSON.Bool(package.sideEffects),
  ];

  getName = (u) -> {
    u.target.kind match {
    | Skargo.LibTarget(Skargo.LibraryTypeCdylib()) -> u.pkg.name()
    | _ -> u.target.name
    }
  };

  if (binaries.size() == 1) {
    binName = optBinName.default(getName(binaries[0]));
    npmPackage.add("main", JSON.String(`./dist/${binName}.mjs`));
    npmPackage.add("types", JSON.String(`./dist/${binName}.d.ts`));
  } else {
    exports = mutable Map[];
    typesVersions = mutable Map[];
    for (bin in binaries) {
      binName = getName(bin);
      exports.add(`./${binName}`, JSON.String(`./dist/${binName}.mjs`));
      typesVersions.add(`./${binName}`, JSON.String(`./dist/${binName}.d.ts`));
    };
    npmPackage.add("exports", JSON.Object(exports.chill()));
    npmPackage.add("typesVersions", JSON.Object(typesVersions.chill()));
  };
  package.author.each(a -> npmPackage.add("author", JSON.String(a)));
  package.optNodeVersion.each(version ->
    npmPackage.add("engines", JSON.Object(Map["node" => JSON.String(version)]))
  );
  if (!package.binaries.isEmpty()) {
    pckBins = mutable Map[];
    package.binaries.each(binary -> {
      _ = exec(
        Array["chmod", "+x", Path.join(distDir, `${binary}.mjs`)],
        console,
      );
      pckBins.add(binary, JSON.String(`./dist/${binary}.mjs`))
    });
    npmPackage.add("bin", JSON.Object(pckBins.chill()));
    scripts = mutable Map[];
    package.binaries.each(binary ->
      scripts.add(
        package.scriptName(binary),
        JSON.String(`./dist/${binary}.mjs`),
      )
    );
    npmPackage.add("scripts", JSON.Object(scripts.chill()));
  };
  npmPackageContents = JSON.Object(npmPackage.chill());
  stream = mutable Vector[];
  npmPackageContents.writeToStream(stream.push, 2);
  FileSystem.writeTextFile(npmPackageFile, stream.join(""));
  Success(npmDir)
}

fun copyAndConvertImport(
  version: Version,
  distDir: String,
  jsFiles: Vector<String>,
  fromDir: String,
  binary: () -> Result<String, void>,
  console: Skargo.Console,
): Result<void, void> {
  console.status_verbose(
    "Progress",
    "Copy js files and convert to valid imports",
  );
  nameLine = "var wasmName = \"/*--NAME--*/\";";
  modulesLines = "/*--MODULES--*/";
  versionLine = "const npmVersion = \"\";";

  sourceMappingPrefix = "//# sourceMappingURL=";
  runtime = "";
  loaderFiles = mutable Vector<String>[];
  moduleFiles = mutable Vector<String>[];
  tmplFiles = mutable Vector[];
  for (f in jsFiles) {
    saved = SKStore.newObstack();
    rp = relative(f, fromDir).default(Path.basename(f));
    rpd = Path.dirname(rp);
    start = if (rpd.isEmpty() || rpd == ".") "." else {
      rpd.split("/").map(_v -> "..").join("/")
    };
    optLoaderFile: ?String = None();
    optModuleFile: ?String = None();
    optRuntimeFile: ?String = None();
    jsBasename = Path.basename(f);
    mjsBasename = jsBasename.replace(".js", ".mjs");
    jsSourceMapping = `${sourceMappingPrefix}${rpd}${jsBasename}.map`;
    mjsSourceMapping = `${sourceMappingPrefix}${rpd}${mjsBasename}.map`;
    contents = FileSystem.readTextFile(f);
    withInit = false;
    withLoader = false;
    withRuntime = false;
    withTmpl = false;
    optCategory: ?String = None();
    lines = contents.split("\n").map(line -> {
      if (
        line.startsWith("import ") ||
        line.startsWith("export {") ||
        line.startsWith("export type {") ||
        line.startsWith("export *") ||
        line.startsWith("export type *")
      ) {
        !line = line.replace(".js", ".mjs");
        elements = line.split(" from ");
        if (elements.size() == 2) {
          imported = elements[1].split("\"");
          if (imported.size() == 3) {
            elems = imported[1].split("/");
            size = elems.size();
            if (size > 1 && elems[0].startsWith("#")) {
              !elems = elems.mapWithIndex((idx, v) ->
                if (idx == 0) start else v
              );
              !line = `${elements[0]} from "${elems.join("/")}"`
            }
          }
        }
      };
      cLine = line.trim();
      if (cLine == nameLine || cLine == modulesLines || cLine == versionLine) {
        !withTmpl = true;
      } else if (cLine == "/* @sk init */" || cLine == "/** @sk init */") {
        !withInit = true;
      } else if (cLine == "/* @sk loader */" || cLine == "/** @sk loader */") {
        !withLoader = true;
      } else if (
        cLine == "/* @sk runtime */" ||
        cLine == "/** @sk runtime */"
      ) {
        !withRuntime = true;
      } else if (cLine == jsSourceMapping) {
        !line = mjsSourceMapping;
      };
      line;
    });
    rtf = Path.join(rpd, mjsBasename);
    tf = Path.join(distDir, rtf);
    if (
      i(withInit) + i(withLoader) + i(withRuntime) + i(optCategory.isSome()) >
      1
    ) {
      console.error(
        `The file ${rtf.replace(".js", ".ts")} cannot have multiple behaviors.`,
      );
      return Failure(void)
    };
    if (withInit) {
      !optModuleFile = Some(rtf);
    } else if (withLoader) {
      !optLoaderFile = Some(rtf);
    } else if (withRuntime) {
      invariant(runtime.isEmpty(), "Multiple runtime defined");
      !optRuntimeFile = Some(rtf);
    };
    checkDir(Path.dirname(tf));
    copied = if (!withTmpl) {
      FileSystem.writeTextFile(tf, lines.join("\n"));
      SKStore.destroyObstackWithValue(
        saved,
        List[(optModuleFile, optLoaderFile, optRuntimeFile)],
      ).getHead();
    } else {
      copied = SKStore.destroyObstackWithValue(
        saved,
        List[((f, tf, lines), (optModuleFile, optLoaderFile, optRuntimeFile))],
      );
      head = copied.getHead();
      tmplFiles.push(head.i0);
      head.i1
    };
    copied.i0.each(moduleFiles.push);
    copied.i1.each(loaderFiles.push);
    copied.i2.each(f -> !runtime = f);
  };
  console.status_verbose("Progress", "Manage found templates");
  invariant(!runtime.isEmpty(), "Runtime must be defined.");
  saved = SKStore.newObstack();
  modules = mutable Vector[];
  importLine = m -> {
    mName = Path.basename(m).split(".", 2)[0];
    modules.push(mName);
    `import {init as ${mName}} from "./${m}";`
  };
  strModules = Vector[importLine(runtime)].concat(loaderFiles.map(importLine))
    .concat(moduleFiles.map(importLine))
    .concat(Vector[`modules.push(${modules.join(", ")});`])
    .join("\n");
  res = for (fi in tmplFiles) {
    inner = SKStore.newObstack();
    (sf, tf, lines) = fi;
    console.status_verbose("Progress", `Manage ${sf} template`);
    nLines = mutable Vector[];
    res = for (line in lines) {
      cLine = line.trim();
      nLine = if (cLine == nameLine) {
        binName = binary() match {
        | Success(b) -> b
        | _ -> break false
        };
        `var wasmName = "${binName}";`
      } else if (cLine == modulesLines) {
        strModules
      } else if (cLine == versionLine) {
        `const npmVersion = "${version}";`
      } else {
        line
      };
      nLines.push(nLine)
    } else {
      true
    };
    if (res) FileSystem.writeTextFile(tf, nLines.join("\n"));
    SKStore.destroyObstack(inner);
    if (!res) break false
  } else {
    true
  };
  SKStore.destroyObstack(saved);
  if (res) Success(void) else Failure(void)
}

fun manageAssets(
  root: String,
  tsTarget: String,
  distTarget: String,
  name: String,
  assets: Array<Asset>,
  console: Skargo.Console,
): Result<void, void> {
  if (assets.isEmpty()) return Success(void);
  assetsDir = Path.join(distTarget, "assets");
  checkDir(assetsDir);
  tsContent = tsResource(assets);
  tsFile = Path.join(tsTarget, name + "_assets.ts");
  FileSystem.writeTextFile(tsFile, tsContent);
  for (asset in assets) {
    resource = Path.join(root, asset.path);
    copy(resource, assetsDir, Some(console));
  };
  Success(void)
}

module end;
