module Sknpm;

const kAuthor: String = "Skiplabs";

class Package(
  name: String,
  author: ?String,
  version: Version,
  optNodeVersion: ?String = None(),
  optBinary: ?String = None(),
  sideEffects: Bool = false,
) {
  static fun check(root: String, console: Skargo.Console): Result<void, void> {
    file = Path.join(root, "npm.json");
    if (!FileSystem.exists(file)) {
      console.error("npm.json file must be defined.");
      Failure(void)
    } else {
      Success(void)
    }
  }

  static fun create(
    root: String,
    name: String,
    console: Skargo.Console,
    test: Bool = false,
  ): Result<Package, void> {
    file = Path.join(root, "npm.json");
    if (FileSystem.exists(file)) {
      try {
        contents = FileSystem.readTextFile(file);
        json = JSON.decode(contents).expectObject();
        Version::fromString(json.getString("version")) match {
        | Success(version) ->
          Success(
            Package(
              json.getString("name"),
              json.maybeGetString("author"),
              version,
              json.maybeGetString("node-version"),
              json.maybeGetString("binary"),
              json.maybeGetBool("sideEffects").default(false),
            ),
          )
        | Failure(msg) ->
          console.error(msg);
          Failure(void)
        }
      } catch {
      | ex ->
        console.error(ex.getMessage());
        Failure(void)
      }
    } else {
      if (!test) console.warn("The npm.json file is not defined");
      // FIXME
      Version::fromString("0.2.0-FIXME") match {
      | Success(version) ->
        Success(Package(if (test) "sk_tests" else name, Some(kAuthor), version))
      | Failure(msg) ->
        console.error(msg);
        Failure(void)
      }
    }
  }

  fun update(path: String, version: Version): void {
    file = Path.join(path, "npm.json");
    stream = mutable Vector[];
    (this with {version}).toJSON().writeToStream(stream.push, 2);
    FileSystem.writeTextFile(file, stream.join(""));
  }

  fun toJSON(): JSON.Value {
    map = mutable Map<String, JSON.Value>[
      "name" => JSON.String(this.name),
      "version" => JSON.String(this.version.toString()),
    ];
    this.author.each(a -> map.set("author", JSON.String(a)));
    this.optNodeVersion.each(v -> map.set("node-version", JSON.String(v)));
    this.optBinary.each(b -> map.set("binary", JSON.String(b)));
    if (this.sideEffects) {
      map.set("sideEffects", JSON.Bool(this.sideEffects))
    };
    JSON.Object(map.chill());
  }
}

module end;
