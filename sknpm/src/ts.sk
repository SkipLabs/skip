module Sknpm;

fun tsResource(assets: Array<Asset>): String {
  urls = assets.map(asset ->
    `  new URL("./assets/${Path.basename(asset.path)}", import.meta.url),`
  );
  decls = assets.map(asset -> `  ${asset.name}: () => number;`);
  Array[`const urls = [`].concat(urls)
    .concat(Array["];", "", "interface ToWasm {"])
    .concat(decls)
    .concat(
      Array[
        "}",
        "interface Env {",
        `  fetch: (url: URL) => Promise<Uint8Array>;`,
        "}",
        "",
        "interface Utils {",
        "  exportBytes: (s: Uint8Array) => number;",
        "}",
        "",
        "class LinksImpl implements ToWasm {",
        "  env: Env;",
        "  data: Uint8Array[];",
        "  constructor(env: Env, data: Uint8Array[]) {",
        "    this.env = env;",
        "    this.data = data;",
        "  }",
      ],
    )
    .concat(decls)
    .concat(Array["", "  complete = (utils: Utils, exports: object) => {"])
    .concat(
      assets.mapWithIndex((idx, asset) ->
        `    this.${asset.name} = () => utils.exportBytes(this.data[${idx}]);`
      ),
    )
    .concat(
      Array[
        "    return null;",
        "  }",
        "}",
        "",
        "class Manager {",
        "  env: Env;",
        "  data: Uint8Array[];",
        "  constructor(env: Env, data: Uint8Array[]) {",
        "    this.env = env;",
        "    this.data = data;",
        "  }",
        "  prepare = (wasm: object) => {",
        "    let toWasm = wasm as ToWasm;",
        "    let links = new LinksImpl(this.env, this.data);",
      ],
    )
    .concat(
      assets.map(asset ->
        `    toWasm.${asset.name} =  () => links.${asset.name}();`
      ),
    )
    .concat(
      Array[
        "    return links;",
        "  }",
        "}",
        "",
        "/** @sk init */",
        "export async function init(env: Env) {",
        ` return Promise.all(urls.map(env.fetch)).then(data => new Manager(env, data));`,
        "}",
        "",
      ],
    )
    .join("\n")
}

module end;
