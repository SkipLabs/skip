module Skargo;

class Skc(cmd: String) {
  fun process(): mutable ProcessBuilder {
    mutable ProcessBuilder{process_cmd => this.cmd}
  }
}

mutable class ProcessBuilder{
  mutable process_cmd: String,
  process_args: mutable Vector<String> = mutable Vector[],
  process_env: mutable Map<String, String> = mutable Map[],
} {
  mutable fun cmd(value: String): void {
    this.!process_cmd = value
  }

  mutable fun arg(value: String): void {
    this.process_args.push(value)
  }

  mutable fun args(values: Array<String>): void {
    values.each(this.arg)
  }

  mutable fun env(key: String, value: String): void {
    this.process_env![key] = value
  }

  mutable fun clone(): mutable ProcessBuilder {
    mutable ProcessBuilder{
      process_cmd => this.process_cmd,
      process_args => this.process_args.clone(),
      process_env => this.process_env.clone(),
    }
  }

  readonly fun get_cmd(): String {
    this.process_cmd
  }

  readonly fun get_argv(): Array<String> {
    Array[this.process_cmd].concat(this.process_args.collect(Array)).collect(
      Array,
    )
  }

  readonly fun get_env(): Map<String, String> {
    this.process_env.chill()
  }

  readonly fun run(
    stdout: (String) -> void = _ -> void,
    stderr: (String) -> void = _ -> void,
  ): System.CompletedProcess {
    System.popen{args => this.get_argv(), env => this.get_env(), stdout, stderr}
  }
}

module end;
