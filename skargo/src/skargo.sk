module Skargo;

const kVersion: String = "0.1.0";
const kManifestFile: String = "Skargo.toml";

class Env{rootDir: String, manifest: Manifest} {
  static fun create(): Env {
    rootDir = findRootDir();
    Env{
      rootDir,
      manifest => Manifest::read(Path.join(rootDir, kManifestFile)),
    }
  }
}

private fun findRootDir(): String {
  path = getcwd();

  loop {
    if (FileSystem.exists(Path.join(path, kManifestFile))) {
      return path
    };
    if (Path.isRoot(path)) {
      invariant_violation(
        `Could not find \`${kManifestFile}\` in \`${getcwd()} or any parent directory.\``,
      )
    };

    !path = Path.parentname(path)
  }
}

private fun run(args: Array<String>, verbose: Bool): void {
  if (verbose) {
    // TODO: colors
    print_error(`>> ${args.join(" ")}`)
  };
  p = System.subprocess(args);
  if (p.exitcode != 0) {
    print_raw(p.stdout);
    print_error_raw(p.stderr);
    invariant_violation("error")
  };
}

private fun compile(
  files: readonly Sequence<String>,
  binName: String,
  main: String,
  targetDir: String,
  target: ?String,
  verbose: Bool,
): void {
  _ = system(`mkdir -p ${targetDir}`);

  output = target match {
  | Some("wasm32-unknown-unknown") -> binName + ".wasm"
  | _ -> binName
  };
  targetFlag = target.map(t -> "--target=" + t);
  // TODO: Allow overriding `skc` through `SKC` env var.
  cmd = Array[
    "skc",
    "--export-function-as",
    `${main}=skip_main`,
    "--emit=link",
    "--output",
    Path.join(targetDir, output),
  ].concat(Array[targetFlag].filterNone()).concat(files.collect(Array));
  run(cmd, verbose)
}

private fun build(
  manifest: Manifest,
  name: String,
  main: String,
  targetDir: String,
  target: ?String,
  verbose: Bool,
): void {
  files = manifest.srcs.concat(manifest.tests);
  deps = getDependencies(manifest) match {
  | Success(v) -> v
  | Failure(_) -> invariant_violation("Unsatisfiable dep")
  };

  for (dep in deps) {
    !files = files.concat(dep.srcs)
  };
  compile(files, name, main, targetDir, target, verbose);
  void
}
