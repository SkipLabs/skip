module Skargo;

const kManifestFile: String = "Skargo.toml";
const kVersionFile: String = "version.sk";
const kDevProfile: String = "dev";
const kReleaseProfile: String = "release";
const kDebugProfile: String = "debug";
const kUserConfiguration: String = ".skargoconfig";
const kDefaultTarget: String = "host";
const kTargetDir: String = "target";

class SystemCallException(code: Int, error: ?String = None()) extends Exception

private class UserConfig{
  formatOnCheck: Bool = false,
  autoRemoveState: Bool = false,
  repositories: Array<String> = Array[],
} {
  fun update(json: JSON.Object, dir: String): UserConfig {
    json.maybeGetBool("auto-remove-state").each(v -> !this.autoRemoveState = v);
    json.maybeGetBool("format-on-check").each(v -> !this.formatOnCheck = v);
    json.maybeGetArray("repositories").each(v ->
      !this.repositories = v.value
        .map(jv -> Path.join(dir, jv.expectString()))
        .toArray()
    );
    this;
  }
}

private class Env{
  rootDir: String,
  manifest: Manifest,
  verbose: Bool,
  config: UserConfig,
} {
  static fun create(verbose: Bool): Env {
    rootDir = findRootDir();
    config = findUserConfig();
    Env{
      rootDir,
      manifest => Manifest::read(Path.join(rootDir, kManifestFile)),
      verbose,
      config,
    }
  }

  fun getDependencies(): Map<String, Manifest> {
    // TODO When we start having remote repositories, this will also download the dependencies.
    getDependencies(this.manifest, this.config.repositories) match {
    | Success(v) -> v
    | Failure(e) -> throw e
    };
  }

  static fun fromFile(path: String, verbose: Bool): Env {
    rootDir = Path.dirname(path);
    config = findUserConfig(Some(rootDir));
    Env{rootDir, manifest => Manifest::read(path), verbose, config}
  }
}

private fun findRootDir(): String {
  path = getcwd();

  loop {
    if (FileSystem.exists(Path.join(path, kManifestFile))) {
      return path
    };
    if (Path.isRoot(path)) {
      invariant_violation(
        `Could not find \`${kManifestFile}\` in \`${getcwd()} or any parent directory.\``,
      )
    };

    !path = Path.parentname(path)
  }
}

private fun profileOptions(profile: String): Array<String> {
  if (profile == kDevProfile || profile == kDebugProfile) {
    Array["-O0"]
  } else if (profile == kReleaseProfile) {
    Array["-O3"]
  } else {
    invariant_violation("Unrecognized profile " + profile)
  }
}

private fun findUserConfig(optPath: ?String = None()): UserConfig {
  configFiles = mutable Vector<String>[];
  path = optPath.default(getcwd());
  loop {
    file = Path.join(path, kUserConfiguration);
    if (FileSystem.exists(file)) {
      configFiles.push(file)
    };
    if (Path.isRoot(path)) {
      break void;
    };
    !path = Path.parentname(path)
  };
  config = UserConfig{};
  configFiles.reversed().each(cFile ->
    try {
      json = JSON.decode(FileSystem.readTextFile(cFile)).expectObject();
      !config = config.update(json, Path.parentname(cFile));
    } catch {
    | _exn -> void
    }
  );
  config
}

private fun run(args: Array<String>, verbose: Bool): void {
  if (verbose) {
    // TODO: colors
    print_error(`>> ${args.join(" ")}`)
  };
  p = System.subprocess(args);
  if (verbose || !p.success()) {
    print_raw(p.stdout);
    print_error_raw(p.stderr);
  };
  if (!p.success()) {
    throw SystemCallException(p.exitcode());
  }
}

const errorMappingAbort: Int = 6;
const errorMappingFailed: Int = 41;
const errorMappingMemory: Int = 42;
const errorMappingVersion: Int = 43;
const errorChangingCont: Int = 22;

fun isMappingError(code: Int): Bool {
  code == errorMappingAbort ||
    code == errorMappingFailed ||
    code == errorMappingMemory ||
    code == errorMappingVersion ||
    code == errorChangingCont
}

private fun invokeSkc(
  bc: BuildContext,
  args: Array<String>,
  retry: Bool = true,
): void {
  targetFlag = bc.target.map(t -> `--target=${t}`);
  if (!FileSystem.exists(bc.stateDb)) {
    // TODO: Use stdlib abstraction instead of relying on the shell.
    _ = system("mkdir -p " + bc.targetDir);
    // TODO: Initialize with empty file list?
    run(
      Array[bc.skc, "--init", bc.stateDb, "--check"].concat(
        Array[targetFlag].filterNone(),
      ).concat(bc.files),
      bc.env.verbose,
    )
  };
  try {
    run(
      Array[bc.skc, "--data", bc.stateDb].concat(Array[targetFlag].filterNone())
        .concat(args)
        .concat(bc.files),
      bc.env.verbose,
    )
  } catch {
  | SystemCallException(
    code,
    _,
  ) if (bc.env.config.autoRemoveState && retry && isMappingError(code)) ->
    // TODO check the 6 origin
    run(Array["rm", bc.stateDb], bc.env.verbose);
    invokeSkc(bc, args, false)
  | exn -> throw exn
  }
}

private fun compile(bc: BuildContext, binName: String, main: String): void {
  output = bc.target match {
  | Some(t) if (t.isWasm32()) -> binName + ".wasm"
  | _ -> binName
  };
  invokeSkc(
    bc,
    Array[
      "--export-function-as",
      `${main}=skip_main`,
      "-o",
      Path.join(bc.targetDir, output),
    ].concat(profileOptions(bc.profile)),
  )
}

private fun genVersionFile(bc: BuildContext): void {
  _ = system("mkdir -p " + bc.targetDir);
  // TODO: Ensure cwd.
  p = System.subprocess(Array["git", "rev-parse", "--short", "HEAD"]);
  hash = p.exitstatus match {
  | Posix.WExited(127)
  | Posix.WExited(128) ->
    // Fallback if current checkout is not a git repo, or git is not installed.
    "unknown"
  | Posix.WExited(0) -> p.stdout.trim()
  | _ ->
    print_raw(p.stdout);
    print_error_raw(p.stderr);
    invariant_violation("error")
  };
  kTarget = bc.target.map(t -> t.toString()).default("");
  kWasm32 = bc.isWasm32();
  // Workaround for conditional compilation, but we should not rely on it long term
  contents = `module SkargoVersion;
const kVersion: String = "${
    bc.env.manifest.version
  }";
const kCommit: String = "${hash}";
const kProfile: String = "${
    bc.profile
  }";
const kTarget: String = "${kTarget}";
const kWasm32: Bool = ${kWasm32};
module end;
`;

  FileSystem.writeTextFile(Path.join(bc.targetDir, kVersionFile), contents)
}

private fun pascalCase(name: String): String {
  toupper = true;
  String::fromChars(
    name
      .chars()
      .map(c -> {
        if (c == '_') {
          !toupper = true;
        } else {
          !c = if (toupper) c.capitalize() else c;
          !toupper = false;
        };
        c
      })
      .toArray(),
  ).replace("_", "");
}

private fun generateManifestTemplate(
  name: String,
  optTestHarness: ?String = None(),
  version: String = "0.1.0",
): String {
  Array["[package]", `name = "${name}"`, `version = "${version}"`].concat(
    optTestHarness.map(th -> Array[`test-harness = "${th}"`]).default(Array[]),
  )
    .concat(
      Array[
        "",
        "[dependencies]",
        "prelude = *",
        "#depname = { \"path\" = \"deppath\" }",
        "#depname = { \"version\" = \"version\"  }",
        "#depname = { \"path\" = \"deppath\", \"version\" = \"version\"  }",
        "",
        "#[[bin]]",
        `#name = "${name.replace("_", "")}"`,
        `#main = "${pascalCase(name)}.main"`,
        "",
      ],
    )
    .join("\n");
}

fun checkBuildFiles(
  bc: BuildContext,
  test: Bool,
  building: List<Manifest>,
): void {
  // TODO manage when same dependency added multiple time with different name
  links = SortedSet[];
  libraries = mutable Vector[];
  preambles = mutable Vector[];
  bc.deps.each((_k, v) -> {
    if (!building.any(e -> v.name == e.name)) {
      !links = checkBuildFile(
        bc,
        v,
        links,
        libraries,
        preambles,
        test,
        building,
      )
    }
  });
  if (!libraries.isEmpty()) {
    Environ.set_var(
      "SKC_LINK",
      libraries.toArray().concat(links.toArray()).join(Path.listSeparator),
    );
  };
  if (!preambles.isEmpty()) {
    Environ.set_var("SKC_PREAMBLE", preambles.join(Path.listSeparator));
  }
}

fun checkBuildFile(
  bc: BuildContext,
  dependency: Manifest,
  links: SortedSet<String>,
  libraries: mutable Vector<String>,
  preambles: mutable Vector<String>,
  test: Bool,
  building: List<Manifest>,
): SortedSet<String> {
  // TODO manage version
  skbuildPath = Path.join(dependency.path, "build.sk");
  targetDir = Path.join(bc.targetDir, `deps/${dependency.name}`);
  optCmd = if (FileSystem.exists(skbuildPath)) {
    _ = system("mkdir -p " + targetDir);
    bin = ManifestBinary(
      dependency.name + "Build",
      `${pascalCase(dependency.name)}Build.main`,
    );
    bManifest = Manifest{
      name => dependency.name + "_build",
      path => targetDir,
      version => dependency.version,
      srcs => Array[skbuildPath],
      tests => Array[],
      testHarness => "SKTest.main",
      dependencies => dependency.buildDependencies,
      buildDependencies => Map[],
      bin => Array[bin],
    };
    env = Env{
      rootDir => targetDir,
      manifest => bManifest,
      verbose => bc.env.verbose,
      config => bc.env.config,
    };
    deps = env.getDependencies();
    sbc = BuildContext{
      env,
      skc => bc.skc,
      targetDir => bc.targetDir,
      target => None(),
      profile => bc.profile,
      stateDb => Path.join(targetDir, "state.db"),
      files => getFiles(env.manifest, deps).concat(
        Array[Path.join(bc.targetDir, kVersionFile)],
      ),
      deps,
    };
    bc.deps.each((_k, v) -> _ = Environ.set_var(`PCK_${v.name}`, v.path));
    execBuildContext(sbc, bManifest.bin, List.Cons(dependency, building));
    binPath = Path.join(bc.targetDir, bin.name);
    Environ.set_var("OUT_DIR", targetDir);
    Environ.set_var("PCK_DIR", dependency.path);
    Environ.set_var("NAME", dependency.name);
    Environ.set_var("PROFILE", bc.profile);
    Environ.set_var("VERBOSE", bc.env.verbose.toString());
    Environ.set_var("TEST", test.toString());
    bc.target match {
    | Some(t) -> Environ.set_var("TARGET", t.toString())
    | _ -> Environ.remove_var("TARGET")
    };
    Some(Array[binPath])
  } else {
    None()
  };
  optCmd.each(cmd -> {
    _ = system("mkdir -p " + targetDir);
    if (bc.env.verbose) {
      print_error(`>> ${cmd.join(" ")}`)
    };
    buffer = "";
    onLine = line -> {
      if (line.startsWith("skargo:")) {
        artifact = line.splitFirst(":").i1;
        if (artifact.startsWith("library=")) {
          libraries.push(artifact.substring(artifact.getIter().drop(8)));
        } else if (artifact.startsWith("preamble=")) {
          preambles.push(artifact.substring(artifact.getIter().drop(9)));
        } else if (artifact.startsWith("link=")) {
          !links = links.set(artifact.substring(artifact.getIter().drop(5)));
        }
      }
    };
    p = System.subprocess(
      cmd,
      str -> {
        lines = (buffer + str).split("\n");
        for (idx in Range(0, lines.size() - 1)) {
          onLine(lines[idx])
        }
      },
      str ->
        if (bc.env.verbose) {
          print_error_raw(str)
        }
      ,
    );
    if (!buffer.isEmpty()) {
      onLine(buffer)
    };
    if (!p.success()) {
      if (!bc.env.verbose) {
        print_raw(p.stdout);
        print_error_raw(p.stderr);
      };
      throw SystemCallException(p.exitcode())
    };
  });
  links
}

module end;
