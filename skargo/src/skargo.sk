module Skargo;

const kVersion: String = "0.1.0";
const kManifestFile: String = "Skargo.toml";

class Env{rootDir: String, manifest: Manifest} {
  static fun create(): Env {
    rootDir = findRootDir();
    Env{
      rootDir,
      manifest => Manifest::read(Path.join(rootDir, kManifestFile)),
    }
  }
}

private fun findRootDir(): String {
  path = getcwd();

  loop {
    if (FileSystem.exists(Path.join(path, kManifestFile))) {
      return path
    };
    if (Path.isRoot(path)) {
      invariant_violation(
        `Could not find \`${kManifestFile}\` in \`${getcwd()} or any parent directory.\``,
      )
    };

    !path = Path.parentname(path)
  }
}

private fun run(cmd: String, verbose: Bool): void {
  if (verbose) {
    // TODO: colors
    print_error(`>> ${cmd}`)
  };
  rv = system(cmd);
  if (rv != 0) {
    invariant_violation("error")
  };
}

private fun compile(
  files: readonly Sequence<String>,
  binName: String,
  main: String,
  targetDir: String,
  target: ?String,
  env: Env,
  verbose: Bool,
): void {
  _ = system(`mkdir -p ${targetDir}`);

  output = Path.join(targetDir, binName);
  targetFlag = target.map(t -> " --target=" + t).default("");
  // TODO: Allow overriding `skc` through `SKC` env var.
  run(
    `skc${targetFlag} ${files.join(
      " ",
    )} --export-function-as ${main}=skip_main --emit=link --output ${output}`,
    verbose,
  )
}

private fun build(
  manifest: Manifest,
  name: String,
  main: String,
  targetDir: String,
  target: ?String,
  env: Env,
  verbose: Bool,
): void {
  files = manifest.srcs.concat(manifest.tests);
  deps = getDependencies(manifest) match {
  | Success(v) -> v
  | Failure(_) -> invariant_violation("Unsatisfiable dep")
  };

  for (dep in deps) {
    !files = files.concat(dep.srcs)
  };
  compile(files, name, main, targetDir, target, env, verbose);
  void
}
