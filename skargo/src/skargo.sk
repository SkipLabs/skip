module Skargo;

const kManifestFile: String = "Skargo.toml";
const kVersionFile: String = "version.sk";

private class Env{rootDir: String, manifest: Manifest, verbose: Bool} {
  static fun create(verbose: Bool): Env {
    rootDir = findRootDir();
    Env{
      rootDir,
      manifest => Manifest::read(Path.join(rootDir, kManifestFile)),
      verbose,
    }
  }
}

private fun findRootDir(): String {
  path = getcwd();

  loop {
    if (FileSystem.exists(Path.join(path, kManifestFile))) {
      return path
    };
    if (Path.isRoot(path)) {
      invariant_violation(
        `Could not find \`${kManifestFile}\` in \`${getcwd()} or any parent directory.\``,
      )
    };

    !path = Path.parentname(path)
  }
}

private fun run(args: Array<String>, verbose: Bool): void {
  if (verbose) {
    // TODO: colors
    print_error(`>> ${args.join(" ")}`)
  };
  p = System.subprocess(args);
  if (p.exitcode != 0) {
    print_raw(p.stdout);
    print_error_raw(p.stderr);
    invariant_violation("error")
  };
}

private fun invokeSkc(bc: BuildContext, args: Array<String>): void {
  targetFlag = bc.target.map(t -> `--target=${t}`);
  if (!FileSystem.exists(bc.stateDb)) {
    // TODO: Use stdlib abstraction instead of relying on the shell.
    _ = system("mkdir -p " + bc.targetDir);
    // TODO: Initialize with empty file list?
    run(
      Array[bc.skc, "--init", bc.stateDb, "--check"].concat(
        Array[targetFlag].filterNone(),
      ).concat(bc.files),
      bc.env.verbose,
    )
  };

  run(
    Array[bc.skc, "--data", bc.stateDb].concat(Array[targetFlag].filterNone())
      .concat(args)
      .concat(bc.files),
    bc.env.verbose,
  )
}

private fun compile(bc: BuildContext, binName: String, main: String): void {
  output = bc.target match {
  | Some("wasm32-unknown-unknown") -> binName + ".wasm"
  | _ -> binName
  };
  invokeSkc(
    bc,
    Array[
      "--export-function-as",
      `${main}=skip_main`,
      "-o",
      Path.join(bc.targetDir, output),
    ],
  )
}

private fun genVersionFile(bc: BuildContext): void {
  _ = system("mkdir -p " + bc.targetDir);
  // TODO: Ensure cwd.
  p = System.subprocess(Array["git", "rev-parse", "--short", "HEAD"]);
  hash = if (p.exitcode == 127 || p.exitcode == 128) {
    // Fallback if current checkout is not a git repo, or git is not installed.
    "unknown"
  } else if (p.exitcode != 0) {
    print_raw(p.stdout);
    print_error_raw(p.stderr);
    invariant_violation("error")
  } else {
    p.stdout.trim()
  };

  contents = `module SkargoVersion;
const kVersion: String = "${
    bc.env.manifest.version
  }";
const kCommit: String = "${hash}";
`;

  FileSystem.writeTextFile(Path.join(bc.targetDir, kVersionFile), contents)
}
