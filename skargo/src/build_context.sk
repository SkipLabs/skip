module Skargo;

private class BuildContext{
  env: Env,
  skc: String,
  targetDir: String,
  target: ?TargetTriple,
  profile: String,
  stateDb: String,
  files: Array<String>,
  deps: Map<String, Manifest>,
} {
  static fun create(
    env: Env,
    target: ?String,
    targetDirOpt: ?String,
    profile: String,
  ): BuildContext {
    targetDir = targetDirOpt match {
    | Some(d) -> d
    | None() -> Path.join(getTargetDir(env.rootDir, target), profile)
    };
    skc = Environ.varOpt("SKC").default("skc");
    deps = env.getDependencies();
    BuildContext{
      env,
      skc,
      targetDir,
      target => target.map(TargetTriple::fromString),
      profile,
      stateDb => Path.join(targetDir, "state.db"),
      files => getFiles(env.manifest, deps).concat(
        Array[Path.join(targetDir, kVersionFile)],
      ),
      deps,
    }
  }

  static fun hostBinary(env: Env, profile: String, binary: String): String {
    Path.join(Path.join(getTargetDir(env.rootDir, None()), profile), binary);
  }

  fun isWasm32(): Bool {
    this.target.map(t -> t.isWasm32()).default(false);
  }
}

private fun getTargetDir(rootDir: String, targetOpt: ?String): String {
  // TODO: Build artifacts in subdirectory corresponding to build profile (dev/release).
  dir = Path.join(rootDir, kTargetDir);
  Path.join(dir, targetOpt.default(kDefaultTarget))
}

private fun getFiles(
  manifest: Manifest,
  deps: Map<String, Manifest>,
): Array<String> {
  files = manifest.tests;
  for (dep in deps) {
    // NOTE: This is a temporary hack to avoid duplicate definitions between the
    // automatically provided `libstd.sklib` and the local override.
    if (dep.name == "std") continue;
    !files = files.concat(dep.srcs)
  };
  files.collect(Array)
}

module end;
