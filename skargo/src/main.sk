module Skargo;

const kManifestFile: String = "Skargo.toml";
const kDevProfile: String = "dev";
const kReleaseProfile: String = "release";
const kDebugProfile: String = "debug";
const kDefaultTarget: String = "host";
const kTargetDir: String = "target";

fun main(): void {
  cmd = Cli.Command("skargo")
    .about("Skip's package manager")
    .arg(
      Cli.BoolArg("version")
        .short("V")
        .long("version")
        .about("Print version info and exit"),
    )
    .arg(
      Cli.BoolArg("quiet")
        .short("q")
        .long("quiet")
        .about("Do not print skargo log messages")
        .global(),
    )
    .arg(
      Cli.BoolArg("verbose")
        .short("v")
        .long("verbose")
        .repeatable()
        .about("Use verbose output (-vv very verbose)")
        .global(),
    );
  suppliers = Array[
    check,
    build,
    test,
    runner,
    clean,
    format,
    init,
    update,
    help,
  ];
  commands = mutable Map[];
  for (supplier in suppliers) {
    (subcommand, cmdFn) = supplier();
    !cmd = cmd.subcommand(subcommand);
    commands.set(subcommand.name, cmdFn);
  };
  !cmd = cmd.help();
  args = cmd.parseArgs();
  if (args.getBool("version")) {
    // FIXME
    // #env("SKARGO_PKG_VERSION")
    print_string("skargo " + "FIXME");
  } else {
    gctx = GlobalContext::create(args);
    args.maybeGetSubcommand() match {
    | Some(subcmd) ->
      commands.maybeGet(subcmd) match {
      | Some(handler) -> handler(gctx, args)
      | _ -> invariant_violation(`unknown subcommand ${subcmd}`)
      }
    | None() -> print_string(Cli.usage(args.cmd, true))
    }
  }
}

module end;
