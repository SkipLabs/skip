module SKMD;

fun read_to_end(file: mutable IO.File): String {
  res = mutable Vector[];
  loop {
    s = try {
      Posix.read(file.fileno, IO.File::kDefaultBufferSize)
    } catch {
    | EndOfFile _ -> ""
    | exn -> throw exn
    };
    if (s.length() == 0) {
      break void
    };
    res.push(s)
  };
  res.join("")
}

fun readTextFile(filename: String): String {
  read_to_end(IO.File::open(filename, IO.OpenOptions{read => true}))
}

class Config{
  title: ?String = None(),
  description: ?String = None(),
  icon: ?String = None(),
  styles: Vector<String> = Vector[],
  scripts: Vector<String> = Vector[],
  customs: Vector<String> = Vector[],
  header: ?String = None(),
  footer: ?String = None(),
  lang: ?String = None(),
  charset: ?String = None(),
} {
  //
  static fun fromJSON(jsv: JSON.Value): Config {
    jso = jsv.expectObject();
    getVector = name ->
      jso
        .maybeGetArray(name)
        .map(a -> a.value.map(v -> v.expectString()))
        .default(Vector[]);
    static{
      title => jso.maybeGetString("title"),
      description => jso.maybeGetString("description"),
      icon => jso.maybeGetString("icon"),
      styles => getVector("styles"),
      scripts => getVector("scripts"),
      customs => getVector("customs").map(readTextFile),
      header => jso.maybeGetString("header").map(readTextFile),
      footer => jso.maybeGetString("footer").map(readTextFile),
      lang => jso.maybeGetString("lang"),
      charset => jso.maybeGetString("charset"),
    }
  }

  fun fill(elements: mutable Vector<HTMLEntity>): void {
    elements.push(
      HTMLSimple(
        "meta",
        Map["charset" => JSON.String(this.charset.default("UTF-8"))],
      ),
    );
    this.title.each(t -> elements.push(HTMLTextContainer("title", t)));
    this.description.each(d ->
      elements.push(
        HTMLSimple(
          "meta",
          Map[
            "name" => JSON.String("description"),
            "content" => JSON.String(d),
          ],
        ),
      )
    );
    this.icon.each(i ->
      elements.push(
        HTMLSimple(
          "link",
          Map[
            "rel" => JSON.String("shortcut icon"),
            "type" => JSON.String("image/svg"),
            "href" => JSON.String(i),
          ],
        ),
      )
    );
    this.styles.each(s ->
      elements.push(
        HTMLSimple(
          "link",
          Map["rel" => JSON.String("stylesheet"), "href" => JSON.String(s)],
        ),
      )
    );
    this.scripts.each(s ->
      elements.push(
        HTMLElement("script", Map["src" => JSON.String(s)], Vector[]),
      )
    );
    this.customs.each(h -> elements.push(HTMLInclude(h)));
  }
}

fun convertToHtml{
  markdown: String,
  buffer: mutable Vector<String>,
  conf: Config,
}: void {
  body_content = convert(parseToBlocks(markdown));
  elements = mutable Vector<HTMLEntity>[];
  conf.fill(elements);
  html = HTMLElement(
    "html",
    Map["lang" => JSON.String(conf.lang.default("en"))],
    Vector[
      HTMLElement("head", Map[], elements.chill()),
      HTMLElement(
        "body",
        Map[],
        Vector[
          HTMLElement(
            "div",
            Map["class" => JSON.String("header")],
            conf.header.map(h -> Vector[HTMLInclude(h)]).default(Vector[]),
          ),
          HTMLElement("div", Map["class" => JSON.String("body")], body_content),
          HTMLElement(
            "div",
            Map["class" => JSON.String("footer")],
            conf.footer.map(h -> Vector[HTMLInclude(h)]).default(Vector[]),
          ),
        ],
      ),
    ],
  );
  html.print(buffer, "");
}

fun convert(entities: Vector<Entity>): Vector<HTMLElement> {
  elements = mutable Vector<HTMLElement>[];
  idx = 0;
  while (idx < entities.size()) {
    entities[idx] match {
    | ParagraphBlock(lines, header) ->
      children_ = lines.map(l -> HTMLText(splitAccessor(l)));
      if (header > 6) {
        elements.push(
          HTMLElement(
            "div",
            Map[
              "md-kind" => JSON.String("h"),
              "md-level" => JSON.String(header.toString()),
            ],
            children_,
          ),
        )
      } else if (header > 0) {
        elements.push(HTMLElement(`h${header}`, Map[], children_))
      } else {
        elements.push(HTMLElement("p", Map[], children_))
      }
    | CodeBlock(count, language, lines) ->
      strl = language.toString().trim();
      children_ = lines.map(l -> HTMLCode(splitAccessor(l)));
      attrs = if (strl.isEmpty()) {
        Map["md-level" => JSON.String(count.toString())]
      } else {
        Map[
          "class" => JSON.String(`language-${strl}`),
          "md-level" => JSON.String(count.toString()),
        ]
      };
      elements.push(
        HTMLElement(
          "pre",
          attrs,
          Vector<HTMLEntity>[HTMLElement("code", attrs, children_)],
        ),
      )
    | ConfigBlock(_lines) -> print_error("The config block has been ignored.")
    | HeaderBlock(level, subentities, _) ->
      elements.push(
        HTMLElement(
          "div",
          Map[
            "md-kind" => JSON.String("chapter"),
            "md-level" => JSON.String(level.toString()),
          ],
          convert(subentities),
        ),
      )
    | ListBlock(_, kind, subentities, _) ->
      htmlEntities = mutable Vector[];
      htmlEntities.push(
        HTMLElement(
          "li",
          Map["md-kind" => JSON.String(kind.toString())],
          convert(subentities),
        ),
      );
      !idx = idx + 1;
      while (
        idx < entities.size() &&
        entities[idx] match {
        | ListBlock(_, skind, _, _) if (skind == kind) -> true
        | _ -> false
        }
      ) {
        slist = (entities[idx] as ListBlock _);
        htmlEntities.push(
          HTMLElement(
            "li",
            Map["md-kind" => JSON.String(slist.kind.toString())],
            convert(slist.entities),
          ),
        );
        !idx = idx + 1;
      };
      tag = kind match {
      | BulletList _ -> "ul"
      | OrederedList _ -> "ol"
      };
      elements.push(HTMLElement(tag, Map[], htmlEntities.chill()))
    | BlockQuote(subentities, _) ->
      elements.push(
        HTMLElement(
          "div",
          Map["md-kind" => JSON.String("blockquote")],
          convert(subentities),
        ),
      )
    };
    !idx = idx + 1;
  };
  elements.chill()
}

mutable base class HTMLEntity {
  readonly fun print(buffer: mutable Vector<String>, prefix: String): void;

  fun toString(): String {
    buffer = mutable Vector<String>[];
    this.print(buffer, "");
    buffer.join("\n");
  }
}

class HTMLSimple(
  tag: String,
  attributes: Map<String, JSON.String>,
) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, prefix: String): void {
    if (!this.attributes.isEmpty()) {
      buf = Array::mfill(this.attributes.size(), "");
      idx = 0;
      this.attributes.unsafeEach(entry -> {
        buf.set(idx, `${entry.unsafeKey()}=${entry.unsafeValue()}`);
        !idx = idx + 1
      });
      buffer.push(`${prefix}<${this.tag} ${buf.join(" ")}/>`)
    } else {
      buffer.push(`${prefix}<${this.tag}/>`);
    };
  }
}

class HTMLTextContainer(tag: String, text: String) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, prefix: String): void {
    buffer.push(`${prefix}<${this.tag}>${this.text}</${this.tag}>`);
  }
}

class HTMLInclude(html: String) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, prefix: String): void {
    buffer.push(this.html.split("\n").map(v -> prefix + v).join("\n"))
  }
}

class HTMLText(text: Array<TextElement>) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, prefix: String): void {
    buffer.push(`${prefix}${toText(this.text)}`)
  }
}

class HTMLCode(
  text: Array<TextElement>,
  prefix: String = "",
) extends HTMLEntity {
  fun print(buffer: mutable Vector<String>, _prefix: String): void {
    buffer.push(`${this.prefix}${toText(this.text)}`)
  }
}

mutable class HTMLElement(
  tag: String,
  attributes: mutable Map<String, JSON.String>,
  children_: mutable Vector<HTMLEntity>,
) extends HTMLEntity {
  //
  readonly fun print(buffer: mutable Vector<String>, prefix: String): void {
    if (this.tag == "#text") {
      this.attributes.maybeGet("#content").each(str ->
        str.value.split("\n").map(s -> `${prefix}${s.trim()}`).each(buffer.push)
      )
    } else {
      if (this.tag == "html") {
        buffer.push("<!doctype html>")
      };
      if (!this.attributes.isEmpty()) {
        buf = Array::mfill(this.attributes.size(), "");
        idx = 0;
        this.attributes.unsafeEach(entry -> {
          buf.set(idx, `${entry.unsafeKey()}=${entry.unsafeValue()}`);
          !idx = idx + 1
        });
        buffer.push(`${prefix}<${this.tag} ${buf.join(" ")}>`)
      } else {
        buffer.push(`${prefix}<${this.tag}>`);
      };
      subprefix = if (this.tag != "pre") prefix + "  " else "";
      this.children_.each(c -> c.print(buffer, subprefix));
      buffer.push(`${if (this.tag != "pre") prefix else ""}</${this.tag}>`);
    }
  }

  readonly fun chill(): this {
    HTMLElement(this.tag, this.attributes.chill(), this.children_.chill())
  }
}

fun toText(elements: Array<TextElement>): String {
  elements.map(textElementToHtml).join("");
}

fun textElementToHtml(elem: TextElement): String {
  elem match {
  | TELink(ltext, link, optTitle) ->
    text = toEncoded(ltext.chars());
    optTitle match {
    | Some(title) ->
      if (link.endsWith("#")) {
        `<a href="${link.take(
          link.length() - 1,
        )}" title="${title}" target="_blank">${text}</a>`
      } else {
        `<a href="${link}" title="${title}">${text}</a>`
      }
    | _ ->
      if (link.endsWith("#")) {
        `<a href="${link.take(link.length() - 1)}" target="_blank">${text}</a>`
      } else {
        `<a href="${link}">${text}</a>`
      }
    }
  | TEBold(text) -> `<strong>${text}</strong>`
  | TEEmphasis(text) -> `<em>${text}</em>`
  | TECode(text) -> `<code>${text}</code>`
  | TEText(text) -> `${text}`
  }
}
