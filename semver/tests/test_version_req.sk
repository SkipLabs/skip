module alias T = SKTest;
module alias U = Utils;

module VersionReqTests;

fun assert_match_all(req: Semver.VersionReq, versions: Sequence<String>): void {
  for (str in versions) {
    T.expectTrue(req.matches(U.version(str)), `expected ${req} to match ${str}`)
  }
}

fun assert_match_none(
  req: Semver.VersionReq,
  versions: Sequence<String>,
): void {
  for (str in versions) {
    T.expectFalse(
      req.matches(U.version(str)),
      `expected ${req} not to match ${str}`,
    );
  }
}

fun assert_to_string<V: Show>(x: V, str: String): void {
  T.expectEq(x.toString(), str, `expected ${x} to be equal to ${str}`)
}

@test
fun test_basic(): void {
  r = U.req("1.0.0");
  assert_to_string(r, "^1.0.0");
  assert_match_all(r, Array["1.0.0", "1.1.0", "1.0.1"]);
  assert_match_none(
    r,
    Array["0.9.9", "0.10.0", "0.1.0", "1.0.0-pre", "1.0.1-pre"],
  );
}

@test
fun test_exact(): void {
  r = U.req("=1.0.0");
  assert_to_string(r, "=1.0.0");
  assert_match_all(r, Array["1.0.0"]);
  assert_match_none(r, Array["1.0.1", "0.9.9", "0.10.0", "0.1.0", "1.0.0-pre"]);

  !r = U.req("=0.9.0");
  assert_to_string(r, "=0.9.0");
  assert_match_all(r, Array["0.9.0"]);
  assert_match_none(r, Array["0.9.1", "1.9.0", "0.0.9", "0.9.0-pre"]);

  !r = U.req("=0.0.2");
  assert_to_string(r, "=0.0.2");
  assert_match_all(r, Array["0.0.2"]);
  assert_match_none(r, Array["0.0.1", "0.0.3", "0.0.2-pre"]);

  !r = U.req("=0.1.0-beta2.a");
  assert_to_string(r, "=0.1.0-beta2.a");
  assert_match_all(r, Array["0.1.0-beta2.a"]);
  assert_match_none(r, Array["0.9.1", "0.1.0", "0.1.1-beta2.a", "0.1.0-beta2"]);
  // !r = U.req("=0.1.0+meta");
  // assert_to_string(r, "=0.1.0");
  // assert_match_all(r, Array["0.1.0", "0.1.0+meta", "0.1.0+any"]);
}

@test
fun test_greater_than(): void {
  r = U.req(">= 1.0.0");
  assert_to_string(r, ">=1.0.0");
  assert_match_all(r, Array["1.0.0", "2.0.0"]);
  assert_match_none(r, Array["0.1.0", "0.0.1", "1.0.0-pre", "2.0.0-pre"]);

  !r = U.req(">= 2.1.0-alpha2");
  assert_to_string(r, ">=2.1.0-alpha2");
  assert_match_all(r, Array["2.1.0-alpha2", "2.1.0-alpha3", "2.1.0", "3.0.0"]);
  assert_match_none(
    r,
    Array["2.0.0", "2.1.0-alpha1", "2.0.0-alpha2", "3.0.0-alpha2"],
  );
}

@test
fun test_less_than(): void {
  r = U.req("< 1.0.0");
  assert_to_string(r, "<1.0.0");
  assert_match_all(r, Array["0.1.0", "0.0.1"]);
  assert_match_none(r, Array["1.0.0", "1.0.0-beta", "1.0.1", "0.9.9-alpha"]);

  !r = U.req("<= 2.1.0-alpha2");
  assert_match_all(r, Array["2.1.0-alpha2", "2.1.0-alpha1", "2.0.0", "1.0.0"]);
  assert_match_none(
    r,
    Array["2.1.0", "2.2.0-alpha1", "2.0.0-alpha2", "1.0.0-alpha2"],
  );

  !r = U.req(">1.0.0-alpha, <1.0.0");
  assert_match_all(r, Array["1.0.0-beta"]);

  !r = U.req(">1.0.0-alpha, <1.0");
  assert_match_none(r, Array["1.0.0-beta"]);

  !r = U.req(">1.0.0-alpha, <1");
  assert_match_none(r, Array["1.0.0-beta"]);
}

@test
fun test_multiple(): void {
  r = U.req("> 0.0.9, <= 2.5.3");
  assert_to_string(r, ">0.0.9, <=2.5.3");
  assert_match_all(r, Array["0.0.10", "1.0.0", "2.5.3"]);
  assert_match_none(r, Array["0.0.8", "2.5.4"]);

  !r = U.req("0.3.0, 0.4.0");
  assert_to_string(r, "^0.3.0, ^0.4.0");
  assert_match_none(r, Array["0.0.8", "0.3.0", "0.4.0"]);

  !r = U.req("<= 0.2.0, >= 0.5.0");
  assert_to_string(r, "<=0.2.0, >=0.5.0");
  assert_match_none(r, Array["0.0.8", "0.3.0", "0.5.1"]);

  !r = U.req("0.1.0, 0.1.4, 0.1.6");
  assert_to_string(r, "^0.1.0, ^0.1.4, ^0.1.6");
  assert_match_all(r, Array["0.1.6", "0.1.9"]);
  assert_match_none(r, Array["0.1.0", "0.1.4", "0.2.0"]);

  T.expectThrow(() -> _ = U.req("> 0.1.0,"));

  T.expectThrow(() -> _ = U.req("> 0.3.0, ,"));

  !r = U.req(">=0.5.1-alpha3, <0.6");
  assert_to_string(r, ">=0.5.1-alpha3, <0.6");
  assert_match_all(
    r,
    Array["0.5.1-alpha3", "0.5.1-alpha4", "0.5.1-beta", "0.5.1", "0.5.5"],
  );
  assert_match_none(
    r,
    Array["0.5.1-alpha1", "0.5.2-alpha3", "0.5.5-pre", "0.5.0-pre"],
  );
  assert_match_none(r, Array["0.6.0", "0.6.0-pre"]);

  T.expectThrow(() -> _ = U.req("1.2.3 - 2.3.4"));
}

@test
fun test_whitespace_delimited_comparator_sets(): void {
  T.expectThrow(() -> _ = U.req("> 0.0.9 <= 2.5.3"));
}

@test
fun test_tilde(): void {
  r = U.req("~1");
  assert_match_all(r, Array["1.0.0", "1.0.1", "1.1.1"]);
  assert_match_none(r, Array["0.9.1", "2.9.0", "0.0.9"]);

  !r = U.req("~1.2");
  assert_match_all(r, Array["1.2.0", "1.2.1"]);
  assert_match_none(r, Array["1.1.1", "1.3.0", "0.0.9"]);

  !r = U.req("~1.2.2");
  assert_match_all(r, Array["1.2.2", "1.2.4"]);
  assert_match_none(r, Array["1.2.1", "1.9.0", "1.0.9", "2.0.1", "0.1.3"]);

  !r = U.req("~1.2.3-beta.2");
  assert_match_all(r, Array["1.2.3", "1.2.4", "1.2.3-beta.2", "1.2.3-beta.4"]);
  assert_match_none(r, Array["1.3.3", "1.1.4", "1.2.3-beta.1", "1.2.4-beta.2"]);
}

@test
fun test_caret(): void {
  r = U.req("^1");
  assert_match_all(r, Array["1.1.2", "1.1.0", "1.2.1", "1.0.1"]);
  assert_match_none(r, Array["0.9.1", "2.9.0", "0.1.4"]);
  assert_match_none(r, Array["1.0.0-beta1", "0.1.0-alpha", "1.0.1-pre"]);

  !r = U.req("^1.1");
  assert_match_all(r, Array["1.1.2", "1.1.0", "1.2.1"]);
  assert_match_none(r, Array["0.9.1", "2.9.0", "1.0.1", "0.1.4"]);

  !r = U.req("^1.1.2");
  assert_match_all(r, Array["1.1.2", "1.1.4", "1.2.1"]);
  assert_match_none(r, Array["0.9.1", "2.9.0", "1.1.1", "0.0.1"]);
  assert_match_none(r, Array["1.1.2-alpha1", "1.1.3-alpha1", "2.9.0-alpha1"]);

  !r = U.req("^0.1.2");
  assert_match_all(r, Array["0.1.2", "0.1.4"]);
  assert_match_none(r, Array["0.9.1", "2.9.0", "1.1.1", "0.0.1"]);
  assert_match_none(r, Array["0.1.2-beta", "0.1.3-alpha", "0.2.0-pre"]);

  !r = U.req("^0.5.1-alpha3");
  assert_match_all(
    r,
    Array["0.5.1-alpha3", "0.5.1-alpha4", "0.5.1-beta", "0.5.1", "0.5.5"],
  );
  assert_match_none(
    r,
    Array["0.5.1-alpha1", "0.5.2-alpha3", "0.5.5-pre", "0.5.0-pre", "0.6.0"],
  );

  !r = U.req("^0.0.2");
  assert_match_all(r, Array["0.0.2"]);
  assert_match_none(r, Array["0.9.1", "2.9.0", "1.1.1", "0.0.1", "0.1.4"]);

  !r = U.req("^0.0");
  assert_match_all(r, Array["0.0.2", "0.0.0"]);
  assert_match_none(r, Array["0.9.1", "2.9.0", "1.1.1", "0.1.4"]);

  !r = U.req("^0");
  assert_match_all(r, Array["0.9.1", "0.0.2", "0.0.0"]);
  assert_match_none(r, Array["2.9.0", "1.1.1"]);

  !r = U.req("^1.4.2-beta.5");
  assert_match_all(
    r,
    Array["1.4.2", "1.4.3", "1.4.2-beta.5", "1.4.2-beta.6", "1.4.2-c"],
  );
  assert_match_none(
    r,
    Array["0.9.9", "2.0.0", "1.4.2-alpha", "1.4.2-beta.4", "1.4.3-beta.5"],
  );
}

@test
fun test_wildcard(): void {
  T.expectThrow(() -> _ = U.req(""));

  r = U.req("*");
  assert_match_all(r, Array["0.9.1", "2.9.0", "0.0.9", "1.0.1", "1.1.1"]);
  assert_match_none(r, Array["1.0.0-pre"]);

  for (s in Array["x", "X"]) {
    T.expectEq(r, U.req(s))
  };

  !r = U.req("1.*");
  assert_match_all(r, Array["1.2.0", "1.2.1", "1.1.1", "1.3.0"]);
  assert_match_none(r, Array["0.0.9", "1.2.0-pre"]);

  for (s in Array["1.x", "1.X", "1.*.*"]) {
    T.expectEq(r, U.req(s));
  };

  !r = U.req("1.2.*");
  assert_match_all(r, Array["1.2.0", "1.2.2", "1.2.4"]);
  assert_match_none(r, Array["1.9.0", "1.0.9", "2.0.1", "0.1.3", "1.2.2-pre"]);

  for (s in Array["1.2.x", "1.2.X"]) {
    T.expectEq(r, U.req(s));
  }
}

@test
fun test_logical_or(): void {
  T.expectThrow(() -> _ = U.req("=1.2.3 || =2.3.4"));
  T.expectThrow(() -> _ = U.req("1.1 || =1.2.3"));
  T.expectThrow(() -> _ = U.req("6.* || 8.* || >= 10.*"));
}

@test
fun test_any(): void {
  r = Semver.VersionReq::kStar;
  assert_match_all(r, Array["0.0.1", "0.1.0", "1.0.0"]);
}

@test
fun test_pre(): void {
  r = U.req("=2.1.1-really.0");
  assert_match_all(r, Array["2.1.1-really.0"]);
}

@test
fun test_parse(): void {
  T.expectThrow(() -> _ = U.req("\0"));
  T.expectThrow(() -> _ = U.req(">= >= 0.0.2"));
  T.expectThrow(() -> _ = U.req(">== 0.0.2"));
  T.expectThrow(() -> _ = U.req("a.0.0"));
  T.expectThrow(() -> _ = U.req("1.0.0-"));
  T.expectThrow(() -> _ = U.req(">="));
}

@test
fun test_comparator_parse(): void {
  parsed = U.comparator("1.2.3-alpha");
  assert_to_string(parsed, "^1.2.3-alpha");

  !parsed = U.comparator("2.X");
  assert_to_string(parsed, "2.*");

  !parsed = U.comparator("2");
  assert_to_string(parsed, "^2");

  !parsed = U.comparator("2.x.x");
  assert_to_string(parsed, "2.*");

  // TODO: Fail on leading zeros in Prerelease.
  // T.expectThrow(() -> _ = U.comparator("1.2.3-01"));

  T.expectThrow(() -> _ = U.comparator("1.2.3+4."));

  T.expectThrow(() -> _ = U.comparator(">"));

  T.expectThrow(() -> _ = U.comparator("1."));

  T.expectThrow(() -> _ = U.comparator("1.*."));

  T.expectThrow(() -> _ = U.comparator("1.2.3+4Ã¿"));
}

@test
fun test_cargo3202(): void {
  r = U.req("0.*.*");
  assert_to_string(r, "0.*");
  assert_match_all(r, Array["0.5.0"]);

  !r = U.req("0.0.*");
  assert_to_string(r, "0.0.*");
}

@test
fun test_digit_after_wildcard(): void {
  T.expectThrow(() -> _ = U.req("*.1"));
  T.expectThrow(() -> _ = U.req("1.*.1"));
  T.expectThrow(() -> _ = U.req(">=1.*.1"));
}

@test
fun test_leading_digit_in_pre_and_build(): void {
  for (op in Array["=", ">", ">=", "<", "<=", "~", "^"]) {
    // digit then alpha
    _ = U.req(`${op} 1.2.3-1a`);
    _ = U.req(`${op} 1.2.3+1a`);

    // digit then alpha (leading zero)
    _ = U.req(`${op} 1.2.3-01a`);
    _ = U.req(`${op} 1.2.3+01`);

    // multiple
    _ = U.req(`${op} 1.2.3-1+1`);
    _ = U.req(`${op} 1.2.3-1-1+1-1-1`);
    _ = U.req(`${op} 1.2.3-1a+1a`);
    _ = U.req(`${op} 1.2.3-1a-1a+1a-1a-1a`);
  }
}

@test
fun test_wildcard_and_another(): void {
  T.expectThrow(() -> _ = U.req("*, 0.20.0-any"));
  T.expectThrow(() -> _ = U.req("0.20.0-any, *"));
  T.expectThrow(() -> _ = U.req("0.20.0-any, *, 1.0"));
}

module end;
