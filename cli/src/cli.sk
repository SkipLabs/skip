module Cli;

base class Arg(
  name: String,
  _short: ?String = None(),
  _long: ?String = None(),
  _about: ?String = None(),
  _global: Bool = false,
  _env: ?String = None(),
  // NOTE: The following parameters cannot be placed in subclasses, since `name` is required.
  // Other than BoolArgs only
  _default: ?Value = None(),
  _required: Bool = false,
  _positional: Bool = false,
  // BoolArgs only
  _negatable: Bool = false,
) {
  // Builder interface methods.
  fun short(flag: String): this {
    this with {_short => Some(flag)}
  }

  fun long(flag: String): this {
    this with {_long => Some(flag)}
  }

  fun positional(value: Bool = true): this {
    this with {_positional => value}
  }

  fun about(msg: String): this {
    this with {_about => Some(msg)}
  }

  fun global(): this {
    this with {_global => true}
  }

  overridable fun env(name: String): this {
    this with {_env => Some(name)}
  }
}

base class ValuedArg extends Arg {
  fun required(value: Bool = true): this {
    this with {_required => value}
  }
}

class StringArg extends ValuedArg {
  fun default(value: String): this {
    this with {_default => Some(StringValue(value))}
  }
}

class IntArg extends ValuedArg {
  fun default(value: Int): this {
    this with {_default => Some(IntValue(value))}
  }
}

class ArrayArg extends ValuedArg {
  fun default(value: Array<String>): this {
    this with {_default => Some(ArrayValue(value))}
  }

  fun env(_name: String): this {
    invariant_violation("TODO")
  }
}

class BoolArg extends Arg {
  fun default(value: Bool): this {
    this with {_default => Some(BoolValue(value))}
  }

  fun negatable(value: Bool = true): this {
    this with {_negatable => value}
  }
}

class Command(
  name: String = "",
  _args: Array<Arg> = Array[],
  _extra: Bool = false,
  _extraName: ?String = None(),
  _subcommands: Array<Command> = Array[],
  _about: ?String = None(),
  _short: ?String = None(),
) {
  fun arg(arg: Arg): this {
    this with {_args => this._args.concat(Array[arg])}
  }

  fun extra(name: String = ""): this {
    this with {
      _extra => true,
      _extraName => if (name != "") Some(name) else None(),
    }
  }

  fun subcommand(cmd: Command): this {
    this with {_subcommands => this._subcommands.concat(Array[cmd])}
  }

  fun about(msg: String): this {
    this with {_about => Some(msg)}
  }

  fun short(n: String): this {
    this with {_short => Some(n)}
  }

  fun help(): this {
    this.arg(
      Cli.BoolArg("help")
        .short("h")
        .long("help")
        .about("Print help information")
        .global(),
    )
  }

  fun parseArgs(): ParseResults {
    res = parseArgs(this);

    if (res.values.containsKey("help") && res.getBool("help")) {
      res.subcommand match {
      | Some(subcmd) ->
        this._subcommands.find(c -> c.name == subcmd) match {
        | Some(cmd) -> print_string(usage(cmd, true, Some(this)))
        | None() -> invariant_violation(`Unknown subcommand ${subcmd}`)
        }
      | None() -> print_string(usage(this, true))
      };
      skipExit(0)
    };

    res.error.each(err -> {
      print_error(`error: ${err.getMessage()}\n`);
      res.subcommand match {
      | Some(subcmd) ->
        this._subcommands.find(c -> c.name == subcmd) match {
        | Some(cmd) -> print_error(usage(cmd, false, Some(this)))
        | None() -> invariant_violation(`Unknown subcommand ${subcmd}`)
        }
      | None() -> print_error(usage(this, false))
      };
      skipExit(1)
    });

    res
  }
}

module end;
