module Cli;

base class ArgumentError extends Exception uses Equality {
  children =
  | InvalidArgumentError(arg: String)
  | MissingArgumentError(arg: String)
  | MissingValueError(arg: String)
  | DuplicateValueError(arg: String)

  fun getMessage(): String
  | InvalidArgumentError(arg) -> `Invalid argument ${arg}.`
  | MissingArgumentError(arg) -> `Missing required argument ${arg}.`
  | MissingValueError(arg) -> `No value provided for argument ${arg}.`
  | DuplicateValueError(arg) -> `Multiple values provided for argument ${arg}.`
}

base class Value uses Show, Equality {
  children =
  | BoolValue(Bool)
  | StringValue(String)
  | IntValue(Int)
  | ArrayValue(Array<String>)
  | MissingValue()

  fun toString(): String
  | MissingValue() -> "(no value)"
  | BoolValue(v) -> v.toString()
  | StringValue(v) -> `"${v}"`
  | IntValue(v) -> v.toString()
  | ArrayValue(v) -> "[" + v.map(x -> `"${x}"`).join(", ") + "]"
}

class ParseResults{
  cmd: Command,
  values: Map<String, Value> = Map[],
  extra: Array<String> = Array[],
  subcommand: ?String = None(),
  error: ?ArgumentError = None(),
} {
  fun maybeGetBool(name: String, fail_on_undefined_arg: Bool = true): ?Bool {
    this.getValue(name, fail_on_undefined_arg) match {
    | BoolValue(v) -> Some(v)
    | MissingValue() -> None()
    | _ -> invariant_violation(`Argument ${name} is not boolean`)
    }
  }
  fun getBool(name: String, default: ?Bool = None()): Bool {
    this.maybeGetBool(name, default.isNone()) match {
    | Some(v) -> v
    | None() ->
      default match {
      | Some(v) -> v
      | None() -> invariant_violation(`Argument ${name} is missing`)
      }
    }
  }

  fun maybeGetString(
    name: String,
    fail_on_undefined_arg: Bool = true,
  ): ?String {
    this.getValue(name, fail_on_undefined_arg) match {
    | StringValue(v) -> Some(v)
    | MissingValue() -> None()
    | _ -> invariant_violation(`Argument ${name} is not a string`)
    }
  }

  fun getString(name: String, default: ?String = None()): String {
    this.maybeGetString(name, default.isNone()) match {
    | Some(s) -> s
    | None() ->
      default match {
      | Some(s) -> s
      | None() -> invariant_violation(`Argument ${name} is missing`)
      }
    }
  }

  fun maybeGetInt(name: String, fail_on_undefined_arg: Bool = true): ?Int {
    this.getValue(name, fail_on_undefined_arg) match {
    | IntValue(v) -> Some(v)
    | MissingValue() -> None()
    | _ -> invariant_violation(`Argument ${name} is not an int`)
    }
  }

  fun getInt(name: String, default: ?Int = None()): Int {
    this.maybeGetInt(name, default.isNone()) match {
    | Some(v) -> v
    | None() ->
      default match {
      | Some(v) -> v
      | None() -> invariant_violation(`Argument ${name} is missing`)
      }
    }
  }

  fun maybeGetArray(
    name: String,
    fail_on_undefined_arg: Bool = true,
  ): ?Array<String> {
    this.getValue(name, fail_on_undefined_arg) match {
    | ArrayValue(v) -> Some(v)
    | MissingValue() -> None()
    | _ -> invariant_violation(`Argument ${name} is not an array`)
    }
  }

  fun getArray(name: String, default: ?Array<String> = None()): Array<String> {
    this.maybeGetArray(name, default.isNone()) match {
    | Some(a) -> a
    | None() ->
      default match {
      | Some(a) -> a
      | None() -> invariant_violation(`Argument ${name} is missing`)
      }
    }
  }

  private fun getValue(
    name: String,
    fail_on_undefined_arg: Bool = true,
  ): Value {
    this.values.maybeGet(name) match {
    | Some(v) -> v
    | None() if (fail_on_undefined_arg) ->
      invariant_violation(`Argument ${name} is undefined`)
    | None() -> MissingValue()
    }
  }

  fun maybeGetSubcommand(): ?String {
    this.subcommand
  }

  fun getCommand(): Command {
    this.cmd
  }
}

fun parseArgs(cmd: Command): ParseResults {
  parseArgsFrom(cmd, Environ.args().drop(1).collect(Array))
}

fun parseArgsFrom(cmd: Command, argv: Sequence<String>): ParseResults {
  parse(cmd, argv.values())
}

private fun updateValue(
  values: mutable Map<String, Value>,
  arg: Arg,
  value: String,
): ?ArgumentError {
  arg match {
  | ArrayArg _ ->
    values.maybeGet(arg.name) match {
    | Some(ArrayValue(arr)) ->
      values.set(arg.name, ArrayValue(arr.concat(Array[value])))
    | None() -> values.set(arg.name, ArrayValue(Array[value]))
    | Some(v) -> invariant_violation(`Unexpected value type ${v} for ArrayArg`)
    }
  | StringArg _ ->
    if (!values.containsKey(arg.name)) {
      values.set(arg.name, StringValue(value))
    } else {
      return Some(DuplicateValueError(arg.name))
    }
  | IntArg _ ->
    if (!values.containsKey(arg.name)) {
      value.toIntOption() match {
      | Some(v) -> values.set(arg.name, IntValue(v))
      | _ -> return Some(InvalidArgumentError(arg.name))
      }
    } else {
      return Some(DuplicateValueError(arg.name))
    }
  | _ -> invariant_violation(`Unexpected argument type ${inspect(arg)}`)
  };

  None()
}

private fun parse(
  cmd: Command,
  iterator: mutable Iterator<String>,
  values: mutable Map<String, Value> = mutable Map<String, Value>[],
  globals: Array<Arg> = Array[],
): ParseResults {
  subcommands = mutable Map[];
  for (subcmd in cmd._subcommands) {
    if (subcommands.containsKey(subcmd.name)) {
      invariant_violation(`Duplicate subcommand ${subcmd.name}`)
    };
    subcommands.set(subcmd.name, subcmd);
    subcmd._short.each(n -> {
      if (subcommands.containsKey(n)) {
        invariant_violation(`Duplicate subcommand short alias ${n}`)
      };
      subcommands.set(n, subcmd)
    })
  };
  argsNames = mutable Set[];
  posArgs = mutable Vector<Arg>[];
  // TODO: options is a bad name. Maybe flag_args?
  options = mutable Map[];
  for (arg in cmd._args.concat(globals)) {
    if (argsNames.contains(arg.name)) {
      invariant_violation(`Duplicate argument ${arg.name}`)
    };
    argsNames.add(arg.name);

    if (arg._positional) {
      if (posArgs.size() > 0) {
        prevArg = posArgs[posArgs.size() - 1];
        if (prevArg is ArrayArg _) {
          invariant_violation(
            `Positional argument ${
              arg.name
            } cannot appear after array positional argument ${prevArg.name}`,
          )
        }
      };
      posArgs.push(arg);
    } else {
      if (arg._short.isSome()) {
        options.add(`-${arg._short.fromSome()}`, arg);
        if (arg._long.isNone()) {
          if (arg._negatable) {
            invariant_violation(
              `Argument ${arg.name} cannot be negatable without a long name`,
            )
          };
          continue
        }
      };

      // Use arg name as default long flag for convenience.
      longFlag = arg._long.default(arg.name);
      if (arg is BoolArg _ && longFlag.startsWith("no-")) {
        positiveFlag = longFlag.stripPrefix("no-");
        invariant_violation(
          `Invalid boolean argument name ${longFlag}. Declare a negatable ${positiveFlag} instead.`,
        )
      };
      options.add(`--${longFlag}`, arg);
      if (arg._negatable) {
        options.add(`--no-${longFlag}`, arg);
      };
    }
  };

  posArgId = 0;
  extra = mutable Vector[];
  hasExtra = false;
  error: ?ArgumentError = None();
  subcommand: ?String = None();

  loop {
    iterator.next() match {
    | None() -> break void
    | Some(str) if (hasExtra) -> extra.push(str)
    | Some(str) if (subcommands.containsKey(str)) ->
      subcmd = subcommands.get(str);
      !subcommand = Some(subcmd.name);

      // TODO: This does not support nested subcommands (which probably
      // shouldn't exist).
      globalArgs = cmd._args.filter(a -> a._global);
      res = parse(subcmd, iterator, values, globalArgs);
      if (res.error.isSome()) {
        !error = res.error;
        break void
      };

      // TODO: This is dirty.
      !extra = Vector::mcreateFromItems(res.extra);

      break void
    | Some("--") ->
      if (!cmd._extra) {
        !error = Some(InvalidArgumentError("--"));
        break void
      };
      !hasExtra = true
    | Some(str) ->
      (argName, argValue) = if (str.contains("=")) {
        (k, v) = str.splitFirst("=");
        (k, Some(v))
      } else {
        (str, None())
      };
      options.maybeGet(argName) match {
      | Some(arg) if (arg._takesValue()) ->
        value = argValue match {
        | Some(v) -> v
        | None() ->
          iterator.next() match {
          | Some(v) -> v
          | None() ->
            !error = Some(MissingValueError(arg.name));
            break void
          }
        };
        updateValue(values, arg, value) match {
        | err @ Some _ ->
          !error = err;
          break void
        | None() -> void
        }
      | Some(arg) ->
        if (!values.containsKey(arg.name)) {
          values.set(arg.name, BoolValue(!str.startsWith("--no-")))
        } else {
          !error = Some(DuplicateValueError(arg.name));
          break void
        }
      | None() if (!str.startsWith("-") && posArgId < posArgs.size()) ->
        updateValue(values, posArgs[posArgId], str) match {
        | err @ Some _ ->
          !error = err;
          break void
        | _ -> void
        };
        posArgs[posArgId] match {
        | ArrayArg _ -> void
        | _ -> !posArgId = posArgId + 1
        }
      | None() -> // Check for short forms that take values such as `-O2`.
        !argName = str.take(2);
        value = str.substring(str.getIter().forward(2));
        options.maybeGet(argName) match {
        | Some(arg) if (arg._takesValue()) ->
          updateValue(values, arg, value) match {
          | err @ Some _ ->
            !error = err;
            break void
          | None() -> void
          }
        | _ ->
          !error = Some(InvalidArgumentError(str));
          break void
        }
      }
    }
  };

  if (error.isNone()) {
    for (arg in cmd._args) {
      if (!values.containsKey(arg.name)) {
        if (arg._required) {
          !error = Some(MissingArgumentError(arg.name));
          break void
        } else {
          env_var = arg._env.map(v -> Environ.var(v));
          value = arg match {
          | StringArg _ -> env_var.map(v -> StringValue(v))
          | IntArg _ -> env_var.map(v -> IntValue(v.toInt()))
          | BoolArg _ ->
            env_var.map(b -> BoolValue(b != "no" && b != "false" && b != "0"))
          | _ ->
            env_var.map(_ -> invariant_violation("Unexpected argument type."))
          };
          values.set(arg.name, value.default(arg._defaultValue()))
        }
      }
    }
  };

  ParseResults{
    cmd => cmd,
    subcommand,
    values => values.chill(),
    extra => Array::createFromItems(extra.chill()),
    error => error,
  }
}

module end;
