module alias T = SKTest;

module SKStoreTest;

@test
fun testPre(): void {
  context = SKStore.run(context ~> {
    dirSInput1 = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      SKStore.DirName::create("/sinput/"),
      Array[
        (SKStore.IID(0), SKStore.StringFile("23")),
        (SKStore.IID(1), SKStore.StringFile("35")),
      ],
    );

    _dirSInput2 = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      SKStore.DirName::create("/sinput2/"),
      Array[
        (SKStore.IID(0), SKStore.StringFile("44")),
        (SKStore.IID(1), SKStore.StringFile("45")),
      ],
    );

    dirInput = dirSInput1.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/input/"),
      (_context, writer, key, values) ~>
        writer.set(key, SKStore.IntFile(values.first.value.toInt()))
      ,
    );
    _dir = dirInput.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/diff/"),
      (context, writer, key, values) ~> {
        valueFile = values.first;
        preOpt = dirInput.pre(context);
        preOpt match {
        | None() -> writer.set(key, SKStore.IntFile(0))
        | Some(pre) ->
          pre.maybeGet(context, key) match {
          | None() -> writer.set(key, SKStore.IntFile(0))
          | Some(old) ->
            diff = valueFile.value - old.value;
            writer.set(key, SKStore.IntFile(diff))
          }
        }
      },
    );
  });

  /***************************************************************************/
  // STARTING TESTS

  dirSInput1 = SKStore.DirName::create("/sinput/");
  dirInput = SKStore.DirName::create("/input/");
  dirInputEHandle = SKStore.EHandle(
    SKStore.IID::keyType,
    SKStore.IntFile::type,
    dirInput,
  );

  write(context, dirSInput1, SKStore.IID(3), Array[SKStore.StringFile("3")]);
  _ = context.updateWithStatus();
  write(context, dirSInput1, SKStore.IID(4), Array[SKStore.StringFile("4")]);
  _ = context.updateWithStatus();
  T.expectEq(
    Array[3],
    getData(
      context,
      dirInputEHandle.pre(context).fromSome().dirName,
      SKStore.IID(3),
    ).map(toInt),
    "Test pre 1",
  );
  write(context, dirSInput1, SKStore.IID(3), Array[]);
  _ = context.updateWithStatus();
  T.expectEq(
    Array[4],
    getData(
      context,
      dirInputEHandle.pre(context).fromSome().dirName,
      SKStore.IID(4),
    ).map(toInt),
    "Test pre 2",
  );
  write(context, dirSInput1, SKStore.IID(4), Array[]);
  _ = context.updateWithStatus();
  T.expectEq(
    Array[],
    getData(
      context,
      dirInputEHandle.pre(context).fromSome().dirName,
      SKStore.IID(3),
    ).map(toInt),
    "Test pre 3",
  )
}

module end;
