module alias T = SKTest;

module SKStoreTest;

@test
fun testInputInLazy(): void {
  T.expectThrow(() ->
    _ = SKStore.run(context ~> {
      dirInput = context.mkdir(
        SKStore.IID::keyType,
        SKStore.IntFile::type,
        SKStore.DirName::create("/input/"),
        Array[(SKStore.IID(0), SKStore.IntFile(23))],
      );
      dir1 = SKStore.LHandle::create(
        SKStore.IID::keyType,
        SKStore.IntFile::type,
        context,
        SKStore.DirName::create("/lazy1/"),
        (context, _self, x) ~> {
          dirInput2 = context.mkdir(
            SKStore.IID::keyType,
            SKStore.IntFile::type,
            SKStore.DirName::create("/input2/"),
            Array[(SKStore.IID(0), SKStore.IntFile(23))],
          );
          Array[
            SKStore.IntFile(
              x match {
              | SKStore.IID(v) ->
                dirInput2.getArray(context, SKStore.IID(0))[0].value + v
              },
            ),
          ]
        },
      );
      _dir2 = dirInput.map(
        SKStore.IID::keyType,
        SKStore.IntFile::type,
        context,
        SKStore.DirName::create("/eager2/"),
        (context, writer, key, files) ~> {
          writer.set(
            key,
            SKStore.IntFile(
              files.first.value + dir1.getArray(context, key)[0].value,
            ),
          );
        },
      );
    })
  );
}

module end;
