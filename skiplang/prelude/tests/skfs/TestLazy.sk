module alias T = SKTest;

module SKStoreTest;

@test
fun testLazy(): void {
  context = SKStore.run(context ~> {
    dirInput = context.mkdir(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      SKStore.DirName::create("/input/"),
      Array[(SKStore.IID(0), SKStore.IntFile(23))],
    );

    dirInput2 = context.mkdir(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      SKStore.DirName::create("/input2/"),
      Array[(SKStore.IID(0), SKStore.IntFile(44))],
    );
    dir1 = SKStore.LHandle::create(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/lazy1/"),
      (context, _self, x) ~> {
        Array[
          SKStore.IntFile(
            x match {
            | SKStore.IID(v) ->
              dirInput.getArray(context, SKStore.IID(0))[0].value + v
            },
          ),
        ]
      },
    );
    dir2 = SKStore.LHandle::create(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/lazy2/"),
      (context, _self, key) ~> {
        Array[SKStore.IntFile(dir1.getArray(context, key)[0].value)]
      },
    );

    _dir3 = dirInput2.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/eager/"),
      (context, writer, key, _) ~> {
        writer.set(key, dir2.getArray(context, key)[0]);
      },
    )
  });

  input = SKStore.DirName::create("/input/");
  dir2 = SKStore.DirName::create("/lazy2/");
  dir3 = SKStore.DirName::create("/eager/");

  _ = context.updateWithStatus();

  T.expectEq(
    Array[23],
    getData(context, dir2, SKStore.IID(0)).map(toInt),
    "Lazy basic",
  );
  write(context, input, SKStore.IID(0), Array[SKStore.IntFile(22)]);
  _status = context.updateWithStatus();

  T.expectEq(
    Array[22],
    getData(context, dir2, SKStore.IID(0)).map(toInt),
    "Lazy after update",
  );

  T.expectEq(
    Array[22],
    getData(context, dir3, SKStore.IID(0)).map(toInt),
    "Eeager after update",
  )
}

module end;
