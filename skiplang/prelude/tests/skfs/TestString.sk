module alias T = SKTest;

module SKStoreTest;

const str: String = "123";

@cpp_extern("SKIP_utf8_test_string")
native fun getUtf8(): String;

@cpp_extern("SKIP_invalid_utf8_test_string")
native fun getInvalidUtf8(): String;

@test
fun testString(): void {
  utf8 = getUtf8();
  iter = str.getIter();
  sub = str.sub(iter, 3);
  sub2 = str.substring(iter);
  T.expectEq(str, sub, "Compare strings");
  T.expectEq(str.hash(), sub.hash(), "Compare hashes");
  T.expectEq(str, sub2, "Compare strings sub");
  T.expectEq(str.hash(), sub2.hash(), "Compare hashes sub");
  T.expectEq("3", str.substring(iter.forward(2)), "Compare sub");
  T.expectEq(utf8.length(), 23, "Utf8 length");
  T.expectEq(String.byteSize(utf8), UInt32::truncate(65), "Utf8 byteSize");
  T.expectEq(
    utf8,
    String::fromChars(utf8.chars().toArray()),
    "Utf8 from/to chars",
  )
}

@cpp_extern("SKIP_largest_string")
native fun largestString(): String;

// largestString compares larger than any valid utf8, but by constructing
// strings that are not valid utf8, strings larger than largestString exist
//
// note that largestString is only mean to be used as the upper bound
// of Ranges and should only be involved in comparison operations
@test
fun testLargestString(): void {
  T.expectFalse(
    largestString() + largestString() < largestString(),
    "Largest string isn't largest",
  )
}

@test
fun testEmbeddedNul(): void {
  s1 = "foo" + Char::fromCode(0).toString() + "bar";
  s2 = "foo bar";
  T.expectEq(s1.length(), s2.length(), "length of string with embedded nul");
}

module end;
