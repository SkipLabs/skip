module alias T = SKTest;

module PathTest;

@test
fun testTrimTrailingSeparators(): void {
  t = (path: String, res: String) ->
    T.expectEq(
      Path.trimTrailingSeparators(path),
      res,
      `trimTrailingSeparators("${path}")`,
    );
  t("", "");
  t("/", "/");
  t("//", "/");
  t("///", "/");
  t("a", "a");
  t("a/", "a");
  t("a//", "a");
  t("a///", "a");
  t("a///b", "a///b");
  t("a///b/", "a///b");
  t("a///b//", "a///b");
  t("a///b///", "a///b");
}

@test
fun testDirname(): void {
  t = (path: String, res: String) ->
    T.expectEq(Path.dirname(path), res, `dirname("${path}")`);
  t("", ".");
  t(".", ".");
  t("..", "..");
  t("/", "/");
  t("/.", "/");
  t("/..", "/");
  t("/a", "/");
  t("/a/", "/");
  t("/a/b", "/a");
  t("/a/b/", "/a");
  t("/a/b/c", "/a/b");
  t("/a/b/c/", "/a/b");
  t("a", ".");
  t("a/", ".");
  t("a/b", "a");
  t("a////b", "a");
  t("a/b/", "a");
  t("a/b////", "a");
  t("a/..", "a");
  t("a/.", "a");
  t("a/b/c", "a/b");
  t("a/b/c/", "a/b");
}

@test
fun testBasename(): void {
  t = (path: String, res: String) ->
    T.expectEq(Path.basename(path), res, `basename("${path}")`);
  t("", "");
  t("/", "");
  t(".", "");
  t("..", "");
  t("/..", "..");
  t("/.", ".");
  t("dir/..", "..");
  t("dir/.", ".");
  t("base", "base");
  t("dir/base", "base");
  t("dir/base///", "base");
}

module end;
