module Unsafe;

@debug
@cpp_extern("SKIP_unsafe_cast")
native fun unsafeCast<T: Downcastable, F: T>(t: T): F;

trait Downcastable {
  @no_inline
  static fun const_type_id(): Int {
    SKStore.const_typed_symbol()
  }

  fun type_id(): Int {
    static::const_type_id()
  }
}

fun maybeCast<T: Downcastable, F: T>(v: T, c: Concrete<F>): ?F {
  if (instanceOf(v, c)) Some(unsafeCast<T, F>(v)) else None()
}

fun cast<T: Downcastable, F: T>(v: T, c: Concrete<F>): F {
  invariant(v.type_id() == c::const_type_id(), "invalid cast");
  unsafeCast<T, F>(v);
}

fun instanceOf<T: Downcastable, F: T>(v: T, c: Concrete<F>): Bool {
  v.type_id() == c::const_type_id()
}

module end;
