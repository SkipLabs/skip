/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Hashable;

trait .Hashable {
  // The hash method should return a 64-bit hash value. The bits do not
  // need to be scrambled, that is the responsibility of the user of this
  // method.
  overridable macro fun hash(): Int {
    h = #thisClassName.hash();
    #forEachField (#field) !h = combine(h, this.#field);
    h
  }
}

// Accumulate hash bits from n into seed. Borrowed from boost::hash_combine,
// but using a 64 bit version of the golden ratio instead of 32.
fun combine<T: Hashable>(seed: Int, n: T): Int {
  mix = seed.shl(6) + seed.ushr(2);
  seed.xor(0x9e3779b97f4a7c15 + mix + n.hash())
}

module end;

@cpp_extern("SKIP_hash")
native fun unsafe_hash_native<T>(T): Int;

fun hash<T>(v: T): Int {
  unsafe_hash_native(List[v])
}
