/*****************************************************************************/
/* Module exposing a typed interface to the file system.
 *
 * The code implementing the file system is not statically typed. A first
 * version attempted to do that, but it became clear very quickly that it
 * would require to bend the type-system in ways that were counter-productive.
 *
 * Moreover, remote-directories, because of their nature break the static
 * type-checking.
 *
 * Hence the idea of an implementation where every file in the system has the
 * same type "File" and every key the type "Key".
 *
 * However, type-checking is nice! So how do we get the best of both worlds?
 * By exposing a typed API!
 *
 * This is what the Handle module is for. The idea is to add a layer of type-
 * checking and expose that to the user.
 *
 * Concretely, let's say we want to manipulate a directory where the files are
 * all of type IntFile. The type Handle<IntFile> is there to the rescue! Every
 * operation will be type-checked (statically) against the type IntFile.
 *
 * So if I try to write a StringFile instead of an IntFile I get a static error.
 * The other important part is that all the higher order operations are also
 * typed. So applying a map to a Handle also produces a handle.
 *
 * What's nice about that is that it becomes relatively straightforward to
 * write a program that is fully type-checked. The dynamic nature of the file-
 * system becomes an implementation detail. All you need to do is to stick with
 * Handles. Never try to manipulate "Dir" directly and you will be safe!
 */
/*****************************************************************************/

module SKStore;

/*****************************************************************************/
/* Iterator capable of answering if it produces at least one element. */
/*****************************************************************************/

mutable base class FileIterator<+T> {
  static fun create(iter: mutable Iterator<T>): mutable FileIterator<T> {
    iter.next() match {
    | None() -> mutable EmptyFileIterator()
    | Some(v) -> mutable NonEmptyIterator(v, iter)
    }
  }
}

mutable class EmptyFileIterator<T>() extends FileIterator<T> {}

/* A NonEmptyIterator should only be used in one of the following ways:
- a single call to assertUnique or getUnique, or
- a single call to nonEmptyMap, nonEmptyReduce, toArray, or values, or
- repeated calls to next__ForJS.

Accessing first is a bad pattern. Use assertUnique, getUnique, toArray,
or values instead. */
mutable class NonEmptyIterator<+T>(
  first: T,
  private iter: mutable Iterator<T>,
  private mutable isPastFirstValue: Bool = false,
) extends FileIterator<T> {
  mutable fun values(): mutable Iterator<T> {
    invariant(
      !this.isPastFirstValue,
      "Trying to iterate a NonEmptyIterator twice (values)",
    );
    loop {
      this.next() match {
      | Some(v) -> yield v
      | None() -> yield break
      }
    }
  }

  @synonym("next__ForJS")
  mutable fun next(): ?T {
    if (this.isPastFirstValue) {
      this.iter.next()
    } else {
      this.!isPastFirstValue = true;
      Some(this.first)
    }
  }

  mutable fun nonEmptyMap<U>(f: T -> U): mutable NonEmptyIterator<U> {
    invariant(
      !this.isPastFirstValue,
      "Trying to iterate a NonEmptyIterator twice (nonEmptyMap)",
    );
    mutable NonEmptyIterator(f(this.first), this.iter.map(f))
  }

  mutable fun getUnique(): ?T {
    invariant(
      !this.isPastFirstValue,
      "Cannot use getUnique on an iterator that has already been used",
    );
    this.!isPastFirstValue = true;
    this.iter.next() match {
    | None() -> Some(this.first)
    | Some(_) -> None()
    }
  }

  mutable fun assertUnique(
    err: () -> T = () ->
      invariant_violation("Expected an iterator with only one element"),
  ): T {
    this.getUnique() match {
    | Some(v) -> v
    | None() -> err()
    }
  }

  mutable fun toArray(): Array<T> {
    invariant(
      !this.isPastFirstValue,
      "Trying to iterate a NonEmptyIterator twice (toArray)",
    );
    Array::createFromIterator(this.values())
  }

  mutable fun nonEmptyReduce<U>(f: (U, T) -> U, init: T -> U): U {
    invariant(
      !this.isPastFirstValue,
      "Trying to iterate a NonEmptyIterator twice (nonEmptyReduce)",
    );
    this.iter.reduce(f, init(this.first))
  }
}

/*****************************************************************************/
/* Typed version of Writer. */
/*****************************************************************************/

mutable class TWriter<K: Key, V: File> private {
  mutable writes: SortedMap<K, Array<V>> = SortedMap[],
} {
  static fun mcreate(writes: SortedMap<Key, Array<File>>): mutable this {
    invariant(writes.isEmpty(), "TWriter should be created with an empty map");
    mutable static{}
  }

  mutable fun setArray(key: K, values: Array<V>): void {
    this.!writes[key] = values;
  }

  mutable fun set(key: K, value: V): void {
    this.!writes[key] = Array[value];
  }

  mutable fun append(key: K, value: V): void {
    this.writes.maybeGet(key) match {
    | Some(values) -> this.!writes[key] = values.concat(Array[value])
    | None() -> this.!writes[key] = Array[value]
    }
  }

  mutable fun remove(key: K): void {
    this.!writes[key] = Array[];
  }
}

/*****************************************************************************/
/* Typed version of the Reducer. */
/*****************************************************************************/

class EReducer<V2, V3: File>{
  type: File ~> V3,
  canReset: Bool,
  init: (mutable Iterator<V2> ~> Array<V3>),
  update: (Array<V3>, Array<V2>, Array<V2>) ~> ?Array<V3>,
}

/*****************************************************************************/
/* A few predefined Reducers. */
/*****************************************************************************/

fun countReducer(): EReducer<_, IntFile> {
  EReducer{
    type => IntFile::type,
    canReset => false,
    init => iter ~> {
      count = 0;
      for (_ in iter) {
        !count = count + 1;
      };
      Array[IntFile(count)]
    },
    update => (state, old, new) ~> {
      count = state[0].value;
      for (_ in old) {
        !count = count - 1;
      };
      for (_ in new) {
        !count = count + 1;
      };
      Some(Array[IntFile(count)])
    },
  };
}

fun sumReducer(): EReducer<IntFile, IntFile> {
  EReducer{
    type => IntFile::type,
    canReset => false,
    init => iter ~> {
      sum = 0;
      for (x in iter) {
        !sum = sum + x.value;
      };
      Array[IntFile(sum)]
    },
    update => (state, old, new) ~> {
      sum = state[0].value;
      for (x in old) {
        !sum = sum - x.value;
      };
      for (x in new) {
        !sum = sum + x.value;
      };
      Some(Array[IntFile(sum)])
    },
  };
}

fun minReducer(): EReducer<IntFile, IntFile> {
  EReducer{
    type => IntFile::type,
    canReset => true,
    init => iter ~> {
      min: ?Int = None();
      for (x in iter) {
        if (min.isNone() || x.value < min.fromSome()) !min = Some(x.value);
      };
      min match {
      | Some(x) -> Array[IntFile(x)]
      | None() -> Array[]
      }
    },
    update => (state, old, new) ~> {
      min = state[0].value;
      for (x in new) {
        if (x.value < min) !min = x.value;
      };
      for (x in old) {
        if (x.value <= min) return None()
      };
      Some(Array[IntFile(min)])
    },
  }
}

fun maxReducer(): EReducer<IntFile, IntFile> {
  EReducer{
    type => IntFile::type,
    canReset => true,
    init => iter ~> {
      max: ?Int = None();
      for (x in iter) {
        if (max.isNone() || x.value > max.fromSome()) !max = Some(x.value);
      };
      max match {
      | Some(x) -> Array[IntFile(x)]
      | None() -> Array[]
      }
    },
    update => (state, old, new) ~> {
      max = state[0].value;
      for (x in new) {
        if (x.value > max) !max = x.value;
      };
      for (x in old) {
        if (x.value >= max) return None()
      };
      Some(Array[IntFile(max)])
    },
  }
}

/*****************************************************************************/
/* The preferred way of accessing the file-system. */
/*****************************************************************************/

base class Handle<K: Key, +V: File>(
  keyType: Key ~> K,
  type: File ~> V,
  dirName: DirName,
) {
  fun getArray(context: mutable Context, key: K): Array<V> {
    dir = context.unsafeGetDir(this.dirName);
    dir.getArray(context, key).map(this.type)
  }

  fun get(context: mutable Context, key: K): V {
    values = this.getArray(context, key);
    if (values.size() >= 2) {
      msg = `Error: Duplicate keys '${key}' in '${this.dirName}'`;
      print_error(msg);
      invariant_violation(msg);
    };
    if (values.size() == 0) {
      msg = `Error: No value for keys '${key}' in '${this.dirName}'`;
      print_error(msg);
      invariant_violation(msg);
    };
    values[0]
  }

  fun maybeGet(context: mutable Context, key: K): ?V {
    values = this.getArray(context, key);
    if (values.size() == 0) return None();
    Some(values[0])
  }

  fun unsafeGetArray(context: readonly Context, key: K): Array<V> {
    dir = context.unsafeGetDir(this.dirName);
    dir.getArrayRaw(key).map(this.type)
  }

  fun unsafeGet(context: readonly Context, key: K): V {
    arr = this.unsafeGetArray(context, key);
    invariant(arr.size() == 1);
    arr[0]
  }

  fun unsafeMaybeGet(context: readonly Context, key: K): ?V {
    values = this.unsafeGetArray(context, key);
    if (values.size() == 0) return None();
    Some(values[0])
  }
}

/*****************************************************************************/
/* A lazy handle is updated "lazily", in other words, an entry is computed
 * only when someone tries to access it.
 */
/*****************************************************************************/

class LHandle<K: Key, +V: File> extends Handle<K, V> {
  static fun create(
    keyType: Key ~> K,
    type: File ~> V,
    context: mutable Context,
    dirName: DirName,
    f: (mutable Context, LHandle<K, V>, K) ~> Array<V>,
    collect: Bool = true,
  ): LHandle<K, V> {
    dir = LazyDir::create(
      context,
      dirName,
      (context, dirName, key) ~> {
        Some(f(context, LHandle(keyType, type, dirName), keyType(key)));
      },
      collect,
    );
    LHandle(keyType, type, dir.getDirName())
  }
}

/*****************************************************************************/
/* Eager handles. */
/*****************************************************************************/

type TMapFun<K, V, K2, V2> = (
  mutable Context,
  mutable TWriter<K2, V2>,
  K,
  mutable NonEmptyIterator<V>,
) ~> void;

class EHandle<K: Key, V: File> extends Handle<K, V> {
  private static fun genMultiMapReduce<K2: Key, V2: File, V3: File>(
    typeOutputKey: Key ~> K2,
    typeOutput: File ~> V3,
    context: mutable Context,
    parents: Array<(EHandle<K, V>, (TMapFun<K, V, K2, V2>, ?Array<KeyRange>))>,
    dirName: DirName,
    reducerOpt: ?IReducer = None(),
  ): EHandle<K2, V3> {
    dynParents = mutable Map[];
    parentSet = mutable Set[];
    for (parent in parents) {
      (parentHandle, parentData) = parent;
      (mapFun, rangeOpt) = parentData;
      typeInputKey = parentHandle.keyType;
      typeInput = parentHandle.type;
      parentName = parentHandle.dirName;
      dynamicMapFun = (context, writer, key, fileIter) ~> {
        FileIterator::create(fileIter) match {
        | EmptyFileIterator _ -> return void
        | iter @ NonEmptyIterator _ ->
          twriter = TWriter<K2, V2>::mcreate(writer.writes);
          mapFun(
            context,
            twriter,
            typeInputKey(key),
            iter.nonEmptyMap(typeInput),
          );
          writer.!writes = twriter.writes
        }
      };
      if (!parentSet.contains(parentName)) {
        parentSet.add(parentName);
        dynParents.set(parentName, mutable Vector[])
      };
      dynParents[parentName].push((dynamicMapFun, rangeOpt, None()))
    };
    fixedParents = FixedSingle::create(
      Vector::mcreateFromIterator(
        dynParents.items().map(kv -> (kv.i0, kv.i1.toArray())),
      ),
    );
    EagerDir::applyMany(context, fixedParents, dirName, reducerOpt);
    EHandle(typeOutputKey, typeOutput, dirName)
  }

  static fun multiMap<K2: Key, V2: File>(
    typeOutputKey: Key ~> K2,
    typeOutput: File ~> V2,
    context: mutable Context,
    parents: Array<(EHandle<K, V>, (TMapFun<K, V, K2, V2>, ?Array<KeyRange>))>,
    dirName: DirName,
  ): EHandle<K2, V2> {
    static::genMultiMapReduce(
      typeOutputKey,
      typeOutput,
      context,
      parents,
      dirName,
      None(),
    )
  }

  static fun multiMapReduce<K2: Key, V2: File, V3: File>(
    typeOutputKey: Key ~> K2,
    typeOutput: File ~> V2,
    context: mutable Context,
    parents: Array<(EHandle<K, V>, (TMapFun<K, V, K2, V2>, ?Array<KeyRange>))>,
    dirName: DirName,
    reducer: EReducer<V2, V3>,
  ): EHandle<K2, V3> {
    static::genMultiMapReduce(
      typeOutputKey,
      reducer.type,
      context,
      parents,
      dirName,
      Some(
        IReducer{
          init => files ~> reducer.init(files.map(typeOutput)),
          update => (state, old, new) ~>
            reducer.update(
              state.map(reducer.type),
              old.map(typeOutput),
              new.map(typeOutput),
            ),
        },
      ),
    )
  }

  fun map<K2: Key, V2: File>(
    typeKey: Key ~> K2,
    type: File ~> V2,
    context: mutable Context,
    dirName: DirName,
    f: TMapFun<K, V, K2, V2>,
    rangeOpt: ?Array<KeyRange> = None(),
  ): EHandle<K2, V2> {
    static::multiMap(
      typeKey,
      type,
      context,
      Array[(this, (f, rangeOpt))],
      dirName,
    )
  }

  fun mapReduce<K2: Key, V2: File, V3: File>(
    typeKey: Key ~> K2,
    type: File ~> V2,
    context: mutable Context,
    dirName: DirName,
    f: TMapFun<K, V, K2, V2>,
    reducer: EReducer<V2, V3>,
    rangeOpt: ?Array<KeyRange> = None(),
  ): EHandle<K2, V3> {
    static::multiMapReduce(
      typeKey,
      type,
      context,
      Array[(this, (f, rangeOpt))],
      dirName,
      reducer,
    )
  }

  fun filter(
    context: mutable Context,
    childName: DirName,
    capacity: Int,
    f: (mutable Context, K, V) ~> Bool,
    fileSize: V ~> Int,
    removeFromFile: (V, Int) ~> V,
    rangesOpt: ?Array<KeyRange>,
  ): EHandle<K, V> {
    EagerFilter::create(
      context,
      this.dirName,
      childName,
      capacity,
      (file: File) ~> fileSize(this.type(file)),
      (file: File, n: Int) ~> removeFromFile(this.type(file), n),
      (context, key, file) ~> f(context, this.keyType(key), this.type(file)),
      rangesOpt,
    );
    EHandle(this.keyType, this.type, childName)
  }

  fun pre(context: mutable Context): ?EHandle<K, V> {
    context.pre(this.dirName).map(dir ~>
      EHandle(this.keyType, this.type, dir.getDirName())
    )
  }

  fun size(context: mutable Context): Int {
    context.getEagerDir(this.dirName).size(context)
  }

  fun isEmpty(context: mutable Context): Bool {
    context.getEagerDir(this.dirName).isEmpty(context)
  }

  fun writeArray(context: mutable Context, key: K, values: Array<V>): void {
    dir = context.unsafeGetEagerDir(this.dirName);
    dir.writeArray(context, key, values);
  }

  fun items(
    context: mutable Context,
  ): mutable Iterator<(K, mutable Iterator<V>)> {
    dir = context.unsafeGetEagerDir(this.dirName);
    dir.getIterator(context).map(kv ->
      (this.keyType(kv.i0), kv.i1.map(this.type))
    )
  }

  fun getIter(context: mutable Context, key: K): mutable Iterator<V> {
    dir = context.unsafeGetDir(this.dirName);
    dir.getIter(context, key).map(this.type)
  }

  fun containsKey(context: mutable Context, key: K): Bool {
    this.getArray(context, key).size() > 0
  }
}

module end;
