/*****************************************************************************/
/* Lazy directories. */
/*****************************************************************************/
module SKStore;

class CyclicExn(Key) extends Exception, File {
  fun toString(): String {
    inspect(this).toString()
  }
}

base class LazyResult {
  children =
  | LDefined(Array<File>, Array<Path>)
  | LRemoved(Array<Path>)
  | LCycle()
  | LAbsent()
}

class LazyDir protected {
  private data: SortedMap<Key, LazyResult> = SortedMap[],
  private lazyFun: (mutable Context, DirName, Key) ~> ?Array<File>,
  private collect: Bool,
} extends Dir {
  static fun create(
    context: mutable Context,
    dirName: DirName,
    lazyFun: (mutable Context, DirName, Key) ~> ?Array<File>,
    collect: Bool = true,
  ): Dir {
    context.maybeGetLazyDir(dirName) match {
    | Some(ldir) if (native_eq(ldir.lazyFun, lazyFun) == 0) ->
      if (context.debugMode) {
        print_string(`REUSING: ${dirName}`);
      };
      ldir
    | _ ->
      time = context.timeStamp();
      newDir = LazyDir{
        timeStack => TimeStack::create(context, time),
        dirName,
        lazyFun,
        collect,
      };
      context.updateDirtyReaders(Path::dirTag(dirName));
      context.setDir(newDir);
      newDir
    }
  }

  fun removeKeys(keys: SortedSet<Key>): this {
    data = this.data;
    for (key in keys) {
      data.maybeGet(key) match {
      | Some(LDefined(_, reads)) -> !data[key] = LRemoved(reads)
      | _ -> void
      }
    };
    this with {data}
  }

  fun keys(): SortedSet<Key> {
    keys = SortedSet[];
    for (newKey => value in this.data) {
      if (value is LDefined _) {
        !keys = keys.set(newKey);
      };
    };
    keys
  }

  fun getArrayRaw(key: Key): Array<File> {
    this.data.maybeGet(key) match {
    | Some(LDefined(arr, _)) -> arr
    | _ -> Array[]
    }
  }

  fun update(
    context: mutable Context,
    dirtyReadersOpt: ?SortedMap<DirName, SortedSet<Key>>,
  ): void {
    dirtyReadersOpt match {
    | None() -> void
    | Some(dirtyReaders) ->
      for (dirtyReaderDirName => dirtyReaderKeys in dirtyReaders) {
        for (key in dirtyReaderKeys) {
          oldValue = this.data.maybeGet(key);
          !this.data = this.data.remove(key);
          context.updateDirtyReaders(Path::create(dirtyReaderDirName, key));
          oldValue match {
          | Some(LDefined(_, reads))
          | Some(LRemoved(reads)) ->
            arrow = ArrowKey{
              parentName => this.dirName,
              childName => this.dirName,
              key,
            };
            context.removeDeps(arrow, reads.iterator())
          | _ -> void
          }
        };
      }
    };

    context.setDir(this);
  }

  private fun doGet(context: mutable Context, key: Key): LazyResult {
    dirName = this.dirName;

    dir = context.unsafeGetLazyDir(dirName);
    !dir.data[key] = LCycle();
    context.setDir(dir);

    readsCopy = context.reads;
    context.!reads = SortedSet[];

    resultOpt = try {
      this.lazyFun(context, dirName, key)
    } catch {
    | exn ->
      !dir = context.unsafeGetLazyDir(dirName);
      !dir.data[key] = LAbsent();
      context.setDir(dir);
      context.!reads = readsCopy;
      throw exn
    };

    result = resultOpt match {
    | None() -> LAbsent()
    | Some(x) -> LDefined(x, context.reads.toArray())
    };

    arrowKey = ArrowKey{parentName => dirName, childName => dirName, key};
    context.updateNewDeps(arrowKey, context.reads);

    !dir = context.unsafeGetLazyDir(dirName);
    !dir.data[key] = result;
    context.setDir(dir);

    if (context.debugMode) {
      print_string(`WRITTEN LAZY:  ${dirName}${key}`);
    };
    context.!reads = readsCopy;
    result
  }

  fun unsafeGetArray(
    context: mutable Context,
    key: Key,
    throwOnCycle: Bool = true,
  ): Array<File> {
    if (this.collect) {
      context.addLazyGet(this.dirName, key)
    };
    lazyResult = this.data.maybeGet(key) match {
    | Some(LCycle()) if (throwOnCycle) -> throw CyclicExn(key)
    | x @ None()
    | x @ Some(LRemoved _)
    | x @ Some(LAbsent()) ->
      if (x is Some(LRemoved _) && context.debugMode) {
        print_string(`LRemoved: ${this.dirName}${key}`)
      };
      arrow = ArrowKey{
        parentName => this.dirName,
        childName => this.dirName,
        key,
      };
      context.enter(arrow, this.timeStack);
      res = this.doGet(context, key);
      context.leave(arrow);
      res
    | Some(x) -> x
    };
    lazyResult match {
    | LDefined(arr, _reads) -> arr
    | _ -> Array[]
    }
  }

  fun getArray(context: mutable Context, key: Key): Array<File> {
    path = Path::create(this.dirName, key);
    context.addRead(path);
    this.unsafeGetArray(context, key, true)
  }

  fun getIter(context: mutable Context, key: Key): mutable Iterator<File> {
    this.getArray(context, key).iterator()
  }
}

module end;
