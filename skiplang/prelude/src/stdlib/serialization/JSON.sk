/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// JSON (JavaScript Object Notation) is a lightweight data-interchange format.

// The source of truth is: https://tools.ietf.org/html/rfc7159
// A simple introduction is at http://json.org.
module JSON;

/**
 * JSON.Array[
 *   JSON.Object[
 *     "key" => JSON.String("value")
 *   ],
 *   JSON.Null(),
 *   JSON.Bool(false),
 *   JSON.IntNumber(5),
 *   JSON.FloatNumber(2.5)
 * ].encode() -> [{"key": "value"}, null, false, 5, 2.5]
 *
 * decode("[1]") -> JSON.Array[JSON.IntNumber(1)]
 */
base class Value uses Show {
  fun toString(): .String {
    vec = mutable Vector[];
    this.writeToStream(vec.push);
    vec.join("")
  }

  fun set(name: .String, value: JSON.Value): JSON.Object
  | JSON.Object(fields) ->
    next_fields = fields.clone();
    next_fields![name] = value;
    JSON.Object(next_fields.chill())
  | _ -> throw JSONSetNonObjectError()

  fun encode(): .String {
    this.toString()
  }

  fun print(space: Int = -1): void {
    this.writeToStream(print_raw, space)
  }

  fun writeToStream(
    write: .String -> void,
    space: Int = -1,
    depth: Int = 0,
  ): void;

  fun expectObject(): JSON.Object
  | x @ JSON.Object _ -> x
  | _ -> throw JSONValueExpectedError("Object")

  fun expectMap(): Map<.String, JSON.Value> {
    this.expectObject().value;
  }

  fun expectArray(): JSON.Array
  | x @ JSON.Array _ -> x
  | _ -> throw JSONValueExpectedError("Array")

  fun expectVector(): Vector<JSON.Value> {
    this.expectArray().value;
  }

  fun expectInt(): Int
  | JSON.IntNumber(x) -> x
  | _ -> throw JSONValueExpectedError("Int")

  fun expectFloat(): Float
  | JSON.FloatNumber(x) -> x
  | _ -> throw JSONValueExpectedError("Float")

  fun expectString(): .String
  | JSON.String(x) -> x
  | _ -> throw JSONValueExpectedError("String")

  fun expectBool(): .Bool
  | JSON.Bool(x) -> x
  | _ -> throw JSONValueExpectedError("Bool")
}

private fun requiresEscape(ch: Char): .Bool {
  !Chars.isPrintableAscii(ch) || (ch == '"') || (ch == '\\');
}

private fun charToString(ch: Char): .String {
  if (!requiresEscape(ch)) {
    ch.toString()
  } else {
    addCode = (chars, code) -> {
      chars.push('\\');
      chars.push('u');
      Chars.intToHexDigits(code, 4).each(chars.push);
    };
    ch match {
    | '\\' -> "\\\\"
    | '"' -> "\\\""
    | '\b' -> "\\b"
    | '\f' -> "\\f"
    | '\n' -> "\\n"
    | '\r' -> "\\r"
    | '\t' -> "\\t"
    | _ if (Chars.isBasicMultiLingualPlane(ch)) ->
      chars = mutable Vector<Char>[];
      addCode(chars, ch.code());
      .String::fromChars(chars.toArray())
    | _ ->
      chars = mutable Vector<Char>[];
      (high, low) = Chars.toUTF16SurrogatePair(ch);
      addCode(chars, high);
      addCode(chars, low);
      .String::fromChars(chars.toArray())
    };
  }
}

private fun writeStringValue(write: .String -> void, s: .String): void {
  target = (s.search(requiresEscape)) match {
  | None() -> s
  | Some _ ->
    strings = mutable Vector<.String>[];
    s.each(ch -> {
      strings.push(charToString(ch))
    });
    strings.join("")
  };
  write('"'.toString());
  write(target);
  write('"'.toString())
}

class String(value: .String) extends JSON.Value {
  fun writeToStream(
    write: .String -> void,
    _space: Int = -1,
    _depth: Int = 0,
  ): void {
    writeStringValue(write, this.value);
  }
}

base class Number extends JSON.Value

class IntNumber(value: Int) extends JSON.Number {
  fun writeToStream(
    write: .String -> void,
    _space: Int = -1,
    _depth: Int = 0,
  ): void {
    write(this.value.toString())
  }

  fun asInt(): Int {
    this.value
  }
}

class FloatNumber(value: Float) extends JSON.Number {
  fun writeToStream(
    write: .String -> void,
    _space: Int = -1,
    _depth: Int = 0,
  ): void {
    write(this.value.toString())
  }
}

class Bool(value: .Bool) extends JSON.Value {
  fun writeToStream(
    write: .String -> void,
    _space: Int = -1,
    _depth: Int = 0,
  ): void {
    write(this.value.toString())
  }
}

class Null() extends JSON.Value {
  fun writeToStream(
    write: .String -> void,
    _space: Int = -1,
    _depth: Int = 0,
  ): void {
    write("null")
  }
}

private fun indent(write: .String -> void, nspaces: Int): void {
  istr = " ".repeat(nspaces);
  write(istr)
}

class KeyNotFoundError(key: .String) extends Serialization.SerializationError {
  fun getMessage(): .String {
    "Key '" + this.key + "' not found";
  }
  fun toString(): .String {
    `KeyNotFoundError: ${this.getMessage()}`
  }
}

class Object(value: Map<.String, JSON.Value>) extends JSON.Value {
  fun get(key: .String): JSON.Value {
    this.maybeGet(key) match {
    | None() -> throw KeyNotFoundError(key)
    | Some(result) -> result
    }
  }

  fun maybeGet(key: .String): ?JSON.Value {
    this.value.maybeGet(key);
  }

  fun getObject(key: .String): JSON.Object {
    this.get(key).expectObject();
  }

  fun getArray(key: .String): JSON.Array {
    this.get(key).expectArray();
  }

  fun getString(key: .String): .String {
    this.get(key).expectString();
  }

  fun getInt(key: .String): .Int {
    this.get(key).expectInt();
  }

  fun getFloat(key: .String): .Float {
    this.get(key).expectFloat();
  }

  fun getBool(key: .String): .Bool {
    this.get(key).expectBool();
  }

  fun maybeGetObject(key: .String): ?JSON.Object {
    this.maybeGet(key).map(value -> value.expectObject());
  }

  fun maybeGetArray(key: .String): ?JSON.Array {
    this.maybeGet(key).map(value -> value.expectArray());
  }

  fun maybeGetString(key: .String): ?.String {
    this.maybeGet(key).map(value -> value.expectString());
  }

  fun maybeGetInt(key: .String): ?.Int {
    this.maybeGet(key).map(value -> value.expectInt());
  }

  fun maybeGetFloat(key: .String): ?.Float {
    this.maybeGet(key).map(value -> value.expectFloat());
  }

  fun maybeGetBool(key: .String): ?.Bool {
    this.maybeGet(key).map(value -> value.expectBool());
  }

  fun writeToStream(
    write: .String -> void,
    space: Int = -1,
    depth: Int = 0,
  ): void {
    if (this.value.size() == 0) {
      write("{}")
    } else {
      write("{");
      is_first = mutable Ref(true);
      nd = depth + 1;
      this.value.each((key, value) -> {
        if (is_first.value) {
          is_first.!value = false
        } else {
          write(", ")
        };

        if (space >= 0) {
          write("\n");
          indent(write, space * nd)
        };
        writeStringValue(write, key);
        write(": ");
        value.writeToStream(write, space, nd)
      });
      if (space >= 0) {
        write("\n");
        indent(write, space * depth)
      };
      write("}")
    }
  }

  static fun createFromItems<I: Sequence<(.String, JSON.Value)>>(
    items: I,
  ): this {
    JSON.Object(items.collect(Map))
  }

  static fun createFromIterator<
    J: JSON.Value,
    I: mutable Iterator<(.String, J)>,
  >(
    items: I,
  ): this {
    map = mutable Map[];
    items.each(kv -> {
      (k, v) = kv;
      map.set(k, v);
    });
    JSON.Object(map.chill())
  }
}

class Array(value: Vector<JSON.Value>) extends JSON.Value {
  fun writeToStream(
    write: .String -> void,
    space: Int = -1,
    depth: Int = 0,
  ): void {
    if (this.value.size() == 0) {
      write("[]")
    } else {
      write("[");
      is_first = mutable Ref(true);
      nd = depth + 1;
      this.value.each(value -> {
        if (is_first.value) {
          is_first.!value = false
        } else {
          write(", ")
        };
        if (space >= 0) {
          write("\n");
          indent(write, space * nd)
        };
        value.writeToStream(write, space, nd)
      });
      if (space >= 0) {
        write("\n");
        indent(write, space * depth)
      };
      write("]")
    }
  }

  static fun createFromItems<I: Sequence<JSON.Value>>(items: I): this {
    JSON.Array(items.collect(Vector))
  }

  static fun createFromIterator<J: JSON.Value, I: mutable Iterator<J>>(
    items: I,
  ): this {
    vector = mutable Vector[];
    items.each(vector.push);
    JSON.Array(vector.chill())
  }
}

class InvalidJSONError(
  position: Position,
  message: .String,
) extends Serialization.SerializationError {
  fun getMessage(): .String {
    `${this.position}: Invalid JSON. ${this.message}`;
  }
  fun toString(): .String {
    `InvalidJSONError: ${this.getMessage()}`
  }
}

private fun reportInvalidJSON(
  iter: readonly Lexer.LexingPosition,
  message: .String,
): _ {
  throw InvalidJSONError(iter.position, message);
}

mutable base class JSONBuilder<Value, Field, Fields> {
  mutable fun emptyObject(): Value;
  mutable fun makeField(.String, Value): Field;
  mutable fun makeFields(.Array<Field>): Fields;
  mutable fun makeObject(Fields): Value;
  mutable fun makeArray(fields: Vector<Value>): Value;
  mutable fun makeString(.String): Value;
  mutable fun makeBool(.Bool): Value;
  mutable fun makeNull(): Value;
  mutable fun makeInt(Int): Value;
  mutable fun makeFloat(Float): Value;
}

mutable class DefaultJSONBuilder{} extends
  JSONBuilder<JSON.Value, (.String, JSON.Value), Map<.String, JSON.Value>>,
{
  mutable fun emptyObject(): JSON.Value {
    JSON.Object(Map[])
  }

  mutable fun makeField(
    fieldName: .String,
    value: JSON.Value,
  ): (.String, JSON.Value) {
    (fieldName, value)
  }
  mutable fun makeFields(
    fields: .Array<(.String, JSON.Value)>,
  ): Map<.String, JSON.Value> {
    map = mutable Map[];
    for (x in fields) {
      map![x.i0] = x.i1
    };
    map.chill()
  }

  mutable fun makeObject(fields: Map<.String, JSON.Value>): JSON.Value {
    JSON.Object(fields)
  }

  mutable fun makeArray(fields: Vector<JSON.Value>): JSON.Value {
    JSON.Array(fields)
  }

  mutable fun makeString(s: .String): JSON.Value {
    JSON.String(s)
  }
  mutable fun makeBool(b: .Bool): Value {
    JSON.Bool(b)
  }
  mutable fun makeNull(): Value {
    JSON.Null()
  }
  mutable fun makeInt(n: Int): Value {
    JSON.IntNumber(n)
  }
  mutable fun makeFloat(f: Float): Value {
    JSON.FloatNumber(f)
  }
}

fun decode(value: .String): JSON.Value {
  genericDecode(value, mutable DefaultJSONBuilder{})
}

fun genericDecode<Value, Field, Fields>(
  value: .String,
  builder: mutable JSONBuilder<Value, Field, Fields>,
): Value {
  iter = Lexer.LexingPosition::create(value);
  result = decodeValue(iter, builder);
  eatWhitespace(iter);
  if (!iter.atEnd()) {
    reportInvalidJSON(iter, "Expected end of JSON string.");
  };
  result
}

private fun decodeValue<Value, Field, Fields>(
  iter: mutable Lexer.LexingPosition,
  builder: mutable JSONBuilder<Value, Field, Fields>,
): Value {
  eatWhitespace(iter);
  c = iter.peek();
  c match {
  | 'n' ->
    eatString(iter, "null");
    builder.makeNull()
  | 't' ->
    eatString(iter, "true");
    builder.makeBool(true)
  | 'f' ->
    eatString(iter, "false");
    builder.makeBool(false)
  | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '-' ->
    decodeNumber(iter, builder)
  | '"' -> builder.makeString(decodeString(iter))
  | '{' -> decodeObject(iter, builder)
  | '[' -> builder.makeArray(decodeArray(iter, builder))
  | _ -> reportInvalidJSON(iter, `Invalid JSON start character '${c}'.`)
  }
}

private fun skipDigits(iter: mutable Lexer.LexingPosition): void {
  if (!Chars.isDigit(iter.peek())) {
    reportInvalidJSON(iter, "Must have at least one digit");
  };
  iter.advance();
  while (Chars.isDigit(iter.peek())) iter.advance();
}

private fun skipFractionOpt(iter: mutable Lexer.LexingPosition): .Bool {
  (eatOpt(iter, '.')) &&
    {
      skipDigits(iter);
      true
    }
}

private fun skipSignOpt(iter: mutable Lexer.LexingPosition): void {
  iter.peek() match {
  | '+' | '-' -> iter.advance()
  | _ -> void
  }
}

private fun skipExponentOpt(iter: mutable Lexer.LexingPosition): .Bool {
  iter.peek() match {
  | 'e' | 'E' ->
    iter.advance();
    skipSignOpt(iter);
    skipDigits(iter);
    true
  | _ -> false
  }
}

private fun decodeNumber<Value, Field, Fields>(
  iter: mutable Lexer.LexingPosition,
  builder: mutable JSONBuilder<Value, Field, Fields>,
): Value {
  start = iter.clone();
  skipSignOpt(iter);
  skipDigits(iter);
  hadFraction = skipFractionOpt(iter);
  hadExponent = skipExponentOpt(iter);
  value = start.getText(iter);
  try {
    if (value == "-0") {
      builder.makeFloat(-0.0);
    } else if (!hadFraction && !hadExponent) {
      builder.makeInt(value.toInt())
    } else {
      builder.makeFloat(value.toFloat())
    }
  } catch {
  | ex -> reportInvalidJSON(start, "Bad number format: " + ex.getMessage())
  }
}

private fun eatHexDigits(iter: mutable Lexer.LexingPosition): Int {
  digitsStart = iter.clone();
  for (_ in Range(0, 4)) eatHexDigit(iter);
  Chars.hexDigitsToInt(digitsStart.getText(iter));
}

private fun decodeString(iter: mutable Lexer.LexingPosition): .String {
  eat(iter, '"');
  result = mutable Vector[];
  while ({
    iter.peek() match {
    | '\\' ->
      iter.advance();
      iter.peek() match {
      | '"' ->
        result.push('"');
        iter.advance()
      | '\\' ->
        result.push('\\');
        iter.advance()
      | '/' ->
        result.push('/');
        iter.advance()
      | 'b' ->
        result.push('\b');
        iter.advance()
      | 'f' ->
        result.push('\f');
        iter.advance()
      | 'n' ->
        result.push('\n');
        iter.advance()
      | 'r' ->
        result.push('\r');
        iter.advance()
      | 't' ->
        result.push('\t');
        iter.advance()
      | 'u' ->
        iter.advance();
        digitsStart = iter.clone();
        leadingCode = eatHexDigits(iter);
        if (!Chars.isSurrogate(leadingCode)) {
          result.push(Char::fromCode(leadingCode));
        } else if (Chars.isLowSurrogate(leadingCode)) {
          reportInvalidJSON(
            digitsStart,
            "Trailing surrogate without leading surrogate",
          );
        } else {
          eatString(iter, "\\u");
          trailingStart = iter.clone();
          trailingCode = eatHexDigits(iter);
          if (!Chars.isLowSurrogate(trailingCode)) {
            reportInvalidJSON(trailingStart, "Bad low surrogate");
          };
          result.push(Chars.fromSurrogatePair(leadingCode, trailingCode));
        }
      | _ -> reportInvalidJSON(iter, "Invalid escape sequence in JSON string")
      };
      true
    | '"' ->
      iter.advance();
      false
    | ch if (Chars.isControlC0(ch)) ->
      reportInvalidJSON(
        iter,
        "Control C0 character in JSON string: " + ch.code(),
      )
    | _ ->
      result.push(iter.next());
      true
    }
  }) void;
  .String::fromChars(result.toArray());
}

private fun decodeObject<Value, Field, Fields>(
  iter: mutable Lexer.LexingPosition,
  builder: mutable JSONBuilder<Value, Field, Fields>,
): Value {
  eat(iter, '{');
  eatWhitespace(iter);
  if (eatOpt(iter, '}')) {
    builder.emptyObject();
  } else {
    fields = mutable Vector[];
    decodeObjectFields(iter, fields, mutable Set[], builder);
    builder.makeObject(
      builder.makeFields(
        fields.map(x -> builder.makeField(x.i0, x.i1)).toArray(),
      ),
    );
  }
}

private fun decodeObjectFields<Value, Field, Fields>(
  iter: mutable Lexer.LexingPosition,
  items: mutable Vector<(.String, Value)>,
  fieldSet: mutable Set<.String>,
  builder: mutable JSONBuilder<Value, Field, Fields>,
): void {
  fieldStart = iter.clone();
  s = decodeString(iter);
  eatWhitespace(iter);
  eat(iter, ':');
  v = decodeValue(iter, builder);
  if (fieldSet.contains(s)) {
    reportInvalidJSON(fieldStart, `Duplicate object key '${s}'.`);
  };
  fieldSet.insert(s);
  items.push((s, v));
  eatWhitespace(iter);
  iter.peek() match {
  | '}' -> iter.advance()
  | ',' ->
    iter.advance();
    eatWhitespace(iter);
    decodeObjectFields(iter, items, fieldSet, builder)
  | c ->
    reportInvalidJSON(
      iter,
      `Unexpected character '${charToString(
        c,
      )}' in JSON Object. Expected ',' or '}'.`,
    )
  }
}

private fun decodeArray<Value, Field, Fields>(
  iter: mutable Lexer.LexingPosition,
  builder: mutable JSONBuilder<Value, Field, Fields>,
): Vector<Value> {
  eat(iter, '[');
  eatWhitespace(iter);
  if (eatOpt(iter, ']')) {
    Vector[]
  } else {
    vector = mutable Vector[];
    decodeArrayElements(iter, vector, builder);
    vector.chill()
  }
}

private fun decodeArrayElements<Value, Field, Fields>(
  iter: mutable Lexer.LexingPosition,
  vector: mutable Vector<Value>,
  builder: mutable JSONBuilder<Value, Field, Fields>,
): void {
  v = decodeValue(iter, builder);
  vector.push(v);
  eatWhitespace(iter);
  iter.peek() match {
  | ']' -> iter.advance()
  | ',' ->
    iter.advance();
    eatWhitespace(iter);
    decodeArrayElements(iter, vector, builder)
  | c ->
    reportInvalidJSON(
      iter,
      `Unexpected character '${charToString(
        c,
      )}' in JSON Array. Expected ',' or ']'.`,
    )
  }
}

private fun eatString(
  iter: mutable Lexer.LexingPosition,
  value: .String,
): void {
  value.each(ch -> eat(iter, ch));
}

private fun eat(iter: mutable Lexer.LexingPosition, ch: Char): void {
  if (iter.atEnd()) {
    reportInvalidJSON(iter, `Unexpected end of JSON. Expected '${ch}'.`);
  } else if (iter.peek() != ch) {
    reportInvalidJSON(
      iter,
      `Unexpected character '${charToString(
        iter.peek(),
      )}' in JSON. Expected '${ch}'.`,
    );
  };
  iter.advance();
}

private fun eatOpt(iter: mutable Lexer.LexingPosition, ch: Char): .Bool {
  (iter.peek() == ch) &&
    {
      iter.advance();
      true
    }
}

private fun eatHexDigit(iter: mutable Lexer.LexingPosition): void {
  if (!Chars.isHexDigit(iter.peek())) {
    reportInvalidJSON(iter, "Expected hex digit");
  };
  iter.advance();
}

private fun eatWhitespace(iter: mutable Lexer.LexingPosition): void {
  loop {
    iter.peek() match {
    | ' ' | '\n' -> iter.advance()
    | _ -> break void
    }
  }
}

base class JSONError() extends Serialization.SerializationError

class JSONValueExpectedError(expected: .String) extends JSONError {
  fun getMessage(): .String {
    `expect${this.expected} called on a non-${this.expected} type.`
  }
  fun toString(): .String {
    `JSONValueExpectedError: ${this.getMessage()}`
  }
}

class JSONSetNonObjectError() extends JSONError {
  fun getMessage(): .String {
    `Set only available on Object values.`
  }
  fun toString(): .String {
    `JSONSetNonObjectError: ${this.getMessage()}`
  }
}

private mutable base class Formatter() {
  mutable fun writeRaw(value: .String): void;
  mutable fun writeComma(): void;
  mutable fun writeColon(): void;
  mutable fun writeSquareOpen(): void;
  mutable fun writeSquareClose(): void;
  mutable fun writeCurlyOpen(): void;
  mutable fun writeCurlyClose(): void;
}

mutable class CompactFormatter(
  writeToStream: .String -> void,
) extends Formatter {
  mutable fun writeRaw(value: .String): void {
    this.writeToStream(value)
  }
  mutable fun writeComma(): void {
    this.writeToStream(", ");
  }
  mutable fun writeColon(): void {
    this.writeToStream(": ")
  }
  mutable fun writeSquareOpen(): void {
    this.writeToStream("[");
  }
  mutable fun writeSquareClose(): void {
    this.writeToStream("]");
  }
  mutable fun writeCurlyOpen(): void {
    this.writeToStream("{");
  }
  mutable fun writeCurlyClose(): void {
    this.writeToStream("}");
  }
}

mutable class PrettyFormatter(
  writeToStream: .String -> void,
  space: Int = 2,
  private mutable depth: Int = 0,
) extends Formatter {
  private mutable fun writeIndent(): void {
    this.writeToStream(
      Range(0, this.depth * this.space).map((_) -> " ").join(""),
    );
  }
  private mutable fun indent(): void {
    this.!depth = this.depth + 1
  }
  private mutable fun outdent(): void {
    invariant(this.depth > 0);
    this.!depth = this.depth - 1
  }
  mutable fun writeRaw(value: .String): void {
    this.writeToStream(value)
  }
  mutable fun writeComma(): void {
    this.writeToStream(",\n");
    this.writeIndent();
  }
  mutable fun writeColon(): void {
    this.writeToStream(": ")
  }
  mutable fun writeSquareOpen(): void {
    this.writeToStream("[\n");
    this.indent();
    this.writeIndent();
  }
  mutable fun writeSquareClose(): void {
    this.outdent();
    this.writeToStream("\n");
    this.writeIndent();
    this.writeToStream("]");
  }
  mutable fun writeCurlyOpen(): void {
    this.writeToStream("{\n");
    this.indent();
    this.writeIndent();
  }
  mutable fun writeCurlyClose(): void {
    this.outdent();
    this.writeToStream("\n");
    this.writeIndent();
    this.writeToStream("}");
  }
}

fun serialize<T, S: Serialization.Serializer<T>>(
  value: T,
  serializer: S,
  isPretty: .Bool = false,
): Result<.String, Serialization.SerializationError> {
  Format::serialize(value, serializer, isPretty)
}

fun streamSerialize<T, S: Serialization.Serializer<T>>(
  value: T,
  serializer: S,
  write: .String -> void,
  isPretty: .Bool = false,
): Result<void, Serialization.SerializationError> {
  Format::streamSerialize(value, serializer, write, isPretty)
}

fun deserialize<T, S: Serialization.Serializer<T>>(
  data: .String,
  serializer: S,
): Result<T, Serialization.SerializationError> {
  Format::deserialize(data, serializer)
}

fun streamDeserialize<T, S: Serialization.Serializer<T>>(
  data: mutable Lexer.LexingPosition,
  serializer: S,
): Result<T, Serialization.SerializationError> {
  Format::streamDeserialize(data, serializer)
}

module end;
