/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module SortedSet;

// Use SortedMap for inner as iteration must be in order.
class .SortedSet<+T: Orderable>(
  inner: SortedMap<T, void>,
) uses  // extends Sequence<T>
  IntoIterator<T>,
  FromIterator<T>,
  Show[T: readonly Show],
  Hashable[T: Hashable],
  Equality,
{
  fun isEmpty(): Bool {
    this.inner.isEmpty()
  }

  fun contains<U: Orderable>[T: U](s: U): Bool {
    this.inner.containsKey(s)
  }

  fun add<U: Orderable>[T: U](s: U): SortedSet<U> {
    SortedSet(this.inner.add(s, void))
  }

  fun set<U: Orderable>[T: U](s: U): SortedSet<U> {
    SortedSet(this.inner.set(s, void))
  }

  fun remove<U: Orderable>[T: U](s: U): SortedSet<U> {
    !this.inner=.remove(s);
    this
  }

  fun min(): ?T {
    this.inner.minimum().map(x -> x.i0)
  }

  fun max(): ?T {
    this.inner.maximum().map(x -> x.i0)
  }

  static fun create(): this {
    static(SortedMap::create())
  }

  static fun createFromIterator<C: mutable Iterator<T>>(items: C): this {
    static(SortedMap::createFromIterator(items.map(i -> (i, void))))
  }

  static fun createFromItems<C: readonly Sequence<T>>(items: C): this {
    static(items.foldl((map, i) -> map.set(i, void), SortedMap[]))
  }

  fun ==<U: Orderable>[T: U](other: readonly SortedSet<U>): Bool {
    this.inner == other.inner
  }

  fun !=<U: Orderable>[T: U](other: readonly SortedSet<U>): Bool {
    this.inner != other.inner
  }

  fun toString[T: readonly Show](): String {
    "SortedSet[" + this.collect(Vector).join(", ") + "]"
  }

  fun hash[T: Hashable](): Int {
    this.inner.hash()
  }

  fun inspect(): Inspect {
    InspectVector("Set", this.toArray().map(e -> inspect(e)))
  }

  fun toArray(): Array<T> {
    if (this.isEmpty()) Array[] else this.collect(Array)
  }

  fun each(f: T -> void): void {
    this.inner.keys().each(f)
  }

  fun find(p: T -> Bool): ?T {
    this.inner.keys().find(p)
  }

  fun reduce<R>(f: (R, T) -> R, b: R): R {
    this.inner.reduce((acc, k, _v) -> f(acc, k), b)
  }

  fun union<U: Orderable>[T: U](other: SortedSet<U>): SortedSet<U> {
    SortedSet(this.inner.merge(other.inner))
  }

  fun intersection<U: Orderable>[T: U](other: SortedSet<U>): SortedSet<U> {
    this.inner.keys().filter(k -> other.contains((k : U))) |>
      static::createFromIterator
  }

  fun difference<U: Orderable>[T: U](other: SortedSet<U>): SortedSet<U> {
    other.reduce(
      (result, element) -> result.remove(element),
      (this : SortedSet<U>),
    )
  }

  fun size(): Int {
    this.inner.size()
  }

  fun values(): mutable Iterator<T> {
    this.inner.keys()
  }

  fun iterator(): mutable Iterator<T> {
    this.values()
  }

  // # Composition
  // Methods for creating a new sequence that represents the results of applying
  // an operation to the items of this sequence.

  // Returns a new sequence representing the results of calling the selection
  // function on each element of this sequence.
  @synonym("select")
  @synonym("project")
  fun map<U: Orderable>(f: T -> U): SortedSet<U> {
    SortedSet(this.inner.mapItems((k, _void) -> (f(k), void)))
  }

  // Similar to map, but calls the callback with (index, item) for each
  // item in this sequence.
  fun mapWithIndex<U: Orderable>(s: (Int, T) -> U): SortedSet<U> {
    index = -1;
    this.map(item -> {
      !index = index + 1;
      s(index, item)
    })
  }

  fun mapAcc<R, U: Orderable>(f: (R, T) -> (R, U), acc: R): (R, SortedSet<U>) {
    new = this.map(x -> {
      (!acc, y) = f(acc, x);
      y
    });
    (acc, new)
  }

  // Returns a new sequence representing all the elements of this sequence
  // for which the predicate returns true.
  @synonym("where")
  fun filter(p: T -> Bool): SortedSet<T> {
    !this.inner=.filter((k, _void) -> p(k));
    this
  }

  // Returns two new sequences, where the ith pair of the original sequence has
  // been split, with the first element of the pair at index i of the first
  // sequence, and respectively for the second element of each pair and the
  // second sequence
  fun unzip<T1: Orderable, T2: Orderable>[T: (T1, T2)](): (
    SortedSet<T1>,
    SortedSet<T2>,
  ) {
    this.unzipWith(id)
  }

  // Returns two new sequences, where the ith element of the original sequence
  // has transformed into a pair and then split, with the first element of the
  // pair at index i of the first sequence, and respectively for the second
  // element of each pair and the second sequence
  fun unzipWith<T1: Orderable, T2: Orderable>(
    f: T -> (T1, T2),
  ): (SortedSet<T1>, SortedSet<T2>) {
    sz = this.size();
    v0 = Vector::mcreate(sz);
    v1 = Vector::mcreate(sz);
    for (x in this) {
      p = f(x);
      v0.push(p.i0);
      v1.push(p.i1);
    };
    (SortedSet::createFromItems(v0), SortedSet::createFromItems(v1))
  }

  @synonym("every")
  fun all(p: T -> Bool): Bool {
    this.values().all(p)
  }

  // Returns true if the predicate returns true for at least one element
  // of this sequence.
  @synonym("some")
  fun any(p: T -> Bool): Bool {
    this.values().any(p)
  }

  fun collect<C: FromIterator<T>>(cls: Concrete<C>): C {
    cls::createFromIterator(this.iterator())
  }
}

module end;
