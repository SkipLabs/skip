/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

////////////////////////////////////////////////////////////////////////////////
// A Range in a block of text.
// start is inclusive.
// end is exclusive.
////////////////////////////////////////////////////////////////////////////////

value class TextRange{
  start: Position,
  end: Position,
} uses Show, Orderable, Hashable {
  fun isNone(): Bool {
    this == TextRange.none;
  }

  static fun create(start: Position, end: Position): TextRange {
    // TODO: invariant(start <= end);
    TextRange{start, end};
  }

  fun toString(): String {
    if (this.isNone()) {
      "";
    } else {
      this.start.toString() + "-" + this.end;
    };
  }

  fun contains(position: Position): Bool {
    this.start <= position && this.end > position;
  }

  fun containsRange(range: TextRange): Bool {
    this.start <= range.start && this.end >= range.end;
  }

  fun inspect(): Inspect {
    InspectLiteral(this.toString());
  }
}

module TextRange;

const none: TextRange = empty(Position.start);

fun create(start: Position, end: Position): TextRange {
  // TODO: invariant(start <= end);
  TextRange::create(start, end);
}

fun empty(position: Position): TextRange {
  create(position, position);
}

fun contentFromLines(tr: TextRange, lines: Vector<String>): String {
  invariant(tr.end >= tr.start, "content end cannot be before content start");

  if (tr.start.line() == tr.end.line()) {
    line = lines[tr.start.line()];
    line
      .getIter()
      .forward(tr.start.column())
      .collectString(tr.end.column() - tr.start.column())
  } else {
    gen: () -> mutable Iterator<String> = () -> {
      yield lines[tr.start.line()]
        .getIter()
        .forward(tr.start.column())
        .collectString();

      for (i in Range(tr.start.line() + 1, tr.end.line())) {
        yield lines[i];
      };

      yield lines[tr.end.line()].take(tr.end.column());
    };
    gen().collect(Array).join(Chars.lineFeed.toString())
  }
}

fun createEndOfLines(lines: Vector<String>): Position {
  line = lines.size() - 1;
  if (line == 0) {
    Position.start;
  } else {
    Position.create(line, lines[line].length());
  }
}

module end;
