module Base64;

/* Base64 mapping */
// printer-ignore
const standardBase64: Array<Char> = Array[
  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',
  'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
  't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',
  '8', '9', '+', '/',
];

const urlBase64: Array<Char> = Array[
  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',
  'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
  't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',
  '8', '9', '-', '_',
];


/**
 * This array is a lookup table that translates Unicode characters drawn from the "Base64 Alphabet" (as specified
 * in Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64
 * alphabet but fall within the bounds of the array are translated to -1.
 *
 * Note: '+' and '-' both decode to 62. '/' and '_' both decode to 63. This means decoder seamlessly handles both
 * URL_SAFE and STANDARD base64. (The encoder, on the other hand, needs to know ahead of time what to emit).
 */
const decodeTable:  Array<Int> = Array[
// 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, // 20-2f + - /
  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, // 30-3f 0-9
  -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, // 40-4f A-O
  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, // 50-5f P-Z _
  -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, // 60-6f a-o
  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51                      // 70-7a p-z
];

fun decode(str: String):  Array<UInt8> {
  if (str.isEmpty()) {
    return Array[];
  };
  chars = str.chars();
  charsLen = chars.size();
  invariant(charsLen % 4 == 0, "Invalid Base64 data");
  len = charsLen * 3 / 4 ;
  if (chars[charsLen - 1] == '=') {
    !len = len - 1;
  };
  if (chars[charsLen - 2] == '=') {
    !len = len - 1;
  };
  dbuf = Array<UInt8>::mfill(len, UInt8::truncate(0));
  decode_(dbuf, chars);
  dbuf.chill();
}

fun decodeString(encoded: String): String {
  utf8 = decode(encoded);
  String::fromUtf8(utf8);
}

private fun decode_(dbuf: mutable Array<UInt8>, chars: Vector<Char>): void {
    dt = decodeTable;
    i = 0;
    j = 0;
    while (i < chars.size() && j < dbuf.size()) {
      (a, !i) = (dt[chars[i].code()], i + 1);
      (b, !i) = (dt[chars[i].code()], i + 1);
      (c, !i) = (dt[chars[i].code()], i + 1);
      (d, !i) = (dt[chars[i].code()], i + 1);
      invariant(a != -1 && b != -1, "Invalid Base64 data");
      if (j < dbuf.size()) {
        dbuf.set(j, UInt8::truncate(a.shl(2) + b.and(0x30).shr(4)));
        !j = j + 1;
      };
      if (j < dbuf.size()) {
        invariant(c != -1, "Invalid Base64 data");
        dbuf.set(j, UInt8::truncate( b.and(0xf).shl(4) + c.and(0x3c).shr(2)));
        !j = j + 1;
      };
      if (j < dbuf.size()) {
        invariant(d != -1, "Invalid Base64 data");
        dbuf.set(j, UInt8::truncate( c.and(0x3).shl(6) + d));
        !j = j + 1;
      };
    };
}

/**
 * Base64 encode
 */
fun encode(str: String, urlSafe: Bool = false): Array<UInt8> {
  if (str.isEmpty()) {
    return Array[];
  };
  table = if (urlSafe) {urlBase64} else {standardBase64};
  chars = str.chars();
  charsLen = chars.size();
	olen = (charsLen * 4 / 3) + 4; /* 3-byte blocks to 4-byte */
	!olen = olen + (olen / 72); /* line feeds */
	!olen = olen + 1; /* nul termination */
  invariant(charsLen <= olen, "Integer overflow");
	out = Array::mfill(olen, UInt8::truncate(0));
  inPos = 0;
	pos = 0;
	line = 0;
	while (charsLen - inPos >= 3) {
    i0 = chars[inPos].code().shr(2);
    i1 = chars[inPos].code().and(0x03).shl(4).or(chars[inPos + 1].code().shr(4));
    i2 = chars[inPos + 1].code().and(0x0f).shl(2).or(chars[inPos + 2].code().shr(6));
    i3 = chars[inPos + 2].code().and(0x3f);
    out.set(pos, UInt8::truncate(table[i0].code()));
    out.set(pos + 1, UInt8::truncate(table[i1].code()));
    out.set(pos + 2, UInt8::truncate(table[i2].code()));
    out.set(pos + 3, UInt8::truncate(table[i3].code()));
    !pos = pos + 4;
    !inPos = inPos + 3;
		!line = line + 4;
		if (line >= 72) {
      if (!urlSafe) {
        out.set(pos, UInt8::truncate('\n'.code()));
        !pos = pos + 1;
      };
      !line = 0;
		};
	};
	if (charsLen - inPos > 0) {
    i0 = chars[inPos].code().shr(2);
    out.set(pos, UInt8::truncate(table[i0].code()));
    !pos = pos + 1;
    if (charsLen - inPos == 1) {
      i1 = chars[inPos].code().and(0x03).shl(4);
      out.set(pos, UInt8::truncate(table[i1].code()));
      out.set(pos+1, UInt8::truncate('='.code()));
      !pos = pos + 2;
		} else {
      i1 = chars[inPos].code().and(0x03).shl(4).or(chars[inPos + 1].code().shr(4));
      i2 = chars[inPos + 1].code().and(0x0f).shl(2);
      out.set(pos, UInt8::truncate(table[i1].code()));
      out.set(pos+1, UInt8::truncate(table[i2].code()));
      !pos = pos + 2;
		};
    out.set(pos, UInt8::truncate('='.code()));
    !pos = pos + 1;
    !line = line + 4;
	};
  if (pos == olen) {
    out.chill();
  } else {
    out.slice(0, pos);
  }
}

fun encodeString(str: String, urlSafe: Bool = false):  String {
  utf8 = encode(str, urlSafe);
  String::fromUtf8(utf8)
}


fun encodeBytes(bytes: Array<UInt8>, urlSafe: Bool = false): String {
	ret = mutable Vector<Char>[];
  table = if (urlSafe) {urlBase64} else {standardBase64};
  i = 0;
  charArray3 = Array::mfill(3, 0);
  push = vec -> {
    vec.push(table[charArray3[0].and(0xfc).shr(2)]);
    vec.push(table[charArray3[0].and(0x03).shl(4) + charArray3[1].and(0xf0).shr(4)]);
    vec.push(table[charArray3[1].and(0x0f).shl(2) + charArray3[2].and(0xc0).shr(6)]);
    vec.push(table[charArray3[2].and(0x3f)]);
  };
  bytes.each(byte -> {
    charArray3.set(i, byte.toInt());
    !i = i + 1;
    if (i == 3) {
      push(ret);
      !i = 0;
    }
  });
  if (i > 0) {
    for(j in Range(i, 3)) {
      charArray3.set(j, 0);
    };
	  tmp = mutable Vector<Char>[];
    push(tmp);
    for (j in Range(0, i + 1)) {
      ret.push(tmp[j]);
    };
    while(i < 3) {
      ret.push('=');
      !i = i+1;
    }
  };
  String::fromChars(ret.toArray());
}


@export("SKIP_Base64_encode")
fun b64Encode(bytes: Array<UInt8>): String {
  encodeBytes(bytes)
}

@export("SKIP_Base64_decode")
fun b64Decode(encoded: String):  Array<UInt8> {
  decode(encoded)
}

module end;
