module Cli;

base class Arg{
  name: String,
  _short: ?String = None(),
  _long: ?String = None(),
  _about: ?String = None(),
  _global: Bool = false,
  _env: ?String = None(),
  _repeatable: Bool = false,
  _default: ?Value = None(),
  _positional: Bool = false,
} {
  // Builder interface methods.
  fun short(flag: String): this {
    this with {_short => Some(flag)}
  }

  fun long(flag: String): this {
    this with {_long => Some(flag)}
  }

  fun positional(value: Bool = true): this {
    this with {_positional => value}
  }

  fun about(msg: String): this {
    this with {_about => Some(msg)}
  }

  fun global(): this {
    this with {_global => true}
  }

  fun repeatable(value: Bool = true): this {
    if (value && this._default is Some _) {
      invariant_violation(
        "Cannot call repeatable(true) after default(). Use default_values() instead.",
      )
    };
    this with {_repeatable => value}
  }

  overridable fun env(name: String): this {
    this with {_env => Some(name)}
  }

  fun isRequired(): Bool;

  fun isNegatable(): Bool;

  static fun string(name: String): StringArg {
    StringArg{name}
  }

  static fun int(name: String): IntArg {
    IntArg{name}
  }

  static fun bool(name: String): BoolArg {
    BoolArg{name}
  }
}

base class ValuedArg{
  _required: Bool = false,
  _value_name: String = "VALUE",
  _value_about: Array<(String, String)> = Array[],
} extends Arg {
  fun required(value: Bool = true): this {
    this with {_required => value}
  }

  fun isRequired(): Bool {
    this._required
  }

  fun isNegatable(): Bool {
    false
  }

  fun value_name(
    value: String,
    about: Array<(String, String)> = Array[],
  ): this {
    this with {_value_name => value, _value_about => about}
  }
}

class StringArg extends ValuedArg {
  fun default(value: String): this {
    if (this._repeatable) {
      invariant_violation(
        "Cannot call default() if repeatable() was called first. Use default_values() instead.",
      )
    };
    this with {_default => Some(StringValue(value))}
  }

  fun default_values(values: Array<String>): this {
    if (!this._repeatable) {
      invariant_violation(
        "Cannot call default_values() unless repeatable() was called first. Use default() instead.",
      )
    };
    this with {_default => Some(ArrayValue(values))}
  }
}

class IntArg extends ValuedArg {
  fun default(value: Int): this {
    this with {_default => Some(IntValue(value))}
  }
}

class BoolArg{_negatable: Bool = false} extends Arg {
  fun default(value: Bool): this {
    this with {_default => Some(BoolValue(value))}
  }

  fun isRequired(): Bool {
    false
  }

  fun negatable(value: Bool = true): this {
    this with {_negatable => value}
  }

  fun isNegatable(): Bool {
    this._negatable
  }
}

class Command(
  name: String = "",
  _args: Array<Arg> = Array[],
  _extra: Bool = false,
  _extraName: ?String = None(),
  _subcommands: Array<Command> = Array[],
  _about: ?String = None(),
  _short: ?String = None(),
) {
  fun args(args: Array<Arg>): this {
    this with {_args => this._args.concat(args)}
  }

  fun arg(arg: Arg): this {
    this.args(Array[arg])
  }

  fun extra(name: String = ""): this {
    this with {
      _extra => true,
      _extraName => if (name != "") Some(name) else None(),
    }
  }

  fun subcommand(cmd: Command): this {
    this with {_subcommands => this._subcommands.concat(Array[cmd])}
  }

  fun about(msg: String): this {
    this with {_about => Some(msg)}
  }

  fun short(n: String): this {
    this with {_short => Some(n)}
  }

  fun help(): this {
    this.arg(
      Cli.Arg::bool("help")
        .short("h")
        .long("help")
        .about("Print help information")
        .global(),
    )
  }

  fun parseArgs(): ParseResults {
    res = parseArgs(this);

    if (res.values.containsKey("help") && res.getBool("help")) {
      res.subcommand match {
      | Some(subcmd) ->
        this._subcommands.find(c -> c.name == subcmd) match {
        | Some(cmd) -> print_string(usage(cmd, true, Some(this)))
        | None() -> invariant_violation(`Unknown subcommand ${subcmd}`)
        }
      | None() -> print_string(usage(this, true))
      };
      skipExit(0)
    };

    res.error.each(err -> {
      print_error(`error: ${err.getMessage()}\n`);
      res.subcommand match {
      | Some(subcmd) ->
        this._subcommands.find(c -> c.name == subcmd) match {
        | Some(cmd) -> print_error(usage(cmd, false, Some(this)))
        | None() -> invariant_violation(`Unknown subcommand ${subcmd}`)
        }
      | None() -> print_error(usage(this, false))
      };
      skipExit(1)
    });

    res
  }
}

module end;
