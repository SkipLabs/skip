base class P<T>(value: ?T) uses Equality[T: Equality] {
  fun ==[T: Equality](other: P<T>): Bool {
    (this, other) match {
    | (L(v1), L(v2))
    | (R(v1), R(v2)) ->
      v1 == v2
    | _ -> false
    }
  }
}
class L<T> extends P<T>
class R<T> extends P<T>

fun selfEq<T: Equality>(x: T): Bool {
  x == x
}

class Inv<T>(value: T) uses Equality[T: Equality] {
  fun ==[T: Equality](other: Inv<T>): Bool {
    this.value == other.value
  }
}

fun main(): void {
  p: P<Int> = if (true) L(None()) else R(None());
  _ = selfEq(p);
  i: Inv<P<Int>> = Inv(if (true) L(None()) else R(None()));
  _ = selfEq(i);
  print_string("Pass")
}
