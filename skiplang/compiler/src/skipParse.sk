/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*****************************************************************************/
/* Utility functions to perform the parsing. */
/*****************************************************************************/
module alias Error = SkipError;

module FileCache;

const fileDirName: SKStore.DirName = SKStore.DirName::create("/fileCache/");
const fileDir: SKStore.EHandle<
  SKStore.SID,
  SKStore.StringFile,
> = SKStore.EHandle(
  SKStore.SID::keyType,
  SKStore.StringFile::type,
  fileDirName,
);

const allFilesDirName: SKStore.DirName = SKStore.DirName::create(
  "/allFilesCache/",
);
const allFilesDir: SKStore.EHandle<
  SKStore.IID,
  SKStore.StringFile,
> = SKStore.EHandle(
  SKStore.IID::keyType,
  SKStore.StringFile::type,
  allFilesDirName,
);

const fileTimeDirName: SKStore.DirName = SKStore.DirName::create(
  "/fileTimeCache/",
);
const fileTimeDir: SKStore.EHandle<
  SKStore.SID,
  SKStore.IntFile,
> = SKStore.EHandle(
  SKStore.SID::keyType,
  SKStore.IntFile::type,
  fileTimeDirName,
);

fun get_old_files_per_package(
  context: mutable SKStore.Context,
): Map<String, SortedSet<String>> {
  allFilesDir
    .unsafeGetArray(context, SKStore.IID(0))
    .reduce(
      (map, fn) -> {
        key = fn.value;
        (package, filename) = if (key.contains(":")) {
          key.splitFirst(":")
        } else {
          ("", key)
        };
        map.getOrAdd(package, () -> mutable Vector[]).push(filename);
        map
      },
      mutable Map[],
    )
    .map((_, v) -> SortedSet::createFromItems(v))
    .chill()
}

fun writeFile(
  context: mutable SKStore.Context,
  key: String,
  last_modif_time: Int,
  contents: String,
): void {
  fileTimeDir.writeArray(
    context,
    SKStore.SID(key),
    Array[SKStore.IntFile(last_modif_time)],
  );
  fileDir.writeArray(
    context,
    SKStore.SID(key),
    Array[SKStore.StringFile(contents)],
  )
}

fun writeFiles(
  context: mutable SKStore.Context,
  file_names: Array<String>,
  dependencies: Map<String, (String, Sklib.Metadata)>,
  lib_name_opt: ?String,
): void {
  old_files_per_package = get_old_files_per_package(context);

  stale_files = Vector::mcreateFromItems(
    lib_name_opt match {
    | Some(lib_name) ->
      old_files_per_package
        .maybeGet(lib_name)
        .default(SortedSet[])
        .difference(SortedSet::createFromItems(file_names))
        .union(old_files_per_package.maybeGet("").default(SortedSet[]))
        .map(fn -> `${lib_name}:${fn}`)
        .collect(Array)
    | None() ->
      old_files_per_package
        .maybeGet("")
        .default(SortedSet[])
        .difference(SortedSet::createFromItems(file_names))
        .collect(Array)
    },
  );
  current_files = Vector::mcreateFromItems(
    lib_name_opt match {
    | Some(lib_name) -> file_names.map(fn -> `${lib_name}:${fn}`)
    | None() -> file_names
    },
  );

  for (file_name in file_names) {
    key = lib_name_opt match {
    | Some(lib_name) -> `${lib_name}:${file_name}`
    | None() -> file_name
    };
    lastModifTime = FileSystem.getLastModificationTime(file_name);
    timeArr = fileTimeDir.unsafeGetArray(context, SKStore.SID(key));
    if (timeArr.size() > 0 && timeArr[0].value == lastModifTime) continue;
    contents = FileSystem.readTextFile(file_name);
    writeFile(context, key, lastModifTime, contents)
  };

  for (lib_name => dep in dependencies) {
    (lib_path, _) = dep;
    lib_metadata = Sklib.read_metadata(lib_path) match {
    | Success(data) -> data
    | Failure(err) ->
      print_error(`Could not read ${lib_path}: ${err}`);
      skipExit(3)
    };

    for (f in old_files_per_package
      .maybeGet(lib_name)
      .default(SortedSet[])
      .difference(
        SortedSet::createFromItems(lib_metadata.sources.map(s -> s.i0)),
      )) {
      stale_files.push(`${lib_name}:${f}`)
    };

    for ((src_path, lastModifTime, contents) in lib_metadata.sources) {
      key = `${lib_name}:${src_path}`;
      current_files.push(key);
      timeArr = fileTimeDir.unsafeGetArray(context, SKStore.SID(key));
      if (timeArr.size() > 0 && timeArr[0].value == lastModifTime) continue;
      writeFile(context, key, lastModifTime, contents)
    }
  };

  for (file_name in stale_files) {
    key = SKStore.SID(file_name);
    fileDir.writeArray(context, key, Array[SKStore.StringFile("")]);
    fileTimeDir.writeArray(context, key, Array[])
  };
  allFilesDir.writeArray(
    context,
    SKStore.IID(0),
    current_files.map(x -> SKStore.StringFile(x)).collect(Array),
  );
}

module end;

module SkipParse;

const astDirName: SKStore.DirName = SKStore.DirName::create("/astCache/");
const astDir: SKStore.EHandle<SKStore.SID, DefsFile> = SKStore.EHandle(
  SKStore.SID::keyType,
  DefsFile::type,
  astDirName,
);

class DefsFile(value: List<SkipAst.Definition>) extends SKStore.File

fun getAst(
  context: mutable SKStore.Context,
  fileName: String,
): List<SkipAst.Definition> {
  astDir.get(context, SKStore.SID(fileName)).value
}

fun parseFile(fileName: String, source: String): DefsFile {
  fileResult = SkipParser.parseSource(source, true);
  ast = parseToAst(fileName, fileResult);
  DefsFile(ast)
}

fun parseToAst(
  filename: String,
  parseResults: Parser.ParseResults,
): List<SkipAst.Definition> {
  parseResults.throwOnError(filename);
  List::createFromItems(
    ConvertTree.Converter{filename}.convertTree(parseResults.tree),
  );
}

// Used by docgen
fun parse(filename: String, contents: String): List<SkipAst.Definition> {
  parseToAst(filename, SkipParser.parseSource(contents, false));
}

fun parse_files(
  context: mutable SKStore.Context,
  fileList: Sequence<String>,
): Sequence<List<SkipAst.Definition>> {
  fileList.map(x -> getAst(context, x))
}

module end;
