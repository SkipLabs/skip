/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module SkipPrinter;

fun prettyPrint(
  contents: String,
  filename: String,
): Result<String, SkipError.Error> {
  parsed = SkipParser.parseSource(contents, false);
  if (parsed.errors.size() > 0) {
    // Parse errors are expected. Exceptions are bugs.
    Failure(
      SkipError.errorFromSyntaxError(
        parsed.errors[0],
        FileCache.InputSource(None(), filename),
      ),
    )
  } else {
    Success(SkipPrinter.printTreeToString(parsed.tree, contents) + "\n")
  }
}

untracked fun main(): void {
  args = Cli.Command("skfmt")
    .about("Format skip code")
    .arg(
      Cli.Arg::string("files")
        .positional()
        .repeatable()
        .default_values(Array["-"])
        .about("Skip file(s) to format"),
    )
    .arg(
      Cli.Arg::bool("inplace")
        .short("i")
        .about("Inplace edit file(s), if specified"),
    )
    .arg(
      Cli.Arg::string("assume-filename")
        .value_name("FILENAME")
        .about("File name used to report errors on stdin"),
    )
    .help()
    .parseArgs();

  inplace = args.getBool("inplace");
  filenames = args.getArray("files");
  assumeFilename = args.maybeGetString("assume-filename");
  for (file in filenames) {
    contents = if (file == "-") {
      invariant(!inplace, "Cannot use both - and -i");
      !file = "<stdin>";
      buf = mutable Vector[];
      IO.stdin().read_to_end(buf) match {
      | Success _ -> String::fromUtf8(buf.collect(Array))
      | Failure(err) ->
        print_error(err.getMessage());
        skipExit(1)
      }
    } else {
      invariant(
        assumeFilename == None(),
        "Cannot use --assume-filename with real file names",
      );
      FileSystem.readTextFile(file)
    };
    prettyPrint(contents, assumeFilename.default(file)) match {
    | Failure(error) ->
      get_file = (f) -> {
        if (f.path == file) {
          contents
        } else {
          FileSystem.readTextFile(f.path)
        }
      };
      print_error_ln(SkipError.errorsToString(Vector[error], get_file));
      skipExit(1)
    | Success(formattedContents) ->
      if (inplace) {
        FileSystem.writeTextFile(file, formattedContents)
      } else {
        print_raw(formattedContents)
      }
    }
  }
}

module end;
