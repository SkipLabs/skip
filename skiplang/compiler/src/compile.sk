/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

fun createOptimizedFunctions(
  context: mutable SKStore.Context,
  env: GlobalEnv,
  config: Config.Config,
): GlobalEnv {
  runCompilerPhase("native/compile", () -> {
    !env = Optimize.compileAll(context, env, config);

    // Find all the functions that are still reachable from the root set,
    // post-inlining, dead code elimination, etc.
    !env.sfuns = findAllReachableFuns(
      keep -> {
        // Seed the "reachable" recursion with functions we definitely
        // need to emit.
        keep(env.initializeAllConstsID);
        for (f in env.sfuns) {
          if (f.isDisasm || f.isRuntimeExport) {
            keep(f.id)
          }
        };
        env.runtimeFunctions.values().each(keep)
      },
      env,
    );

    // Now that we have computed the fields for all of the various
    // coroutine classes, we can finally analyze pointer escape info.
    !env = Escape.computeWhetherPointersCanEscape(env);

    // optimize.sk steps (5) Lower + (6) Lay out vtables.
    !env = Lower.lowerFunctions(env, config)
  });

  env
}

fun link(
  llFile: String,
  config: Config.Config,
  exports: Array<String> = Array[],
): void {
  linker_args = config.link_args.concat(
    config.dependencies
      .values()
      .collect(Array)
      .flatMap(x -> x.i1.links)
      .collect(Array),
  );
  static_libs = config.static_libraries.concat(
    config.dependencies
      .values()
      .filter(d -> d.i1.has_object_code)
      .map(x -> x.i0)
      .collect(Array),
  );
  if (config.isWasm()) {
    output = config.output;
    bcFile = output + ".bc";
    runShell(
      Array["llvm-link", llFile].concat(Array["-o", bcFile]),
      config.verbose,
    );
    oFile = output + ".o";
    runShell(
      Array[
        "llc",
        "-mtriple=wasm32-unknown-unknown",
        `-O${config.optLevel}`,
        "-filetype=obj",
        bcFile,
        "-o",
        oFile,
      ],
      config.verbose,
    );
    // TODO: Proper mechanism to select exports.
    exportJs = exports
      .concat(
        Array[
          "getCompositeName",
          "getCompositeSize",
          "getCompositeAt",
          "SKIP_String_byteSize",
          "getLeafValue",
          "objectKind",
          "SKIP_call0",
          "SKIP_Obstack_alloc",
          "skip_main",
          "SKIP_init_jsroots",
          "SKIP_add_root",
          "SKIP_remove_root",
          "SKIP_tracked_call",
          "SKIP_tracked_query",
          "sk_string_create",
          "SKIP_initializeSkip",
          "SKIP_skstore_init",
          "SKIP_skstore_end_of_init",
          "SKIP_get_persistent_size",
          "sk_pop_dirty_page",
          "SKIP_get_version",
          "SKIP_throw_EndOfFile",
          "SKIP_new_Obstack",
          "SKIP_destroy_Obstack",
          "getVersion",
          "__heap_base",
        ],
      )
      .map(x -> `-export=${x}`);
    runShell(
      Array[
        "wasm-ld",
        "--initial-memory=1073741824",
        oFile,
        "-o",
        output,
        "--no-entry",
        "-allow-undefined",
      ].concat(exportJs)
        .concat(linker_args)
        .concat(static_libs),
      config.verbose,
    );
  } else {
    flags = if (config.emit == "cdylib") {
      Array["-fPIC", "-shared"]
    } else {
      Array["-no-pie"]
    };

    runShell(
      Array[
        "clang++",
        `-O${config.optLevel}`,
        "-mllvm",
        "-inline-threshold=0",
        "-o",
        config.output,
        llFile,
      ].concat(flags)
        .concat(linker_args)
        .concat(static_libs),
      config.verbose,
    );
  }
}

fun runShell(args: Array<String>, verbose: Bool = false): void {
  if (verbose) {
    print_error(">> " + args.join(" "))
  };
  p = System.subprocess(
    args,
    s -> {
      if (verbose) {
        print_error_raw(s)
      }
    },
    s -> {
      if (verbose) {
        print_error_raw(s)
      }
    },
  ).fromSuccess();
  if (!p.success()) {
    if (!verbose) {
      print_error_raw(p.stderr)
    };
    skipExit(1)
  }
}

fun ensureCompatibleLLVMVersion(): void {
  kLLVMVersion = "15.";

  p = System.subprocess(Array["llvm-config", "--version"]).fromSuccess();
  if (!p.success()) {
    print_error_raw(p.stderr);
    skipExit(1)
  } else if (!p.stdout.startsWith(kLLVMVersion)) {
    print_error(
      `Incompatible llvm version ${p.stdout}, expected LLVM ${kLLVMVersion}`,
    );
    skipExit(1)
  }
}

class TickConfigFile(value: (Int, Config.Config)) extends SKStore.File

fun getOrInitializeBackend(
  context: mutable SKStore.Context,
  ptrBitSize: Int,
): SKStore.EagerDir {
  backendDirName = SKStore.DirName::create("/backend/");
  context.unsafeMaybeGetEagerDir(backendDirName) match {
  | Some(dir) -> return dir
  | None() -> void
  };

  _ = context.mkdir(x ~> x, x ~> x, FileCache.fileDirName);
  _ = context.mkdir(x ~> x, x ~> x, FileCache.allFilesDirName);
  backendDir = context.mkdir(
    SKStore.IID::keyType,
    TickConfigFile::type,
    backendDirName,
  );

  outerIst = OuterIstToIR.makeOuterIst(context);

  defsProj = outerIst.getFunsProj(context);
  constsProj = outerIst.getConstsProj(context);

  converter = OuterIstToIR.Converter::create(
    context,
    ptrBitSize,
    SKStore.DirName::create("/converter/"),
    outerIst,
  );

  _ = backendDir.map(
    SKStore.SID::keyType,
    TickConfigFile::type,
    context,
    SKStore.DirName::create("/backendSink/"),
    (context, _writer, _key, values) ~> {
      (_, conf) = TickConfigFile::type(values.first).value;

      context.getGlobal("ERRORS") match {
      | None() -> void
      | Some(errors) ->
        SkipError.printErrorsAndExit(
          SkipError.ErrorsFile::type(errors).value.reversed().toArray(),
          file -> {
            FileCache.fileDir.unsafeGetArray(context, file)[0].value
          },
        )
      };

      if (conf.check) {
        return void;
      };

      if (conf.emit == "sklib") {
        compile_sklib(conf);
        return void
      };

      // Create a filter for what functions to compile.
      shouldRuntimeExport = (
        funDef ~>
          AsmOutput.cppIsExported(
            funDef.origName,
            funDef.annotations,
            funDef.getPos(),
            conf.exportedAsFunctions,
            conf.isWasm(),
          )
      );

      // Are we in "disassemble" mode?
      disasm = (
        conf.disasmAll ||
        conf.disasmAnnotated ||
        !conf.disasmFiles.isEmpty() ||
        !conf.disasmFunctions.isEmpty()
      );

      // Create a filter for what functions to disassemble.
      //
      // Note that for "disasmAll" we do not return true, since we only want
      // to disassemble code which is actually used, and returning true would
      // force everything to be compiled just so it could be disassembled.
      shouldDisasm = (
        funDef ~>
          disasm &&
            (conf.disasmFunctions.contains(funDef.origName) ||
              (conf.disasmAnnotated &&
                annotationsContain(
                  funDef.annotations,
                  "@disasm",
                  funDef.getPos(),
                )))
      );

      env = OuterIstToIR.createIR(
        context,
        conf,
        shouldDisasm,
        shouldRuntimeExport,
        outerIst,
        converter,
        constsProj,
        defsProj,
      );

      !env = createOptimizedFunctions(context, env, conf);
      defs = runCompilerPhase("native/create_asm_graph", () -> {
        AsmOutput.createAsmDefGraph(env, conf)
      });

      runCompilerPhase("native/merge_asm_graph", () -> {
        AsmOutput.mergeIdenticalAsmDefs(defs, conf.debug)
      });

      runCompilerPhase("native/create_asm_symbols", () -> {
        AsmOutput.assignFinalSymbols(defs)
      });

      conf.emit match {
      | "llvm-ir" -> compile_llvm_ir(defs, conf)
      | "link" | "cdylib" ->
        // TODO: Remove exports stuff once --emit=cdylib is supported.
        wasm_exports = outerIst
          .getFuns(context, defsProj)
          .filter(f ->
            annotationsContainParam(
              f.annotations,
              "@wasm_export",
              f.getPos(),
            ).isSome() ||
              annotationsContainParam(
                f.annotations,
                "@export",
                f.getPos(),
              ).isSome()
          )
          .map(exportName);
        compile_binary(defs, conf, wasm_exports)
      | "sklib" ->
        invariant_violation("--emit=sklib should have been handled earlier")
      | _ -> invariant_violation("Unsupported value for `--emit`: " + conf.emit)
      }
    },
  );

  context.unsafeGetEagerDir(backendDirName)
}

fun compile(
  config: Config.Config,
  context: mutable SKStore.Context,
  fileNames: Array<String>,
): void {
  if (fileNames.isEmpty() && config.dependencies.isEmpty()) {
    print_error("fatal error: no input files\n");
    skipExit(4); // Exit code used by g++ for no input files
  };

  ensureCompatibleLLVMVersion();

  // FIXME: Backend initialization should _not_ peek into the config
  // as it is likely to change across invocations.
  getOrInitializeBackend(context, config.ptrBitSize).writeArray(
    context,
    SKStore.IID(0),
    Array[TickConfigFile((context.tick.value, config))],
  );

  FileCache.writeFiles(
    context,
    fileNames,
    config.dependencies,
    config.lib_name,
  );

  context.update()
}

fun compile_llvm_ir(
  defs: readonly AsmOutput.AsmDefIDToAsmDef,
  conf: Config.Config,
): void {
  runCompilerPhase("native/write_asm_files", () -> {
    AsmOutput.writeOutputFiles(defs, conf.input_files, conf.output, conf)
  })
}

fun compile_binary(
  defs: readonly AsmOutput.AsmDefIDToAsmDef,
  conf: Config.Config,
  exports: Array<String>,
): void {
  // TODO: Use `mkstemp()` instead.
  llFile = conf.output + ".ll";
  runCompilerPhase("native/write_asm_files", () -> {
    AsmOutput.writeOutputFiles(defs, conf.input_files, llFile, conf)
  });

  runCompilerPhase("native/link", () -> {
    link(llFile, conf, exports)
  })
}

fun compile_sklib(conf: Config.Config): void {
  runCompilerPhase("native/write_sklib", () -> {
    // NOTE: Static libraries (`.a` archives) provided as input files are
    // bundled into the `sklib`.
    sklib = mutable SklibBuilder(conf.lib_name.fromSome(), conf.target);

    conf.direct_dependencies.each(dep_name ->
      sklib.add_dependency(dep_name, conf.dependencies[dep_name].i1)
    );
    conf.static_libraries.each(sklib.add_static_library);
    conf.link_args.each(sklib.add_link_arg);
    conf.preambles.each(sklib.add_preamble);
    conf.input_files.each(sklib.add_source);

    ar_file = IO.File::open(
      conf.output,
      IO.OpenOptions{write => true, create => true, truncate => true},
    );
    sklib.write(ar_file) match {
    | Success _ -> void
    | Failure(err) ->
      print_error(`Could not write ${conf.output}: ${err}`);
      skipExit(3)
    };
    ar_file.close();

    p = System.subprocess(Array["llvm-ar", "s", conf.output]).fromSuccess();
    if (!p.success()) {
      print_error(`ranlib failed: ${p.stdout} ${p.stderr}`);
      skipExit(3)
    }
  })
}

fun exportName(f: OuterIst.FunDef): String {
  pos = f.getPos();
  annotationsContainParam(f.annotations, "@wasm_export", pos) match {
  | Some(s) if (!s.isEmpty()) -> return s
  | _ -> void
  };
  annotationsContainParam(f.annotations, "@export", pos) match {
  | Some(s) if (!s.isEmpty()) -> return s
  | _ -> void
  };
  "SKIP_" + AsmOutput.mangle(f.origName)
}
