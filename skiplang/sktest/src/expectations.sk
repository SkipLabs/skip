module SKTest;

class ExpectationError(
  msg: String,
  expected: String,
  actual: String,
) extends Exception {
  fun getMessage(): String {
    this.msg + "\n\texpected: " + this.expected + "\n\tactual: " + this.actual
  }
}

fun expectEq<T: frozen & Equality>(
  actual: T,
  expected: T,
  msg: String = "expected equality",
): void {
  if (actual != expected) {
    throw ExpectationError(
      msg,
      inspect(expected).toString(),
      inspect(actual).toString(),
    )
  }
}

fun expectNe<T: frozen & Equality>(
  actual: T,
  expected: T,
  msg: String = "expected difference",
): void {
  if (actual == expected) {
    throw ExpectationError(
      msg,
      inspect(expected).toString(),
      inspect(actual).toString(),
    )
  }
}

fun expectTrue(b: Bool, msg: String = "expected true"): void {
  if (!b) {
    throw ExpectationError(msg, "true", "false")
  }
}

fun expectFalse(b: Bool, msg: String = "expected false"): void {
  if (b) {
    throw ExpectationError(msg, "false", "true")
  }
}

fun fail<T>(msg: String = "failure"): T {
  throw ExpectationError(msg, "", "")
}

fun expectThrow(f: () -> void, msg: String = "expected throw"): void {
  success = false;
  try {
    f()
  } catch {
  | _ -> !success = true
  };
  if (!success) {
    fail(msg)
  }
}

module end;
