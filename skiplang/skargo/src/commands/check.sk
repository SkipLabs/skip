module Skargo;

fun check(): (Cli.Command, (GlobalContext, Cli.ParseResults) ~> void) {
  (
    Cli.Command("check")
      .short("c")
      .about(
        "Analyze the current package and report errors, but don't build object files",
      )
      .arg(
        Cli.Arg::string("manifest-path")
          .value_name("PATH")
          .about("Path to Skargo.toml"),
      )
      .arg(
        Cli.Arg::string("target")
          .value_name("TRIPLE")
          .about("Check for the target triple"),
      )
      .arg(
        Cli.Arg::string("target-dir")
          .value_name("PATH")
          .about("Directory for all generated artifacts"),
      )
      .args(kProfileArgs)
      .arg(kSkcOptArg),
    execCheck,
  )
}

fun execCheck(gctx: GlobalContext, args: Cli.ParseResults): void {
  ws = workspace(args, gctx);
  opts = compile_options(args) with {
    filter => CompileFilterOnly{
      lib => LibRuleTrue(),
      bins => FilterRule::none(),
      tests => FilterRule::none(),
    },
  };
  bctx = create_bctx(gctx, ws, opts);
  withTimer(
    () -> {
      build_runner = BuildRunner::create(bctx);
      build_runner.compile(/* check = */ true)
    },
    t ->
      gctx.console.status(
        "Finished",
        `${opts.build_config.requested_profile} target(s) in ${t}s`,
      )
    ,
  );

  if (gctx.config.formatOnCheck) {
    execFmt(gctx, args)
  }
}

module end;
