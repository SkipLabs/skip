module SKTest;

fun test_harness(
  tests: readonly Map<String, readonly Map<String, () -> void>>,
): void {
  args = Cli.Command("tests")
    .about("Run tests")
    .arg(
      Cli.StringArg("filter")
        .positional()
        .about(
          "If specified, only run tests containing this string in their names",
        ),
    )
    .arg(Cli.StringArg("junitxml").about("Generate a JUnit XML report"))
    .arg(
      Cli.BoolArg("verbose")
        .long("verbose")
        .short("v")
        .about("Use verbose output"),
    )
    .help()
    .parseArgs();

  reporters = mutable Vector<mutable TestReporter>[
    mutable BasicTestReporter{color => true},
  ];
  args.maybeGetString("junitxml").each(path ->
    reporters.push(mutable XmlTestReporter{output => Some(path)})
  );
  filter = args.maybeGetString("filter").default("");

  success = true;
  for (testSuite in tests.keys()) {
    for ((testName, testFun) in tests[testSuite].items()) {
      if (!(testSuite + "." + testName).contains(filter)) {
        continue
      };
      try {
          _ = testFun();
          // TODO: reportSuccess/reportFailure.
          reporters.each(r -> r.report(testSuite, testName, None()))
      } catch {
      | exn ->
          reporters.each(r -> r.report(testSuite, testName, Some(exn)));
          !success = false
      }
    }
  };
  reporters.each(r -> r.finish());

  if (!success) {
    skipExit(1)
  }
}

fun main(): void {
  tests = mutable Map[];
  #forEachFunction (@test, #function, #functionName) {
    // TODO: Properly handle tests outside of module/suite?
    (testSuite, testName) = #functionName.splitFirst(".");
    if (!tests.containsKey(testSuite)) {
      tests.set(testSuite, mutable Map[])
    };
    tests[testSuite].set(testName, #function)
  };
  test_harness(tests)
}
