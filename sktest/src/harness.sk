module SKTest;

fun test_harness(
  tests: readonly Map<String, readonly Map<String, () -> void>>
): void {
  args = Cli.Command("tests")
    .about("Run tests")
    .arg(
      Cli.StringArg("filter")
        .positional()
        .about(
          "If specified, only run tests containing this string in their names",
        ),
    )
    .arg(Cli.StringArg("format").about("Output format (xml, default)"))
    .arg(
      Cli.StringArg("output")
        .short("o")
        .long("output")
        .about("Output file (defaults to stdout)"),
    )
    .arg(
      Cli.BoolArg("verbose")
        .long("verbose")
        .short("v")
        .about("User verbose output"),
    )
    .help()
    .parseArgs();

  reporter = args.maybeGetString("format") match {
  | Some("xml") -> mutable XmlTestReporter{ output => args.maybeGetString("output")}
  | None() -> mutable BasicTestReporter{ output => args.maybeGetString("output"), color => true}
  | Some(fmt) -> invariant_violation(`Unknown test format "${fmt}"`)
  };
  filter = args.maybeGetString("filter").default("");
  for (testSuite in tests.keys()) {
    for ((testName, testFun) in tests[testSuite].items()) {
      if (!(testSuite + "." + testName).contains(filter)) {
        continue
      };
      vtry(
        () -> {
          _ = testFun();
          // TODO: reportSuccess/reportFailure.
          reporter.report(testSuite, testName, None())
        },
        exn -> reporter.report(testSuite, testName, Some(exn)),
      )
    }
  };

  reporter.finish()
}

fun main(): void {
  tests = mutable Map[];
  #forEachFunction(@test, #function, #functionName) {
    // TODO: Properly handle tests outside of module/suite?
    (testSuite, testName) = #functionName.splitFirst(".");
    if (!tests.containsKey(testSuite)) {
      tests.set(testSuite, mutable Map[])
    };
    tests[testSuite].set(testName, #function)
  };
  test_harness(tests.chill())
}
