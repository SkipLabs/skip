module SKTest;

fun test_harness(
  runTests: ((String, String, () -> void) -> void) -> void,
): void {
  args = Cli.Command("tests")
    .about("Run tests")
    .arg(
      Cli.StringArg("filter")
        .positional()
        .about(
          "If specified, only run tests containing this string in their names",
        ),
    )
    .arg(Cli.StringArg("format").about("Output format (xml, default)"))
    .arg(
      Cli.StringArg("output")
        .short("o")
        .long("output")
        .about("Output file (defaults to stdout)"),
    )
    .arg(
      Cli.BoolArg("verbose")
        .long("verbose")
        .short("v")
        .about("User verbose output"),
    )
    .help()
    .parseArgs();

  // TODO: Look into mutability
  reporter = args.maybeGetString("format") match {
  | Some("xml") -> mutable XmlTestReporter{ output => args.maybeGetString("output")}
  | None() -> mutable BasicTestReporter{ output => args.maybeGetString("output"), color => true}
  | Some(fmt) -> invariant_violation(`Unknown test format "${fmt}"`)
  };
  filter = args.maybeGetString("filter").default("");
  runTests((testSuite, testName, test) -> {
    if (!testName.contains(filter)) {
      return void
    };
    vtry(
      () -> {
        _ = test();
        // TODO: reportSuccess/reportFailure.
        reporter.report(testSuite, testName, None())
      },
      exn -> reporter.report(testSuite, testName, Some(exn)),
    )
  });

  reporter.finish()
}

fun main(): void {
  test_harness(runTest -> {
    _ = runTest; // Trick to avoid compiler error when no @test function is defined.
    #forEachFunction(@test, #function, #functionName) {
      // TODO: Properly handle tests outside of module/suite?
      (testSuite, testName) = #functionName.splitFirst(".");
      runTest(testSuite, testName, #function)
    };
    void
  })
}
