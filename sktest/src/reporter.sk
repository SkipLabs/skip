module SKTest;

class TestResult{
  name: String,
  suite: String,
  file: String,
  line: Int,
  result: String = "",
  time: Float = -1.0,
  failure_type: String = "",
  failure_message: String = "",
  stdout: String = "",
  stderr: String = "",
} {
  static fun fromJSON(s: String): TestResult {
    v = JSON.decode(s).expectMap();
    TestResult{
      name => v["name"].expectString(),
      suite => v["suite"].expectString(),
      file => v["file"].expectString(),
      line => v["line"].expectInt(),
      result => v["result"].expectString(),
      time => v["time"].expectFloat(),
      failure_type => v["failure_type"].expectString(),
      failure_message => v["failure_message"].expectString(),
      stdout => v["stdout"].expectString(),
      stderr => v["stderr"].expectString(),
    }
  }

  fun toJSON(): String {
    JSON.Object[
      "name" => JSON.String(this.name),
      "suite" => JSON.String(this.suite),
      "file" => JSON.String(this.file),
      "line" => JSON.IntNumber(this.line),
      "result" => JSON.String(this.result),
      "time" => JSON.FloatNumber(this.time),
      "failure_type" => JSON.String(this.failure_type),
      "failure_message" => JSON.String(this.failure_message),
      "stdout" => JSON.String(this.stdout),
      "stderr" => JSON.String(this.stderr),
    ].encode()
  }
}

mutable base class TestReporter{output: ?String = None()} {
  mutable fun report(res: TestResult): void;
  mutable fun writeLine(str: String): void {
    this.output match {
    | Some(file) -> FileSystem.appendTextFile(file, str + "\n")
    | None() -> print_string(str)
    }
  }
  overridable mutable fun finish(): void {
    void
  }
}

mutable class BasicTestReporter{
  color: Bool,
  private mutable successes: Int = 0,
  private mutable failures: Int = 0,
} extends TestReporter {
  const kSeparator: String = "\n==========\n";

  mutable fun report(res: TestResult): void {
    result = if (res.result == "success") {
      this.!successes = this.successes + 1;
      this.success() + ` ${res.suite} ${res.name}`
    } else {
      this.!failures = this.failures + 1;
      this.failure() +
        ` ${res.suite} ${res.name}\n${res.failure_type}: ${
          res.failure_message
        }\n` +
        "\nstdout:" +
        static::kSeparator +
        res.stdout +
        static::kSeparator +
        "\nstderr:" +
        static::kSeparator +
        res.stderr +
        static::kSeparator;
    };
    this.writeLine(result)
  }

  mutable fun finish(): void {
    this.writeLine(
      `Failures: ${this.failures}, successes: ${this.successes} (total: ${this
        .successes + this.failures})`,
    )
  }

  private readonly fun failure(): String {
    if (this.color) {
      TermColor.colored(
        "[FAILURE]",
        TermColor.Red(),
        TermColor.Default(),
        Array[TermColor.Bold()],
      );
    } else {
      "[FAILURE]"
    }
  }

  private readonly fun success(): String {
    if (this.color) {
      TermColor.colored("[OK]", TermColor.Green());
    } else {
      "[OK]"
    }
  }
}

mutable class TestSuiteStats(
  mutable tests: Int = 0,
  mutable failures: Int = 0,
  mutable errors: Int = 0,
  mutable time: Float = 0.0,
) {
  mutable fun add(test: TestResult): void {
    this.!tests = this.tests + 1;
    this.!time = this.time + test.time;
    test.result match {
    | "error" -> this.!errors = this.errors + 1
    | "failure" -> this.!failures = this.failures + 1
    | _ -> void
    }
  }
}

mutable class XmlTestReporter{
  results: mutable Map<String, mutable Vector<TestResult>> = mutable Map[],
  stats: mutable Map<String, mutable TestSuiteStats> = mutable Map[],
} extends TestReporter {
  mutable fun report(res: TestResult): void {
    if (!this.results.containsKey(res.suite)) {
      this.results.set(res.suite, mutable Vector[]);
      this.stats.set(res.suite, mutable TestSuiteStats())
    };
    this.results[res.suite].push(res);
    this.stats[res.suite].add(res)
  }

  mutable fun finish(): void {
    this.writeLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    totalTests = this.stats.values()
      .map(s -> s.tests)
      .foldl((acc, x) -> acc + x, 0);
    totalFailures = this.stats.values()
      .map(s -> s.failures)
      .foldl((acc, x) -> acc + x, 0);
    totalErrors = this.stats.values()
      .map(s -> s.errors)
      .foldl((acc, x) -> acc + x, 0);
    totalTime = this.stats.values()
      .map(s -> s.time)
      .foldl((acc, x) -> acc + x, 0.0);
    this.writeLine(
      `<testsuites tests="${totalTests}" failures="${totalFailures}" errors="${totalErrors}" time="${totalTime}" timestamp="0" name="AllTests">`,
    );
    for ((testSuiteName, results) in this.results.items()) {
      numTests = results.size();
      numFailures = this.stats[testSuiteName].failures;
      numErrors = this.stats[testSuiteName].errors;
      time = this.stats[testSuiteName].time;
      this.writeLine(
        `  <testsuite name="${testSuiteName}" tests="${numTests}" failures="${numFailures}" errors="${numErrors}" time="${time}">`,
      );
      for (res in results) {
        this.writeLine(
          `    <testcase name="${res.name}" file="${res.file}" line="${
            res.line
          }" time="${res.time}" classname="${res.suite}">`,
        );
        if (res.stdout != "") {
          this.writeLine(`      <system-out>${res.stdout}</system-out>`);
          this.writeLine(`      <system-err>${res.stderr}</system-err>`)
        };
        if (res.result != "success") {
          this.writeLine(
            `      <failure message="${res.failure_message}" type="${
              res.failure_type
            }"></failure>`,
          )
        };
        this.writeLine("    </testcase>")
      };
      this.writeLine("  </testsuite>");
    };
    this.writeLine("</testsuites>")
  }
}

mutable class JSONTestReporter{} extends TestReporter {
  mutable fun report(res: TestResult): void {
    this.writeLine(res.toJSON())
  }
}

module end;
