module SKTest;

class TestResult{
  name: String,
  suite: String,
  file: String,
  line: Int,
  result: String = "",
  time: Int = -1,
  failure_type: String = "",
  failure_message: String = "",
  failure_extra: String = "",
} {
  static fun fromJSON(s: String): TestResult {
    v = JSON.decode(s).expectMap();
    TestResult{
      name => v["name"].expectString(),
      suite => v["suite"].expectString(),
      file => v["file"].expectString(),
      line => v["line"].expectInt(),
      result => v["result"].expectString(),
      time => v["time"].expectInt(),
      failure_type => v["failure_type"].expectString(),
      failure_message => v["failure_message"].expectString(),
      failure_extra => v["failure_extra"].expectString(),
    }
  }

  fun toJSON(): String {
    JSON.Object[
      "name" => JSON.String(this.name),
      "suite" => JSON.String(this.suite),
      "file" => JSON.String(this.file),
      "line" => JSON.IntNumber(this.line),
      "result" => JSON.String(this.result),
      "time" => JSON.IntNumber(this.time),
      "failure_type" => JSON.String(this.failure_type),
      "failure_message" => JSON.String(this.failure_message),
      "failure_extra" => JSON.String(this.failure_extra),
    ].encode()
  }
}

mutable base class TestReporter{output: ?String = None()} {
  mutable fun report(res: TestResult): void;
  mutable fun writeLine(str: String): void {
    this.output match {
    | Some(file) -> FileSystem.appendTextFile(file, str + "\n")
    | None() -> print_string(str)
    }
  }
  overridable mutable fun finish(): void {
    void
  }
}

mutable class BasicTestReporter{
  color: Bool,
  private mutable successes: Int = 0,
  private mutable failures: Int = 0,
} extends TestReporter {
  mutable fun report(res: TestResult): void {
    result = if (res.result == "success") {
      this.!successes = this.successes + 1;
      this.success() + ` ${res.suite} ${res.name}`
    } else {
      this.!failures = this.failures + 1;
      this.failure() +
        ` ${res.suite} ${res.name}\n${res.failure_type}: ${res.failure_message}`
    };
    this.writeLine(result)
  }

  mutable fun finish(): void {
    this.writeLine(
      `Failures: ${this.failures}, successes: ${this.successes} (total: ${this
        .successes + this.failures})`,
    )
  }

  private readonly fun failure(): String {
    if (this.color) {
      TermColor.colored(
        "[FAILURE]",
        TermColor.Red(),
        TermColor.Default(),
        Array[TermColor.Bold()],
      );
    } else {
      "[FAILURE]"
    }
  }

  private readonly fun success(): String {
    if (this.color) {
      TermColor.colored("[OK]", TermColor.Green());
    } else {
      "[OK]"
    }
  }
}

mutable class XmlTestReporter{
  results: mutable Map<String, mutable Vector<TestResult>> = mutable Map[],
} extends TestReporter {
  mutable fun report(res: TestResult): void {
    if (!this.results.containsKey(res.suite)) {
      this.results.set(res.suite, mutable Vector[])
    };
    this.results[res.suite].push(res)
  }

  mutable fun finish(): void {
    this.writeLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    totalTests = this.results.values()
      .map(x -> x.size())
      .foldl((acc, x) -> acc + x, 0);
    totalFailures = this.results.values()
      .map(ts ->
        ts.values().filter(r -> r.result != "success").collect(Array).size()
      )
      .foldl((acc, x) -> acc + x, 0);
    this.writeLine(
      `<testsuites tests="${totalTests}" failures="${totalFailures}" errors="0" time="0" timestamp="0" name="AllTests">`,
    );
    for ((testSuiteName, results) in this.results.items()) {
      numTests = results.size();
      numFailures = results.filter(r -> r.result == "failure").size();
      numErrors = results.filter(r -> r.result == "error").size();
      totalTime = 0; // TODO
      this.writeLine(
        `  <testsuite name="${testSuiteName}" tests="${numTests}" failures="${numFailures}" errors="${numErrors}" time="${totalTime}">`,
      );
      for (res in results) {
        this.writeLine(
          `    <testcase name="${res.name}" file="${res.file}" line="${
            res.line
          }" time="${res.time}" classname="${res.suite}">`,
        );
        if (res.result != "success") {
          this.writeLine(
            `      <failure message="${res.failure_message}" type="${
              res.failure_type
            }">${res.failure_extra}</failure>`,
          )
        };
        this.writeLine("    </testcase>")
      };
      this.writeLine("  </testsuite>");
    };
    this.writeLine("</testsuites>")
  }
}
