module Skbuild;

class Env(
  refDir: String,
  outDir: String,
  name: String,
  profile: String,
  optTarget: ?String,
  test: Bool,
  verbose: Bool,
) {
  static fun create(): Env {
    Env(
      Environ.var("PCK_DIR"),
      Environ.var("OUT_DIR"),
      Environ.var("NAME"),
      Environ.var("PROFILE"),
      Environ.varOpt("TARGET"),
      Environ.var("TEST").lowercase() == "true",
      Environ.var("VERBOSE").lowercase() == "true",
    )
  }

  fun resolve(path: String): String {
    Path.resolve(this.refDir, path)
  }

  fun outpath(path: String): String {
    Path.join(this.outDir, path)
  }

  fun relative(path: String): String {
    relative(path, this.refDir).fromSome()
  }

  fun targetPath(path: String, ext: String): String {
    targetPath(this.outDir, this.relative(path), ext)
  }

  fun resourcePath(path: String, ext: String): String {
    targetPath(
      this.outDir,
      this.name + "_" + this.relative(path).replace("/", "_"),
      ext,
    )
  }

  fun printString(str: String): void {
    if (this.verbose) {
      print_string(str)
    };
  }

  fun printError(error: String): void {
    if (this.verbose) {
      print_error(error)
    };
  }

  fun run(args: Array<String>): void {
    if (this.verbose) {
      // TODO: colors
      print_error(`>> ${args.join(" ")}`)
    };
    p = System.subprocess(args, this.printString, this.printError);
    if (!p.success()) {
      if (!this.verbose) {
        print_raw(p.stdout);
        print_error_raw(p.stderr);
      };
      throw RuntimeException(p.exitcode())
    };
  }
}

fun build(isWasm: Bool): Env {
  env = Env::create();
  includeDirs = Array[];
  #forEachFunction (@skbuild_include_dirs, #function, #functionName) {
    !includeDirs = includeDirs.concat(#function(env));
  };
  links = Array[];
  #forEachFunction (@skbuild_links, #function, #functionName) {
    !links = links.concat(#function(env));
  };
  sourceDirs = Array[];
  #forEachFunction (@skbuild_source_dirs, #function, #functionName) {
    !sourceDirs = sourceDirs.concat(#function(env));
  };
  preambles = Array[];
  #forEachFunction (@skbuild_preambles, #function, #functionName) {
    !preambles = preambles.concat(#function(env));
  };
  resources = Array[];
  #forEachFunction (@skbuild_resources, #function, #functionName) {
    !resources = resources.concat(#function(env));
  };
  resourceDirs = Array[];
  #forEachFunction (@skbuild_resource_dirs, #function, #functionName) {
    !resourceDirs = resourceDirs.concat(#function(env));
  };
  build_harness(
    env,
    isWasm,
    includeDirs,
    sourceDirs,
    preambles,
    links,
    resources,
    resourceDirs,
  );
}

fun build_harness(
  env: Env,
  isWasm: Bool,
  includeDirs: Array<String>,
  sourceDirs: Array<String>,
  preambles: Array<String>,
  links: Array<String>,
  resources: Array<String>,
  resourceDirs: Array<String>,
): Env {
  resourceObjs = Array[];
  resourceInfos = mutable Map[];
  resources.each(res -> {
    resPath = env.resolve(res);
    if (FileSystem.exists(resPath)) {
      if (!isWasm) {
        !resourceObjs = resourceObjs.concat(Array[buildResource(env, resPath)])
      } else {
        saved = saveResource(env, res, resPath);
        resourceInfos.set(saved.i0, saved.i1)
      }
    }
  });
  resourceDirs.each(res -> {
    resPath = env.resolve(res);
    if (FileSystem.exists(resPath)) {
      name = Path.basename(resPath);
      archiveDir = Path.parentname(resPath);
      archive = Path.join(archiveDir, `${name}.tar.gz`);
      env.run(
        Array[
          "bash",
          "-c",
          `cd ${archiveDir} && tar -zcvf ${name}.tar.gz ${name}/`,
        ],
      );
      if (!isWasm) {
        !resourceObjs = resourceObjs.concat(Array[buildResource(env, archive)]);
      } else {
        saved = saveResource(env, res, resPath);
        resourceInfos.set(saved.i0, saved.i1)
      };
      env.run(Array["rm", archive])
    }
  });
  if (!resourceInfos.isEmpty()) {
    rjson = JSON.Object(resourceInfos.map((_, v) -> JSON.String(v)));
    stream = mutable Vector[];
    rjson.writeToStream(stream.push, 2);
    FileSystem.writeTextFile(env.outpath("resources.json"), stream.join(""));
  };
  includeChecker = TimeChecker();
  !includeDirs = includeDirs.map(id -> {
    if (!Path.isAbsolute(id)) {
      !id = env.resolve(id)
    };
    if (FileSystem.exists(id)) {
      FileSystem.readFilesRecursive(
        id,
        f ~> f.endsWith(".hpp") || f.endsWith(".h"),
        _f ~> false,
      ).each(i -> !includeChecker = includeChecker.add(i));
    };
    id
  });
  libname = `lib${env.name}.${if (isWasm) "bc" else "a"}`;
  target = env.outpath(libname);
  library = buildLibrary(
    env,
    isWasm,
    sourceDirs,
    target,
    resourceObjs,
    includeDirs,
    includeChecker,
  );
  library.each(print_library);
  preambles
    .map(p -> {
      if (!Path.isAbsolute(p)) {
        !p = env.resolve(p)
      };
      p
    })
    .each(print_preamble);
  links.each(print_link);
  env;
}

fun buildLibrary(
  env: Env,
  isWasm: Bool,
  sourceDirs: Array<String>,
  target: String,
  resources: Array<String>,
  includeDirs: Array<String>,
  includeChecker: TimeChecker,
): ?String {
  sources = sourceDirs.map(sd -> {
    if (!Path.isAbsolute(sd)) {
      !sd = env.resolve(sd)
    };
    FileSystem.readFilesRecursive(
      sd,
      f ~> f.endsWith(".cpp") || f.endsWith(".c"),
      _f ~> false,
    )
  });
  if (sources.isEmpty() && resources.isEmpty()) {
    return None()
  };
  sourcesTime = includeChecker;
  sources.each(sd -> sd.each(s -> !sourcesTime = sourcesTime.add(s)));
  resources.each(rcs -> !sourcesTime = sourcesTime.add(rcs));
  includeOptions = includeDirs.map(i -> `-I${i}`);
  if (sourcesTime.isYoungerThan(target)) {
    objects = Array[];
    sources.each(tsd ->
      !objects = objects.concat(
        tsd
          .map(f -> compileFile(env, isWasm, f, includeChecker, includeOptions))
          .toArray(),
      )
    );
    cmd = if (isWasm) {
      Array["llvm-link", "-o", target].concat(objects).concat(resources)
    } else {
      Array["ar", "rcs", target].concat(objects).concat(resources)
    };
    run(cmd, env.verbose);
  };
  Some(target)
}

fun buildResource(env: Env, file: String): String {
  checker = TimeChecker(mtime(file));
  object = env.targetPath(file, ".o");
  if (checker.isYoungerThan(object)) {
    ensureDirectory(Path.dirname(object), env.verbose);
    relative = env.relative(file);
    nf = file.replace("/", "_").replace(".", "_");
    nr = relative.replace("/", "_").replace(".", "_");
    redefs = mutable Vector<String>[];
    Array["start", "size", "end"].each(suffix -> {
      redefs.push("--redefine-sym");
      redefs.push(`_binary_${nf}_${suffix}=_binary_${nr}_${suffix}`);
    });
    (b, o) = copyObjOptions();
    cmd = Array[
      "objcopy",
      "-B",
      b,
      "-I",
      "binary",
      "-O",
      o,
      file,
      object,
    ].concat(redefs.toArray());
    run(cmd, env.verbose);
  };
  object
}

fun targetPath(dir: String, file: String, suffix: String): String {
  dirname = Path.dirname(file);
  ext = Path.extname(file);
  basename = Path.basename(file);
  !basename = basename.take(basename.length() - ext.length());
  Path.join(dir, Path.join(dirname, `${basename}${suffix}`));
}

fun relative(path: String, to: String): ?String {
  if (!to.endsWith("/")) {
    !to = to + "/";
  };
  if (path.startsWith(to)) {
    Some(path.sub(path.getIter().drop(to.chars().size()), path.chars().size()))
  } else {
    None()
  }
}

class RuntimeException(code: Int) extends Exception {
  fun getMessage(): String {
    `Runtime error with code ${this.code}`
  }
}

fun run(args: Array<String>, verbose: Bool): void {
  if (verbose) {
    // TODO: colors
    print_error(`>> ${args.join(" ")}`)
  };
  p = System.subprocess(args);
  if (!p.success()) {
    print_raw(p.stdout);
    print_error_raw(p.stderr);
    throw RuntimeException(p.exitcode())
  };
}

fun ensureDirectory(path: String, verbose: Bool): void {
  if (!FileSystem.exists(path)) {
    run(Array["mkdir", "-p", path], verbose)
  }
}

fun arch(): String {
  p = System.subprocess(Array["gcc", "-dumpmachine"]);
  p.stdout.trim();
}

fun copyObjOptions(): (String, String) {
  arch().split("-").maybeGet(0) match {
  | Some("x86_64") -> ("i386:x86-64", "elf64-x86-64")
  | Some("aarch64")
  | _ ->
    ("aarch64", "elf64-littleaarch64")
  }
}

fun compileFile(
  env: Env,
  isWasm: Bool,
  source: String,
  includesChecker: TimeChecker,
  includes: Array<String>,
): String {
  ext = if (isWasm) ".bc" else ".o";
  object = env.targetPath(source, ext);
  if (includesChecker.add(source).isYoungerThan(object)) {
    ensureDirectory(Path.dirname(object), env.verbose);
    cmd = (if (source.endsWith(".c")) Array["clang"] else {
      Array["clang++", "-std=c++17"]
    })
      .concat(
        if (env.profile == "debug") {
          Array["-O0", "-g", "-DDEBUG"]
        } else if (env.profile == "release") {
          Array["-O3", "-DRELEASE"]
        } else {
          Array["-O2", "-g", "-DDEV"]
        },
      )
      .concat(
        if (isWasm) {
          Array["-DSKIP32", "--target=wasm32", "-emit-llvm"]
        } else {
          Array["-DSKIP64"]
        },
      )
      .concat(includes)
      .concat(Array["-o", object, "-c", source]);
    run(cmd, env.verbose);
  };
  object
}

fun print_library(library: String): void {
  print_string(`skargo:library=${library}`);
}

fun print_preamble(preamble: String): void {
  print_string(`skargo:preamble=${preamble}`);
}

fun print_link(link: String): void {
  print_string(`skargo:link=${link}`);
}

module end;
