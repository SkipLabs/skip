module alias T = SKTest;

module SkcTests;

private fun compile_cmd(
  files: readonly Sequence<String>,
  output: String,
): Array<String> {
  Array[
    "skc",
    "-O0",
    "--no-inline",
    "--export-function-as",
    "main=skip_main",
    "-o",
    output,
  ].concat(files.collect(Array))
}

private fun genValidTest(basename: String, stdlibSrcs: Array<String>): void {
  p = System.subprocess(
    compile_cmd(stdlibSrcs.concat(Array[basename + ".sk"]), basename + ".bin"),
  );
  if (!p.success()) {
    T.fail(
      `Unexpected compile error\nstdout: ${p.stdout}\nstderr:\n${p.stderr}`,
    );
  };

  !p = System.subprocess(Array[basename + ".bin"]);

  if (!p.success()) {
    T.fail(`Unexpected error\nstdout: ${p.stdout}\nstderr:\n${p.stderr}`);
  };

  actual = p.stdout;
  expected = FileSystem.readTextFile(basename + ".exp");

  T.expectEq(actual, expected)
}

private fun genInvalidTest(basename: String, stdlibSrcs: Array<String>): void {
  p = System.subprocess(
    compile_cmd(stdlibSrcs.concat(Array[basename + ".sk"]), basename + ".bin"),
  );

  if (p.success()) {
    T.fail("Expected compile error")
  };

  // NOTE: The `.trim()` is needed because error messages seem to currently
  // have an extra newline.
  actual = p.stderr.trim();
  expected = FileSystem.readTextFile(basename + ".exp_err").trim();

  T.expectEq(actual, expected)
}

fun main(): void {
  tests = mutable Map[];

  stdlibSrcs = FileSystem.readFilesRecursive("../prelude/src").collect(Array);

  validTests = FileSystem.readFilesRecursive("./tests", fn ->
    fn.endsWith(".exp") && !fn.contains("invalid/")
  );

  for (testFile in validTests) {
    basename = testFile.stripSuffix(".exp");
    (testSuite, testName) = basename.stripPrefix("tests/").splitLast("/");
    tests
      .getOrAdd(testSuite, () -> mutable Vector[])
      .push(
        T.Test{
          name => testName,
          func => () ~> genValidTest(basename, stdlibSrcs),
        },
      );
  };

  invalidTests = FileSystem.readFilesRecursive("./tests", fn ->
    fn.endsWith(".exp") && fn.contains("invalid/")
  );

  for (testFile in invalidTests) {
    basename = testFile.stripSuffix(".exp");
    (testSuite, testName) = basename.stripPrefix("tests/").splitLast("/");
    tests
      .getOrAdd(testSuite, () -> mutable Vector[])
      .push(
        T.Test{
          name => testName,
          func => () ~> genInvalidTest(basename, stdlibSrcs),
        },
      )
  };

  SKTest.test_harness(tests)
}

module end;
