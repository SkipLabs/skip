trait Foo<-T> {
  fun doit(): Int;
}

trait HasBar {
  fun bar(): Int;
}

// also has EqualityIsh[T: OrderableIsh]
base class P1<-T> uses Foo<T>[T: HasBar]
base class P2<-T> uses Foo<T>[T: HasBar]
class C(t: XBar, u: NoBar) extends P1<XBar>, P2<NoBar> {
  fun doit(): Int {
    this.t.bar()
  }
}

base class NoBar
class XNoBar() extends NoBar
class XBar() extends NoBar uses HasBar {
  fun bar(): Int {
    42
  }
}

fun fooit<T: Foo<XBar>>(x: T): Int {
  x.doit()
}

fun main(): void {
  c = C(XBar(), XNoBar());
  _ = fooit(c);
  print_string("Pass")
}
