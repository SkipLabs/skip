File "./typechecking/invalid/infer_frozen_met_2.sk", line 8, characters 3-32:
Constraint not satisfied
 6 |
 7 | fun test(): void {
 8 |   Tester().foo(mutable Array[0])
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 9 | }

File "./typechecking/invalid/infer_frozen_met_2.sk", line 8, characters 16-31:
The mutable type 'mutable Array<Int>' appeared inside an immutable type.
 6 |
 7 | fun test(): void {
 8 |   Tester().foo(mutable Array[0])
   |                ^^^^^^^^^^^^^^^^
 9 | }

File "./typechecking/invalid/infer_frozen_met_2.sk", line 2, characters 14-19:
This type is immutable, and immutable types must be deeply frozen. To make it mutable, preface it with 'mutable', or for generics try removing any 'frozen' constraint.
1 | class Tester() {
2 |   fun foo<T: frozen, U: Array<T>>(T): void {
  |              ^^^^^^
3 |     void

File "./typechecking/invalid/infer_frozen_met_2.sk", line 8, characters 24-31:
To keep it immutable, try calling 'freeze' on any expression of this type, or try removing the 'mutable' modifier
 6 |
 7 | fun test(): void {
 8 |   Tester().foo(mutable Array[0])
   |                        ^^^^^^^^
 9 | }
