/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

fun main(): void {
  results = Cli.Command("skc")
    .about("Skip compiler")
    .help()
    .arg(Cli.BoolArg("disasm-all"))
    .arg(Cli.BoolArg("disasm-annotated"))
    .arg(Cli.StringArg("disasm-file").repeatable())
    .arg(Cli.StringArg("disasm-function").repeatable())
    .arg(Cli.StringArg("export-function").repeatable())
    .arg(Cli.StringArg("export-function-as").repeatable())
    .arg(Cli.StringArg("export-module").repeatable())
    .arg(Cli.StringArg("output").long("output").short("o"))
    // .arg(Cli.StringArg("profile-path").default(""))
    .arg(Cli.StringArg("emit").default("link"))
    .arg(Cli.StringArg("target"))
    .arg(Cli.StringArg("opt-level").short("O").default("3"))
    .arg(Cli.BoolArg("asan"))
    .arg(Cli.BoolArg("autogc").default(true).negatable())
    .arg(Cli.StringArg("sample-rate").default("0"))
    .arg(Cli.BoolArg("use-specialized-names"))
    .arg(Cli.BoolArg("version"))
    // Global config flags
    .arg(Cli.BoolArg("release"))
    .arg(Cli.BoolArg("verbose").short("v").long("verbose"))
    .arg(Cli.BoolArg("debug"))
    // Optimization config flags
    // .arg(Cli.BoolArg("localopts").default(true).negatable())
    .arg(Cli.BoolArg("dce").default(true).negatable())
    .arg(Cli.BoolArg("peephole").default(true).negatable())
    .arg(Cli.BoolArg("control").default(true).negatable())
    .arg(Cli.BoolArg("regpromote").default(true).negatable())
    .arg(Cli.BoolArg("inline").default(true).negatable())
    .arg(Cli.BoolArg("ipa").default(true).negatable())
    .arg(Cli.BoolArg("verify").default(true).negatable())
    .arg(Cli.BoolArg("goto").negatable())
    // .arg(Cli.BoolArg("noopt"))
    // These are handled in skipUtils.sk
    // Just allow them to be ignored here
    .arg(Cli.BoolArg("profile"))
    .arg(Cli.StringArg("data"))
    .arg(Cli.StringArg("init"))
    .arg(Cli.BoolArg("check"))
    .arg(Cli.StringArg("files").positional().repeatable())
    .parseArgs();

  results.error match {
  | Some(exn) ->
    print_error_ln(exn.getMessage().trim());
    print_error(Cli.usage(results.cmd, false));
    skipExit(1)
  | _ -> void
  };

  config = Config.Config::make(results);

  isInit = results.maybeGetString("init").isSome();
  if (isInit) {
    _ = SKStore.gContextInit(SKStore.Context{});
  };
  SKStore.runWithGc(
    SKStore.Context{},
    _context ~> {
      SKStore.CStop(
        Some((context, _, _) ~> {
          try {
            compile(config, context, config.unknown)
          } catch {
          | exn ->
            print_error(exn.getMessage());
            skipExit(2)
          }
        }),
      )
    },
    Some(SKStore.Synchronizer(SKStore.import, SKStore.export, _ ~> void)),
  )
}
