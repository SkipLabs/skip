/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Config;

// Global config object.
const .kConfig: Config = {
  SKFS.unsafeEnableNewConstMode();
  Config::make();
};

// global config settings, built from arguments() on startup.
private class Config{
  release: Bool,
  verbose: Bool,
  optConfig: Optimize.Config,
  mainConfig: Main.Config,
  unknown: Array<String>,
} {
  static fun make(): this {
    results = Cli.Command("skc")
      .about("Skip compiler")
      .help()
      .arg(Cli.BoolArg("disasm-all"))
      .arg(Cli.BoolArg("disasm-annotated"))
      .arg(Cli.ArrayArg("disasm-file").default(Array[]))
      .arg(Cli.ArrayArg("disasm-function").default(Array[]))
      .arg(Cli.ArrayArg("export-function").default(Array[]))
      .arg(Cli.ArrayArg("export-function-as").default(Array[]))
      .arg(Cli.ArrayArg("export-module").default(Array[]))
      .arg(Cli.ArrayArg("output").long("output").short("o").default(Array["-"]))
      // .arg(Cli.StringArg("profile-path").default(""))
      .arg(Cli.ArrayArg("preamble").default(Array[]))
      .arg(Cli.BoolArg("wasm"))
      .arg(Cli.BoolArg("embedded32"))
      .arg(Cli.BoolArg("embedded64"))
      .arg(Cli.BoolArg("asan"))
      .arg(Cli.BoolArg("autogc").default(true).negatable())
      .arg(Cli.StringArg("sample-rate").default("0"))
      .arg(Cli.BoolArg("use-specialized-names"))
      .arg(Cli.BoolArg("version"))
      // Global config flags
      .arg(Cli.BoolArg("release"))
      .arg(Cli.BoolArg("verbose").short("v").long("verbose"))
      // Optimization config flags
      .arg(Cli.BoolArg("localopts"))
      .arg(Cli.BoolArg("dce").default(true).negatable())
      .arg(Cli.BoolArg("peephole").default(true).negatable())
      .arg(Cli.BoolArg("control").default(true).negatable())
      .arg(Cli.BoolArg("regpromote").default(true).negatable())
      .arg(Cli.BoolArg("inline").default(true).negatable())
      .arg(Cli.BoolArg("ipa").default(true).negatable())
      .arg(Cli.BoolArg("verify").default(true).negatable())
      .arg(Cli.BoolArg("goto"))
      .arg(Cli.BoolArg("noopt"))
      // These are handled in skipUtils.sk
      // Just allow them to be ignored here
      .arg(Cli.ArrayArg("debug"))
      .arg(Cli.BoolArg("profile"))
      .arg(Cli.StringArg("data"))
      .arg(Cli.StringArg("init"))
      .arg(Cli.BoolArg("check"))
      .arg(Cli.ArrayArg("files").positional().default(Array[]))
      .parseArgs();

    results.error match {
    | Some(exn) ->
      print_error_ln(exn.getMessage().trim());
      print_error(Cli.usage(results.cmd, false));
      skipExit(1)
    | _ -> void
    };

    // modules configure themselves
    optConfig = Optimize.Config::make(results);
    mainConfig = Main.Config::make(results);

    release = results.getBool("release");
    verbose = results.getBool("verbose");
    // preserve legacy behavior of capturing all unmatched args in a single array
    unknown = results.getArray("files");

    Config{release, verbose, optConfig, mainConfig, unknown}
  }
}

module end;
