/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Main;

private fun hostTarget(): String {
  // TODO: invoke llvm-config --host-target
  "x86_64-pc-linux-gnu"
}

class Config private {
  exportedFunctions: UnorderedSet<String>,
  exportedAsFunctions: UnorderedMap<String, String>,
  disasmAll: Bool,
  disasmAnnotated: Bool,
  disasmFiles: UnorderedSet<String>,
  disasmFunctions: UnorderedSet<String>,
  output: String,
  // profilePath: String,
  emit: String,
  target: String,
  optLevel: Int,
  asan: Bool,
  autogc: Bool,
  sampleRate: Int,
  // NOTE: Using fully specialized class names yields more detailed stats
  // info, but inhibits sharing, which increases compilation time and
  // binary sizes.
  useSpecializedNames: Bool,
  version: Bool,
  check: Bool,
  stackAlign: Int,
  stackAlignStr: String,
  ptrByteSize: Int,
  ptrBitSize: Int,
  vtableByteSize: Int,
} {
  static fun make(result: Cli.ParseResults): this {
    disasmAll = result.getBool("disasm-all");
    disasmAnnotated = result.getBool("disasm-annotated");
    disasmFiles = UnorderedSet::createFromItems(result.getArray("disasm-file"));
    disasmFunctions = UnorderedSet::createFromItems(
      result.getArray("disasm-function"),
    );
    exportedFunctions = UnorderedSet::createFromItems(
      result.getArray("export-function"),
    );
    exportedAsFunctions = UnorderedSet::createFromItems(
      result.getArray("export-function-as"),
    );
    output = result.maybeGetString("output").default("-");
    // profilePath = result.getString("profile-path");
    emit = result.getString("emit");
    target = result.maybeGetString("target").default(hostTarget());
    optLevel = result.getString("opt-level").toInt();
    asan = result.getBool("asan");
    autogc = result.getBool("autogc");
    sampleRate = result.getString("sample-rate").toInt();
    useSpecializedNames = result.getBool("use-specialized-names");
    version = result.getBool("version");
    check = result.getBool("check");

    if (version) {
      print_string(getBuildVersion());
      skipExit(0);
    };

    exportAs = mutable UnorderedMap[];
    for (f in exportedAsFunctions) {
      vals = f.split("=");
      if (vals.size() != 2 || vals[0].isEmpty() || vals[1].isEmpty()) {
        print_error("Invalid --export-function-as: " + f + "\n");
        skipExit(1)
      };

      skipName = vals[0];
      cppName = vals[1];

      if (!exportAs.maybeSet(skipName, cppName)) {
        oldCppName = exportAs[skipName];
        if (oldCppName != cppName) {
          print_error(
            "Conflicting --export-function-as for " +
              skipName +
              ": " +
              oldCppName +
              " and " +
              cppName +
              "\n",
          );
          skipExit(1)
        }
      }
    };

    // Mac Clang seems to align stack arrays mod 16 -- is that required to always
    // keep the stack aligned or is 8 OK or what? Does Linux do that too?
    // x86-64 ABI on linux and mac require 16 byte alignment.
    // Does LLVM provide an portable abstraction?
    // TODO: Make a proper `Target` class that holds the relevant platform-specific
    // data, with a constructor that takes the target triple.
    stackAlign = if (target == "wasm32-unknown-unknown") 8 else 16;
    ptrByteSize = if (target == "wasm32-unknown-unknown") 4 else 8;
    stackAlignStr = stackAlign.toString();
    ptrBitSize = ptrByteSize * 8;
    vtableByteSize = ptrByteSize;

    static{
      exportedFunctions,
      exportedAsFunctions => exportAs.chill(),
      disasmAll,
      disasmAnnotated,
      disasmFiles,
      disasmFunctions,
      output,
      // profilePath,
      emit,
      target,
      optLevel,
      asan,
      autogc,
      sampleRate,
      useSpecializedNames,
      version,
      check,
      stackAlign,
      stackAlignStr,
      ptrByteSize,
      ptrBitSize,
      vtableByteSize,
    }
  }
}

module end;

fun createOptimizedFunctions(
  context: mutable SKFS.Context,
  env: GlobalEnv,
  config: Config.Config,
): GlobalEnv {
  runCompilerPhase("native/compile", () -> {
    !env = Optimize.compileAll(context, env, config);

    // Find all the functions that are still reachable from the root set,
    // post-inlining, dead code elimination, etc.
    !env.sfuns = findAllReachableFuns(
      keep -> {
        // Seed the "reachable" recursion with functions we definitely
        // need to emit.
        keep(env.initializeAllConstsID);
        for (f in env.sfuns) {
          if (f.isDisasm || f.isRuntimeExport) {
            keep(f.id)
          }
        };
        env.runtimeFunctions.values().each(keep)
      },
      env,
    );

    // Now that we have computed the fields for all of the various
    // coroutine classes, we can finally analyze pointer escape info.
    !env = Escape.computeWhetherPointersCanEscape(env);

    // optimize.sk steps (5) Lower + (6) Lay out vtables.
    !env = Lower.lowerFunctions(env, config)
  });

  env
}

// TODO: Move into runtime.
// Return the path to the main executable, given the value of argv[0] from
// program startup.
// Inspired from `llvm/lib/Support/Unix/Path.inc`.
fun getMainExecutable(argv0: String): String {
  // First approach: absolute path.
  if (argv0.startsWith("/")) {
    path = argv0;
    if (FileSystem.exists(path)) {
      return FileSystem.realpath(path)
    }
  };

  // Second approach: relative path.
  if (argv0.contains("/")) {
    path = Path.join(getcwd(), argv0);
    if (FileSystem.exists(path)) {
      return FileSystem.realpath(path)
    }
  };

  // Third approach: $PATH
  for (p in getenv("PATH").split(":")) {
    path = Path.join(p, argv0);
    if (FileSystem.exists(path)) {
      return FileSystem.realpath(path)
    }
  };

  invariant_violation("Cannot determine main executable.")
}

fun link(llFile: String, config: Config.Config): void {
  basePath = Path.parentname(Path.dirname(getMainExecutable(getArg0())));

  if (config.mainConfig.target.startsWith("wasm32")) {
    output = config.mainConfig.output;
    bcFile = output + ".bc";
    runtime = Path.join(basePath, "lib", "libskip_runtime32.bc");
    runShell(Array["llvm-link", llFile, runtime, "-o", bcFile], config.verbose);
    oFile = output + ".o";
    runShell(
      Array[
        "llc",
        "-mtriple=wasm32-unknown-unknown",
        `-O${config.mainConfig.optLevel}`,
        "-filetype=obj",
        bcFile,
        "-o",
        oFile,
      ],
      config.verbose,
    );
    // TODO: Proper mechanism to select exports.
    exportJs = Array[
      "getCompositeName",
      "getCompositeSize",
      "getCompositeAt",
      "SKIP_String_byteSize",
      "getLeafValue",
      "objectKind",
      "SKIP_call0",
      "SKIP_Obstack_alloc",
      "skip_main",
      "SKIP_init_jsroots",
      "SKIP_add_root",
      "SKIP_remove_root",
      "SKIP_tracked_call",
      "SKIP_tracked_query",
      "sk_string_create",
      "SKIP_initializeSkip",
      "SKIP_skfs_init",
      "SKIP_skfs_end_of_init",
      "SKIP_get_persistent_size",
      "sk_pop_dirty_page",
      "SKIP_get_version",
      "SKIP_throw_EndOfFile",
      "getVersion",
      "__heap_base",
    ].map(x -> `-export=${x}`);
    runShell(
      Array[
        "wasm-ld",
        "--initial-memory=1073741824",
        oFile,
        "-o",
        output,
        "--no-entry",
        "-allow-undefined",
      ].concat(exportJs),
      config.verbose,
    );
  } else {
    // TODO: Make the runtime a normal dependency.
    runtime = Path.join(basePath, "lib", "libskip_runtime64.a");
    // TODO: Link libbacktrace only when building with a debug/dev profile?
    libbacktrace = Path.join(basePath, "lib", "libbacktrace.a");
    runShell(
      Array[
        "clang++",
        "-no-pie",
        `-O${config.mainConfig.optLevel}`,
        "-mllvm",
        "-inline-threshold=0",
        llFile,
        "-o",
        config.mainConfig.output,
        runtime,
        libbacktrace,
        "-lrt",
        "-lpthread",
      ],
      config.verbose,
    );
  }
}

fun runShell(args: Array<String>, verbose: Bool = false): void {
  p = System.subprocess(
    args,
    s -> {
      if (verbose) {
        print_error_raw(s)
      }
    },
    s -> {
      if (verbose) {
        print_error_raw(s)
      }
    },
  );
  if (!p.success()) {
    skipExit(1)
  }
}

class TickConfigFile(value: (Int, Config.Config)) extends SKFS.File

fun compile(
  config: Config.Config,
  context: mutable SKFS.Context,
  fileNames: Array<String>,
): void {
  // Convert project:program-unit targets to a list of source files.

  if (fileNames.isEmpty()) {
    print_error("fatal error: no input files\n");
    skipExit(4); // Exit code used by g++ for no input files
  };

  if (context.unsafeMaybeGetDir(FileCache.fileDirName) is None()) {
    _ = context.mkdir(x ~> x, FileCache.fileDirName, Array[]);
    _ = context.mkdir(x ~> x, FileCache.fileTimeDirName, Array[]);
    _ = context.mkdir(x ~> x, FileCache.allFilesDirName, Array[]);
  };

  FileCache.writeFiles(context, fileNames);

  backendDirName = SKFS.DirName::create("/backend/");
  backendSinkDirName = SKFS.DirName::create("/backendSink/");

  if (context.unsafeMaybeGetEagerDir(backendDirName) is None()) {
    outerIst = OuterIstToIR.makeOuterIst(context);

    defsProj = outerIst.getFunsProj(context);
    constsProj = outerIst.getConstsProj(context);

    converter = OuterIstToIR.Converter::create(
      context,
      config,
      SKFS.DirName::create("/converter/"),
      outerIst,
    );

    backendDir = context.mkdir(
      TickConfigFile::fromFile,
      backendDirName,
      Array[(SKFS.IID(0), TickConfigFile((-128, config)))],
    );

    _ = backendDir.contextWriterKeyValues(
      TickConfigFile::fromFile,
      context,
      backendSinkDirName,
      (context, _writer, _key, values) ~> {
        (_, conf) = TickConfigFile::fromFile(values[0]).value;

        context.getGlobal("ERRORS") match {
        | None() -> void
        | Some(errors) ->
          SkipError.printErrorsAndExit(
            SkipError.ErrorsFile::fromFile(errors).value.reversed().toArray(),
          )
        };

        if (conf.mainConfig.check) {
          return void;
        };

        // Create a filter for what functions to compile.
        shouldRuntimeExport = (
          funDef ~>
            AsmOutput.cppIsExported(
              funDef.origName,
              funDef.annotations,
              funDef.getPos(),
              conf.mainConfig.exportedAsFunctions,
            )
        );

        // Are we in "disassemble" mode?
        disasm = (
          conf.mainConfig.disasmAll ||
          conf.mainConfig.disasmAnnotated ||
          !conf.mainConfig.disasmFiles.isEmpty() ||
          !conf.mainConfig.disasmFunctions.isEmpty()
        );

        // Create a filter for what functions to disassemble.
        //
        // Note that for "disasmAll" we do not return true, since we only want
        // to disassemble code which is actually used, and returning true would
        // force everything to be compiled just so it could be disassembled.
        shouldDisasm = (
          funDef ~>
            disasm &&
              (conf.mainConfig.disasmFunctions.contains(funDef.origName) ||
                (conf.mainConfig.disasmAnnotated &&
                  annotationsContain(
                    funDef.annotations,
                    "@disasm",
                    funDef.getPos(),
                  )))
        );

        env = OuterIstToIR.createIR(
          context,
          conf,
          shouldDisasm,
          shouldRuntimeExport,
          outerIst,
          converter,
          constsProj,
          defsProj,
        );

        !env = createOptimizedFunctions(context, env, conf);
        defs = runCompilerPhase("native/create_asm_graph", () -> {
          AsmOutput.createAsmDefGraph(env, conf)
        });

        runCompilerPhase("native/merge_asm_graph", () -> {
          AsmOutput.mergeIdenticalAsmDefs(defs, conf.verbose)
        });

        runCompilerPhase("native/create_asm_symbols", () -> {
          AsmOutput.assignFinalSymbols(defs)
        });

        conf.mainConfig.emit match {
        | "llvm-ir" ->
          runCompilerPhase("native/write_asm_files", () -> {
            AsmOutput.writeOutputFiles(
              defs,
              fileNames,
              conf.mainConfig.output,
              conf,
            )
          })
        | "link" ->
          // TODO: Use `mkstemp()` instead.
          llFile = conf.mainConfig.output + ".ll";
          runCompilerPhase("native/write_asm_files", () -> {
            AsmOutput.writeOutputFiles(defs, fileNames, llFile, conf)
          });
          runCompilerPhase("native/link", () -> {
            link(llFile, conf)
          })
        | _ ->
          invariant_violation(
            "Unsupported value for `--emit`: " + conf.mainConfig.emit,
          )
        }
      },
    );
  } else {
    context
      .unsafeGetEagerDir(backendDirName)
      .writeArray(
        context,
        SKFS.IID(0),
        Array[TickConfigFile((context.tick.value, config))],
      );
  };
  context.update()
}
