/*****************************************************************************/
/* A really dumb LLVM emitter starting from OuterIst.
 * Hopefully that could become a debug backend one day.
 */
/*****************************************************************************/

module alias O = OuterIst;

module EmitLLVM;

mutable class Emitter{
  mutable counter: Int = 0,
  locals: mutable Map<String, String> = mutable Map[],
  mutable o: String -> void = print_raw,
} {
  static fun run(
    context: mutable SKStore.Context,
    outer: O.Program,
    funName: String,
  ): void {
    arr = outer.program.getArray(context, SKStore.SID(funName));
    if (arr.size() == 0) {
      print_error("Function " + funName + " not found");
      skipExit(2)
    };
    fd = arr[0].value match {
    | O.DFun(fd) -> fd
    | _ ->
      print_error(funName + " is not a function");
      skipExit(2)
    };
    emitter = mutable Emitter{};
    emitter.o("declare i32 @print_int(i64)\n");
    emitter.funDef(fd.lower(context, outer))
  }

  mutable fun funDef(fd: O.FunDef): void {
    if (fd.body is Some _) {
      this.o("define ");
    } else {
      this.o("declare ");
    };
    this.type_(fd.return_);
    this.o(" ");
    this.o("@");
    this.o(fd.name.id);
    this.o("(");
    params = fd.params match {
    | Positional(x) -> x
    | Named(y) -> y.collect(Array)
    };
    if (params.size() > 0) {
      for (i in Range(0, params.size() - 1)) {
        this.parameter(params[i]);
        this.o(", ");
      };
      this.parameter(params[params.size() - 1]);
    };
    this.o(")");
    fd.body match {
    | None() -> this.o("\n")
    | Some(body) ->
      this.o(" {\n");
      body match {
      | O.OuterBody(stmt) ->
        this.stmt(stmt);
        this.o("\n")
      | _ -> invariant_violation("Should have been lowered")
      };
      this.o("}\n")
    };
  }

  mutable fun type_(ty: O.Type): void {
    ty.ty match {
    | O.Tany() -> this.o("i32")
    | O.Tapply(O.Name(_, "Void"), arr) ->
      invariant(arr.size() == 0);
      this.o("i32")
    | O.Tapply(O.Name(_, "Int"), arr) ->
      invariant(arr.size() == 0);
      this.o("i64")
    | _ ->
      debug(("TODO type", ty));
      invariant_violation("TODO")
    }
  }

  mutable fun parameter(p: O.Parameter): void {
    this.type_(p.type);
    this.o(" ");
    this.o(p.name.id);
  }

  mutable fun tmp(): String {
    sym = "%r" + this.counter;
    this.!counter = this.counter + 1;
    this.o(sym);
    sym
  }

  mutable fun local(name: String): void {
    this.locals.maybeGet(name) match {
    | None() ->
      sym = "%r" + this.counter;
      this.!counter = this.counter + 1;
      this.locals![name] = sym;
      this.o(sym)
    | Some(x) -> this.o(x)
    }
  }

  mutable fun save<T>(f: () -> T): (String, T) {
    v = mutable Vector[];
    o = this.o;
    this.!o = x -> v.push(x);
    result = f();
    this.!o = o;
    (v.join(""), result)
  }

  mutable fun stmt(s: O.Stmt): void {
    this.o("  ");
    s match {
    | O.Bind(binding, eopt) ->
      sym = eopt match {
      | None() -> None()
      | Some(x) -> Some(this.expr(x))
      };
      this.local(binding.name.id);
      this.o(" = ");
      this.o("alloca ");
      this.type_(binding.ty);
      sym match {
      | None() -> void
      | Some(x) -> this.o(", " + x)
      }
    | O.Return(e) ->
      sym = this.expr(e);
      this.o("ret ");
      this.type_(e.ty);
      this.o(" ");
      this.o(sym)
    | O.SingleExpr(e) -> _sym = this.expr(e)
    | O.Seq(stmts) ->
      for (stmt in stmts) {
        this.stmt(stmt);
      }

    /*
      | JumpTo(name: Name)
      | SingleExpr(expr: Expr)
      | Assign(localVar: LocalVar, expr: Expr)
      | AssignField(localVar: LocalVar, source: Name, name: Name, expr: Expr)
      | Seq(stmts: List<Stmt>)
      | If(expr: Expr, t: Stmt, f: Stmt)
      | Match(expr: Expr, branches: List<MatchBranch>)
      | Switch(expr: Expr, branches: List<SwitchBranch>, default_opt: ?Stmt)
      | TypeSwitch(expr: Expr, branches: List<TypeSwitchBranch>, default_opt: ?Stmt)
      | JumpBlock(stmts: List<LabeledStmt>, loopBlock: Bool)
      | Try(pos: FileRange, stmt: Stmt, branches: List<MatchBranch>)
      | TryCatch(pos: FileRange, stmt: Stmt, binding: Binding, catch_stmt: Stmt)
      | Throw(expr: Expr)
      | LoopForever(pos: FileRange, stmt: Stmt)
      | Yield(expr: Expr)
      | YieldBreak(pos: FileRange)
    */
    | _ ->
      debug(("TODO STMT", s));
      invariant_violation("TODO")
    };
    this.o("\n");
  }

  mutable fun expr(e: O.Expr): String {
    sym = this.save(() -> this.expr_(e));
    sym.i1 match {
    | None() -> sym.i0
    | Some(x) ->
      this.o(sym.i0);
      this.o("\n  ");
      x
    }
  }

  mutable fun funCall(
    ty: O.Type,
    funName: String,
    targs: Array<O.Type>,
    pargs: Parameters<OuterIst.Expr>,
  ): String {
    if (targs.size() > 0) {
      debug("targs not handled yet");
      invariant_violation("TODO")
    };
    args = pargs match {
    | Positional(x) -> x
    | Named(x) -> x.collect(Array)
    };
    symArgs = args.map(x -> (x.ty, this.expr(x)));
    tmp = this.tmp();
    this.o(" = ");
    this.o("call ");
    this.type_(ty);
    this.o(" @" + funName);
    this.o("(");
    if (symArgs.size() > 0) {
      for (i in Range(0, symArgs.size() - 1)) {
        this.type_(symArgs[i].i0);
        this.o(" ");
        this.o(symArgs[i].i1);
        this.o(", ");
      };
      this.type_(symArgs[0].i0);
      this.o(" ");
      this.o(symArgs[0].i1)
    };
    this.o(")");
    tmp
  }

  mutable fun expr_(e: O.Expr): ?String {
    e.expr match {
    | O.ELiteral(O.LVoid()) ->
      this.o("0");
      None()
    | O.ELiteral(O.LInt(n)) ->
      this.o(n.toString());
      None()
    | O.FunCall(funName, targs, pargs) ->
      Some(this.funCall(e.ty, funName.id, targs, pargs))
    | O.MethodCall(info, args) ->
      objName = info.obj_expr.ty match {
      | O.Type(_, O.Tapply(x, _)) -> x
      | _ -> invariant_violation("Unexpected type")
      };
      Some(
        this.funCall(
          e.ty,
          objName.id + "::" + info.field.id,
          info.field_targs,
          args,
        ),
      )
    /*
      | Unreachable()
      | DefaultArg()
      | ELiteral(lit: Literal)
      | Const(name: Name)
      | Local(name: Name)
      | DynamicConstruction(
        expr: Expr,
        name: Name,
        types: Array<Type>,
        args: Parameters<Expr>,
      )
      | Object(name: Name, types: Array<Type>, args: Parameters<Expr>)
      | Call(expr: Expr, args: Parameters<Expr>)
      | FunCall(name: Name, types: Array<Type>, args: Parameters<Expr>)
      | MethodCall(di: DotInfo, args: Parameters<Expr>)
      | StaticCall(di: DotInfo, args: Parameters<Expr>)
      | Dot(di: DotInfo)
      | StaticDot(di: DotInfo)
      | Lambda(
        params: Parameters<Binding>,
        type_: Type,
        bindings: SMap<Binding>,
        stmt: Stmt,
        yields: ?FileRange,
      )
      | EArray(exprs: Array<Expr>)
      | Await(expr: Expr)
      | Async(stmt: Stmt, expr: Expr)
      | Freeze(expr: Expr)
      | GetClass(expr: Expr)
      | Classname(name: Name)
      | With(expr: Expr, updates: WithUpdates)
      | Cast(type_: Type, expr: Expr)
    */
    | x ->
      debug(("TODO EXPR", x));
      invariant_violation("TODO")
    }
  }
}

module end;
