/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*****************************************************************************/
/* Utility functions to perform the parsing. */
/*****************************************************************************/
module alias Error = SkipError;

module FileCache;

const fileDirName: SKStore.DirName = SKStore.DirName::create("/fileCache/");
const fileDir: SKStore.EHandle<
  SKStore.SID,
  SKStore.StringFile,
> = SKStore.EHandle(
  SKStore.SID::keyType,
  SKStore.StringFile::type,
  fileDirName,
);

const allFilesDirName: SKStore.DirName = SKStore.DirName::create(
  "/allFilesCache/",
);
const allFilesDir: SKStore.EHandle<
  SKStore.IID,
  SKStore.StringFile,
> = SKStore.EHandle(
  SKStore.IID::keyType,
  SKStore.StringFile::type,
  allFilesDirName,
);

const fileTimeDirName: SKStore.DirName = SKStore.DirName::create(
  "/fileTimeCache/",
);
const fileTimeDir: SKStore.EHandle<
  SKStore.SID,
  SKStore.IntFile,
> = SKStore.EHandle(
  SKStore.SID::keyType,
  SKStore.IntFile::type,
  fileTimeDirName,
);

@cpp_extern("SKIP_get_mtime")
native fun getLastModificationTime(fileName: String): Int;

fun writeFiles(
  context: mutable SKStore.Context,
  fileNames: Array<String>,
): void {
  oldFiles = allFilesDir
    .unsafeGetArray(context, SKStore.IID(0))
    .map(x -> x.value)
    .collect(SortedSet);
  for (fileName in fileNames) {
    if (oldFiles.contains(fileName)) {
      !oldFiles = oldFiles.remove(fileName);
    };
    key = SKStore.SID(fileName);
    lastModifTime = getLastModificationTime(fileName);
    timeArr = fileTimeDir.unsafeGetArray(context, key);
    if (timeArr.size() > 0 && timeArr[0].value == lastModifTime) continue;
    fileTimeDir.writeArray(context, key, Array[SKStore.IntFile(lastModifTime)]);
    fileDir.writeArray(
      context,
      SKStore.SID(fileName),
      Array[SKStore.StringFile(FileSystem.readTextFile(fileName))],
    )
  };
  for (fileName in oldFiles) {
    fileDir.writeArray(
      context,
      SKStore.SID(fileName),
      Array[SKStore.StringFile("")],
    )
  };
  allFilesDir.writeArray(
    context,
    SKStore.IID(0),
    fileNames.map(x -> SKStore.StringFile(x)),
  );
}

module end;

module SkipParse;

const astDirName: SKStore.DirName = SKStore.DirName::create("/astCache/");
const astDir: SKStore.EHandle<SKStore.SID, DefsFile> = SKStore.EHandle(
  SKStore.SID::keyType,
  DefsFile::type,
  astDirName,
);

class DefsFile(value: List<SkipAst.Definition>) extends SKStore.File

fun getAst(
  context: mutable SKStore.Context,
  fileName: String,
): List<SkipAst.Definition> {
  astDir.get(context, SKStore.SID(fileName)).value
}

fun parseFile(fileName: String, source: String): DefsFile {
  fileResult = SkipParser.parseSource(source, true);
  ast = parseToAst(fileName, fileResult);
  DefsFile(ast)
}

fun parseToAst(
  filename: String,
  parseResults: Parser.ParseResults,
): List<SkipAst.Definition> {
  parseResults.throwOnError(filename);
  List::createFromItems(
    ConvertTree.Converter{filename}.convertTree(parseResults.tree),
  );
}

// Used by docgen
fun parse(filename: String, contents: String): List<SkipAst.Definition> {
  parseToAst(filename, SkipParser.parseSource(contents, false));
}

fun parse_files(
  context: mutable SKStore.Context,
  fileList: Sequence<String>,
): Sequence<List<SkipAst.Definition>> {
  fileList.map(x -> getAst(context, x))
}

module end;
