module alias T = SKTest;

module SKStoreTest;

@cpp_extern("SKIP_test_free_external_pointer")
native fun testFreeEP(UInt32): void;

@cpp_extern("SKIP_get_free_test_counter")
native fun getFreeTestCounter(): Int;

@test
fun testExternalPointer(): void {
  gcontext = SKStore.Context{};

  SKStore.runWithGc(gcontext, context ~> {
    if (context.getGlobal("Count") is None()) {
      context.setGlobal("Count", SKStore.IntFile(0));
    };
    round = SKStore.IntFile::type(context.getGlobal("Count").fromSome()).value;
    epointer = SKStore.ExternalPointer::create(
      UInt32::truncate(round),
      testFreeEP,
    );
    testCounter = getFreeTestCounter();
    T.expectEq(
      round,
      if (round == 0) 0 else testCounter + 1,
      "Call to free nbr " + round,
    );
    !round = round + 1;
    context.setGlobal("Count", SKStore.IntFile(round));
    context.setGlobal("Pointer", epointer);
    context.update();
    if (round == 10) {
      SKStore.CStop(None())
    } else {
      SKStore.CContinue(None())
    };
  })
}

module end;
