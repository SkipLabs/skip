/*
module Data;


const size: Int = 3;

class Order{
  orderID: String,
  customerID: String,
  orderDate: String,
} extends SKStore.File {
  fun toString(): String {
    `Order(${this.orderID}, ${this.customerID}, ${this.orderDate})`
  }
}

fun makeOrderTable(): Array<(String, Array<Order>)> {
  result = mutable Vector[];
  for (i in Range(0, size)) {
    key = i.toString();
    order = Order("order" + key, "customer" + key, "1996-09-18");
    result.push(("order" + key, Array[order]));
  };
  result.toArray()
}

class Customer{
  customerID: String,
  customerName: String,
  contactName: String,
  country: String,
} extends SKStore.File {
  fun toString(): String {
    `Customer(${this.customerID}, ${this.customerName}, ` +
      `${this.contactName}, ${this.country})`
  }
}

fun makeCustomerTable(): Array<(String, Array<Customer>)> {
  result = mutable Vector[];
  for (i in Range(0, size)) {
    key = "customer" + i.toString();
    order = Customer{
      key,
      "Alfred" + key,
      "Futterkiste Maria Anders",
      "Germany",
    };
    result.push((key, Array[order]));
  };
  result.toArray()
}

class Join{x: String, y: String, date: String} extends SKStore.File {
  fun toString(): String {
    "(" + this.x + ", " + this.y + ", " + this.date + ")"
  }
}

module end;

class User{name: String, age: Int} uses Show, Orderable {
  fun toString(): String {
    `User{age => ${this.age}`
  }
}
base class Boo
class MyObj(String, i1: String, String) extends Boo uses Show {
  fun toString(): String {
    this.i1
  }
}

fun testDB(): void {
  context = SKStore.run(context -> {
    orderTable = context.mkdir("/tmp/orders/", Data.makeOrderTable());
    customerTable = context.mkdir("/tmp/customers/", Data.makeCustomerTable());
    join = orderTable.multiMap(
      context,
      "/queries/",
      (context, orderID, orders) ~> {
        if (orders.size() == 0) return Array[];
        order = orders[0];
        customerID = if (order.orderDate == "9") "customer0" else {
          order.customerID
        };
        customers = customerTable.getArray(
          context,
          SKStore.Key::create(customerID),
        );
        if (customers.size() == 0) return Array[];
        customer = customers[0];
        result = Array[
          Data.Join(order.orderID, customer.customerName, order.orderDate),
        ];
        Array[(orderID, result)]
      },
    );
    _ = join.multiMap<Data.Join>(
      context,
      "/daniel/",
      (_context, orderID, joinArr) ~> {
        Array[
          (
            orderID,
            joinArr.map(join -> {
              !join.date = "DANIEL " + join.date;
              join
            }),
          ),
        ]
      },
    );
  });
  ///////////////////////////////// UPDATE
  orders = context.state.dirs[
    SKStore.DirRef<Data.Order>(SKStore.DirName::create("/tmp/orders/")),
  ];
  context.debug("/tmp/orders/order2");
  context.debug("/tmp/customers/customer2");
  context.debug("/queries/order2");
  context.debug("/daniel/order2");

  queries = context.state.dirs[
    SKStore.DirRef<Data.Order>(SKStore.DirName::create("/queries/")),
  ];

  debug(queries.fixedData);

  orders.write(context, "order2", Data.Order("order2", "customer2", "9"));
  context.update();

  context.debug("/tmp/orders/order2");
  context.debug("/queries/order2");
  context.debug("/daniel/order2");
}

class IntFile{value: Int} extends SKStore.File {
  fun toString(): String {
    this.value.toString()
  }
}

fun makeDirName(n: Int): String {
  "/random" + n + "/"
}

fun genDir{
  context: mutable SKStore.Context,
  origRandom: mutable Random,
  dirs: SortedMap<String, SKStore.Dir<IntFile>>,
  dirName: String,
  maxNbrDirDep: Int,
  maxReadPerDir: Int,
  size: Int,
}: SKStore.Dir<IntFile> {
  invariant(dirs.size() > 0);
  dirNameStr = makeDirName(origRandom.random(0, dirs.size()));
  origin = dirs[dirNameStr];
  seed = origRandom.next();
  resultDirName = dirName;
  origin.multiMap(context, resultDirName, (context, key, values) ~> {
    random = Random::mcreate(seed);
    dirDeps = mutable Vector[];
    nbrDirDeps = random.random(0, maxNbrDirDep);
    for (_ in Range(0, nbrDirDeps)) {
      dirIdx = random.random(0, dirs.size());
      dirDeps.push(dirs[makeDirName(dirIdx)]);
    };
    readKeys = mutable Set[key];
    readValues = mutable Vector[(key, values)];
    for (i in Range(0, nbrDirDeps)) {
      dir = dirDeps[i];
      nbrRead = random.random(0, maxReadPerDir);
      for (_ in Range(0, nbrRead)) {
        readKey = random.random(0, dir.fixedData.data.size());
        fileName = SKStore.Key::create(readKey.toString());
        if (readKeys.contains(fileName)) continue;
        readKeys.add(fileName);
        readValues.push((fileName, dir.getArray(context, fileName)));
      };
    };
    readValues.toArray()
  })
}

fun genInput{
  context: mutable SKStore.Context,
  random: mutable Random,
  inputName: String,
  size: Int,
  valueMaxSize: Int,
  valueRange: Int,
}: SKStore.Dir<IntFile> {
  result = mutable Vector[];
  for (i in Range(0, size)) {
    key = i.toString();
    values = mutable Vector[];
    valueSize = random.random(1, valueMaxSize - 1);
    for (_ in Range(0, valueSize)) {
      values.push(IntFile(random.random(0, valueRange)));
    };
    result.push((key, values.toArray()));
  };
  dirValues = result.toArray();
  dir = context.mkdir(inputName, dirValues);
  dir
}

fun testGen(): void {
  dirs = SortedMap[];
  inputDirSize = 10;
  mappedDirSize = 10;
  nbrInputDirs = 5;
  nbrMappedDirs = 10;
  valueMaxSize = 3;
  valueRange = 9;
  maxNbrDirDep = 10;
  maxReadPerDir = 10;
  random = Random::mcreate(23);

  context = SKStore.run(context -> {
    for (i in Range(0, nbrInputDirs)) {
      dirName = makeDirName(i);
      inputDir = genInput{
        context,
        random,
        inputName => dirName,
        size => inputDirSize,
        valueMaxSize,
        valueRange,
      };
      !dirs = dirs.add(dirName, inputDir);
    };

    for (i in Range(nbrInputDirs, nbrInputDirs + nbrMappedDirs)) {
      dirName = makeDirName(i);
      dir = genDir{
        context,
        origRandom => random,
        dirs,
        dirName,
        maxNbrDirDep,
        maxReadPerDir,
        size => mappedDirSize,
      };
      !dirs = dirs.add(dirName, dir);
    }
  });
  savedDirs = mutable Map[];
  for (i in Range(0, nbrInputDirs + nbrMappedDirs)) {
    dirName = makeDirName(i);
    dir = context.getDir(SKStore.DirRef<IntFile>(SKStore.DirName::create(dirName)));
    saveState = mutable Map<String, Array<IntFile>>[];
    for (key in Range(0, inputDirSize)) {
      keyStr = key.toString();
      baseName = SKStore.Key::create(keyStr);
      arr = dir.getArray(context, baseName);
      saveState![keyStr] = arr;
    };
    savedDirs![dirName] = saveState;
  };
  for (i in Range(0, nbrInputDirs)) {
    dirName = makeDirName(i);
    dir = context.getDir(SKStore.DirRef<IntFile>(SKStore.DirName::create(dirName)));
    for (key in Range(0, inputDirSize)) {
      keyStr = key.toString();
      print_string("************************************************");
      dir.writeArray(context, keyStr, Array[]);
      context.update();
      print_string("************************************************");
      dir.writeArray(context, keyStr, savedDirs[dirName][keyStr]);
      context.update();
    };
  };
  for (i in Range(nbrInputDirs, nbrInputDirs + nbrMappedDirs)) {
    dirName = makeDirName(i);
    dir = context.getDir(SKStore.DirRef<IntFile>(SKStore.DirName::create(dirName)));
    for (key in Range(0, inputDirSize)) {
      keyStr = key.toString();
      baseName = SKStore.Key::create(keyStr);
      arr = dir.getArray(context, baseName);
      if (savedDirs[dirName][keyStr] != arr) {
        print_string("Error: should be equal in " + dirName + keyStr);
        print_string(`Saved value was: ${savedDirs[dirName][keyStr]}`);
        print_string(`But computed values was: ${arr}`);
        exit(2);
      }
    };
  }
}

fun testUpdate(): void {
  context = SKStore.run(context -> {
    nat = context.mkdir(
      "/nat/",
      Array[("0", Array[IntFile(0)]), ("1", Array[IntFile(1)])],
    );
    nat2 = context.mkdir(
      "/nat2/",
      Array[("0", Array[IntFile(0)]), ("1", Array[IntFile(1)])],
    );
    _mapped = nat.multiMap(context, "/natMap/", (context, key, file) ~> {
      file2 = nat2.getArray(context, key);
      debug(file[0]);
      if (file2[0] == IntFile(22)) {
        Array[
          (key, Array[IntFile(file[0].value + file2[0].value)]),
          (SKStore.Key::create("22"), Array[IntFile(22)]),
        ]
      } else {
        Array[(key, Array[IntFile(file[0].value + file2[0].value)])]
      }
    });
  });
  _nat = context.state.dirs[
    SKStore.DirRef<IntFile>(SKStore.DirName::create("/nat/")),
  ];
  nat2 = context.state.dirs[
    SKStore.DirRef<IntFile>(SKStore.DirName::create("/nat2/")),
  ];
  context.debug("/natMap/0");
  nat2.writeArray(context, "0", Array[IntFile(22), IntFile(23)]);
  context.update();
  nat = context.state.dirs[SKStore.DirRef<IntFile>(SKStore.DirName::create("/nat/"))];
  debug((nat.fixedOld, nat.old, nat.compact().fixedOld));
  context.debug("/natMap/0");
}

*/

module TestServer;

class NoValue{} extends SKStore.File

/*
class BoolFile{data: String} extends SKStore.File
const trueFile: BoolFile = BoolFile{data => "true"};
const falseFile: BoolFile = BoolFile{data => "false"};
*/

class IDFile{} extends SKStore.File

class IntFile(value: Int) extends SKStore.File {
  fun getKey(): SKStore.Key {
    SKStore.SID::create("K" + this.value)
  }
}

class CalendarEvent{
  userID: SKStore.Key,
  start: Int,
  end: Int,
  description: String,
} extends SKStore.File
/*
fun testAfterModification(): void {
  (context, (_dir1, _dir2, _dirs)) = SKStore.start(context -> {
    dir1 = context.mkdirMulti(
      "/tmp/",
      Array[("I1", Array[IntFile(1)]), ("I3", Array[IntFile(23)])],
    );
    dir2 = context.mkdirMulti(
      "/tmp2/",
      Array[("I1", Array[IntFile(1)]), ("I3", Array[IntFile(23), IntFile(23)])],
    );
    dirs = dir2.partition(context, "/partition/");
    (dir1, dir2, dirs)
  });
  context.update();
}
*/

/*

fun testUsers(): void {
  (context, (_groupRequests, _groupBlocked)) = SKStore.start(context -> {
    beSport = SKStore.Group{
      id => SKStore.SID::create("GID_1"),
      name => "BeSport!",
      description => "For people who like sport!",
    };
    user1 = SKStore.User{
      id => SKStore.SID::create("UID_1"),
      firstName => "Julien",
      lastName => "Verlaguet",
      age => 38,
      groupIDs => Array[beSport.id],
    };
    user2 = SKStore.User{
      id => SKStore.SID::create("UID_2"),
      firstName => "Daniel",
      lastName => "Lopes",
      age => 42,
      groupIDs => Array[beSport.id],
    };
    _users = context.mkdirMulti(
      "/users/",
      Array[
        (user1.id.toString(), Array[user1]),
        (user2.id.toString(), Array[user2]),
      ],
    );
    _groups = context.mkdirMulti(
      "/groups/",
      Array[(beSport.id.toString(), Array[beSport])],
    );
    groupRequests = context.mkdirMulti<SKStore.User>(
      "/groups/" + beSport.id + "/requests/",
    );
    groupBlocked = context.mkdirMulti<SKStore.User>(
      "/groups/" + beSport.id + "/blocked/",
    );
    _groupMembers = groupRequests.apply(
      context,
      "/groups/" + beSport.id + "/members/",
      (context, writer, uid, values) ~> {
        arr = groupBlocked.getArray(context, uid);
        if (arr.size() > 0) {
          return void;
        };
        writer.setArray(uid, values);
      },
    );
    (groupRequests, groupBlocked)
  });
  user: SKStore.File = SKStore.User{
    id => SKStore.SID::create("UID_2"),
    firstName => "Daniel",
    lastName => "Lopes",
    age => 42,
    groupIDs => Array[],
  };
  groupRequests = context.getDir(
    SKStore.DirName::create("/groups/GID_1/requests/"),
  );
  groupRequests.writeArray(context, "UID_2", Array[user]);
  context.update();
}
*/


module end;

module SKStoreTest;

class JsonFile(JSON.Value) extends SKStore.File

class User{
  id: Int,
  firstName: String,
  lastName: String,
  age: Int,
} extends SKStore.File {
  static fun fromString(strFile: SKStore.StringFile): User {
    str = strFile.value;
    data = JSON.decode(str).expectObject();
    id = data["id"].expectInt();
    firstName = data["firstName"].expectString();
    lastName = data["lastName"].expectString();
    age = data["age"].expectInt();
    User{id, firstName, lastName, age}
  }
}

class FullUser{
  id: Int,
  firstName: String,
  lastName: String,
  age: Int,
  friends: Array<User>,
} extends SKStore.File

class TestFile(age: Int, User) extends SKStore.File

class Request{askingID: Int, askedID: Int} extends SKStore.File {
  static fun fromString(strFile: SKStore.StringFile): Request {
    str = strFile.value;
    data = JSON.decode(str).expectObject();
    askingID = data["askingUserID"].expectInt();
    askedID = data["askedUserID"].expectInt();
    Request{askingID, askedID}
  }
}

class Def{v: Int, parents: Array<Int>} extends SKStore.File {
  fun toString(): String {
    JSON.Object(
      Map[
        "v" => JSON.IntNumber(this.v),
        "parents" => JSON.Array(
          this.parents.map(x -> JSON.IntNumber(x)).collect(Vector),
        ),
      ],
    ).toString()
  }

  static fun fromStringFile(x: SKStore.StringFile): this {
    json = JSON.decode(x.value).expectObject();
    Def{
      v => json["v"].expectInt(),
      parents => json["parents"]
        .expectArray()
        .value.map(x -> x.expectInt())
        .toArray(),
    }
  }
}

base class Tree {
  children =
  | TEmpty()
  | TNode(v: Int, parents: Array<Tree>)
}

class TreeFile(value: Tree) extends SKStore.File

fun makeTrees(acc: mutable Vector<Def>, size: Int): void {
  if (size == 0 || size == 1) {
    acc.push(Def{v => 0, parents => Array[]});
    acc.push(Def{v => 1, parents => Array[]});
    return void;
  };
  makeTrees(acc, size - 1);
  parents = Array[size - 1, size - 2];
  tree = Def{v => size, parents};
  acc.push(tree)
}

fun testOldLazy(): mutable SKStore.Context {
  SKStore.run(context ~> {
    acc = mutable Vector[];
    makeTrees(acc, 3);
    inputData = acc
      .map(x -> (SKStore.IID(x.v), SKStore.StringFile(x.toString())))
      .toArray();
    srcDir = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      SKStore.DirName::create("/src/"),
      inputData,
    );
    defDir = srcDir.map(
      SKStore.IID::keyType,
      Def::type,
      context,
      SKStore.DirName::create("/defs/"),
      (_context, writer, key, values) ~>
        writer.set(key, Def::fromStringFile(values.first))
      ,
    );
    _defDiff = defDir.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/defDiffs/"),
      (context, writer, key, values) ~> {
        value = values.first;
        prevDir = defDir.pre(context);
        prevDir match {
        | None() -> writer.set(key, SKStore.IntFile(0))
        | Some(preDir) ->
          _prevDir2 = preDir.pre(context);
          def = preDir.get(context, key);
          writer.set(key, SKStore.IntFile(def.v - value.v))
        }
      },
    );
    treeDir = SKStore.LHandle::create(
      SKStore.IID::keyType,
      TreeFile::type,
      context,
      SKStore.DirName::create("/lazyTrees/"),
      (context, self, key) ~> {
        def = defDir.get(context, key);
        parents = def.parents.map(id ->
          self.get(context, SKStore.IID(id)).value
        );
        Array[TreeFile(TNode(def.v, parents))]
      },
    );
    _unfoldedTrees = defDir.map(
      SKStore.IID::keyType,
      TreeFile::type,
      context,
      SKStore.DirName::create("/trees/"),
      (context, writer, key, values) ~> {
        writer.set(key, treeDir.get(context, SKStore.IID(values.first.v)))
      },
    );
  })
}

fun testOld(): mutable SKStore.Context {
  SKStore.run(context ~> {
    acc = mutable Vector[];
    makeTrees(acc, 3);
    inputData = acc
      .map(x -> (SKStore.IID(x.v), SKStore.StringFile(x.toString())))
      .toArray();
    srcDir = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      SKStore.DirName::create("/src/"),
      inputData,
    );
    _defDir = srcDir.map(
      SKStore.IID::keyType,
      Def::type,
      context,
      SKStore.DirName::create("/defs/"),
      (_, writer, key, values) ~>
        writer.set(key, Def::fromStringFile(values.first))
      ,
    );
    context.update();
    context.update();
  })
}

class Page{id: Int, text: String} extends SKStore.File
class QueryResult(Array<Int>) extends SKStore.File

@test
fun testSearch(): void {
  pagesData = Array[
    Page{id => 1, text => "hello world"},
    Page{id => 2, text => "hello"},
  ].map(x -> (SKStore.IID(x.id), x));
  _ = SKStore.run(context ~> {
    pages = context.mkdir(
      SKStore.IID::keyType,
      Page::type,
      SKStore.DirName::create("/pages/"),
      pagesData,
    );
    queries = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      SKStore.DirName::create("/queries/"),
      Array[],
    );
    index = pages.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/index/"),
      (_context, writer, _key, values) ~> {
        value = values.first;
        for (token in value.text.split(" ")) {
          writer.set(SKStore.IID(token.hash()), SKStore.IntFile(value.id))
        }
      },
    );
    _results = queries.map(
      SKStore.IID::keyType,
      QueryResult::type,
      context,
      SKStore.DirName::create("/results/"),
      (context, writer, key, values) ~> {
        query = values.first;
        first = true;
        results = mutable Set[];
        for (token in query.value.split(" ")) {
          newResults = index.getArray(context, SKStore.IID(token.hash()));
          if (first) {
            !first = false;
            !results = Set::mcreateFromItems(newResults.map(x -> x.value));
          } else {
            newSet = mutable Set[];
            for (result in newResults) {
              if (results.contains(result.value)) {
                newSet.insert(result.value);
              }
            };
            !results = newSet;
          }
        };
        writer.set(key, QueryResult(results.toArray()))
      },
    );
  })
}

module end;
