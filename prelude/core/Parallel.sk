/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Parallel;

@cpp_extern("SKIP_numThreads")
private fun getNumThreads(): Int {
  1
}

// The native back end only compiles methods that seem to be called, and
// it won't "see" any calls from C++ code to this lambda's "call" method, so
// we force some calls through this helper function so it realizes calls
// are possible.
@no_inline
private fun callTabulateLambda<T>(
  f: Int ~> mutable Array<T>,
  i: Int,
): mutable Array<T> {
  f(i)
}

private fun singleThreadedTabulate<T>(
  count: Int,
  f: Int ~> mutable Array<T>,
): mutable Array<T> {
  Array::mfillBy(count, i -> f(i)[0])
}

// Internal helper for tabulate().
@cpp_runtime("SKIP_parallelTabulate")
@may_alloc
private fun multiThreadedTabulate<T>(
  count: Int,
  f: Int ~> mutable Array<T>,
): mutable Array<T> {
  // NOTE: This implementation is replaced in the native back end with one
  // that actually uses threads.
  singleThreadedTabulate(count, f)
}

// Returns an Array containing the result of calling f with each array index:
//
// ```
// mutable Array[ f(0), f(1), f(2), ..., f(count - 1) ]
// ```
//
// This is equivalent to `Array::mfillBy`, but may evaluate the results
// in parallel using multiple cores.
//
// If any `f()` call throws an exception, the exception with the lowest index is
// rethrown and any others are suppressed. When an exception is thrown this
// may or may not evaluate `f()` for every possible index, but because `f` is a
// frozen lambda, this should not matter.
//
// Note that this function incurs overhead for thread manipulation not required
// by `Array::mfillBy`, so it only makes sense to call it when `f()` is
// somewhat slow.
@no_inline
fun tabulate<T>(count: Int, f: Int ~> T): mutable Array<T> {
  // HACK: We use two different lambdas with the same signature to
  // force a closure vtable entry for the C++ code to find. Otherwise it
  // will be devirtualized, not get allocated a vtable slot and C++
  // won't be able to call it.

  if (count == 0) {
    // The C++ runtime can't handle an empty vector.
    // This simply returns an empty Array but in a hacky way as
    // described above.
    callTabulateLambda(_ ~> mutable Array[], 0)
  } else {
    // Adjust the closure to return a one-element Array boxing the answer,
    // which is easier for the C++ runtime to manipulate.
    f2 = i ~> mutable Array[f(i)];

    if (count == 1) {
      // No reason to spin up threads for a single element.
      callTabulateLambda(f2, 0)
    } else {
      invariant(count > 0, "Called tabulate() with a negative count.");

      if (getNumThreads() > 1) {
        multiThreadedTabulate(count, f2)
      } else {
        singleThreadedTabulate(count, f2)
      }
    }
  }
}
