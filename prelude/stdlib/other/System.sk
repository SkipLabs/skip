/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Type system operator 'unsafe_chill_trust_me' takes an object type and strips
// any outer mutability. For exmaple,
//   unsafe_chill_trust_me(v : mutable Vector<mutable Vector<Int>>): Vector<mutable Vector<Int>>
// This is a hack until we have linear types
// native fun unsafe_chill_trust_me<T>(T): T with outer mutability made immutable;

// Native operator 'freeze' takes any type other than a lambda or async, and
// gives a deeply frozen version
// This performs a deep, O(n), copy
// native fun freeze<T>(T): frozen T;

// Break into the debugger if one is attached.
@debug
@cpp_runtime
native fun debug_break(): void;

// Recursively interns ("hash-conses", "uniquifies") the given object,
// uses the Skip memoizer's interner to provide the canonical copy of any
// frozen object, where equality is defined in the deep structural bitwise
// sense. This has no visible semantic effect.
//
// In the current implementation, there are of advantages to interning:
//
// 1) Interning redundant objects saves memory.
// 2) The memoizer needs to intern arguments to form its memoization key.
//    Arguments that are already interned accelerate this step, so if a value
//    is passed to many memoized functions it can be faster to intern it
//    once, in advance.
//
// And there are a few disadvantages:
//
// 1) Interning takes time (to do hash lookups, etc.)
// 2) Interned objects have extra memory overhead (they get an extra
//    refcount field, and require a hash table slot).
// 3) The garbage collector needs to scan its list of interned objects to
//    see if you no longer refer to them, so it can decref them. Note that
//    they only add overhead on GC, not on each store. The GC only checks
//    interned objects "pointed to" by the range of the ObStack being
//    collected (very roughly corresponding to a "generation" in traditional
//    GC terms).
@cpp_runtime
@may_alloc
fun intern<T: frozen>(x: T): T {
  x
}

@debug
fun print_newline(): void {
  print_raw("\n")
}

// Prints with a new line
@debug
@no_inline
@no_throw
fun print_string<T: readonly Show>(value: T): void {
  print_raw(value.toString());
  print_newline()
}

// Returns the current time in nanoseconds.
// Marked as @debug bc it is non-deterministic
@debug
@cpp_runtime
@no_throw
native fun nowNanos(): Int;

// Returns the current time in milli-seconds.
@debug
fun now(): Float {
  nowNanos().toFloat() * (1.0 / 1000000.0);
}

@debug
@no_throw
@cpp_runtime
untracked native fun profile_start(): void;

// Returns the elapsed time (in ms) since profile_start was called,
// minus time between pause/resume calls.
@debug
@no_throw
@cpp_runtime
untracked native fun profile_stop(): Float;

// Print the collected results when everytime profile_stop is called,
// then clear the collected cache.
@debug
@no_throw
@cpp_runtime
untracked native fun profile_report(): void;

// Prints without a new line
@debug
@no_throw
@cpp_runtime
native fun print_raw(String): void;

@debug
@no_throw
@cpp_runtime
native fun print_error_raw(String): void;

@debug
@no_throw
@cpp_runtime
native fun flush_stdout(): void;

// Prints to stderr
@debug
@no_throw
@cpp_runtime
native fun print_error(String): void;

fun print_error_ln<T: readonly Show>(value: T): void {
  print_error(value.toString());
  print_error("\n");
}

class EndOfFile() extends Exception

@cpp_export("SKIP_throw_EndOfFile")
fun throwEndOfFile(): void {
  throw EndOfFile()
}

@debug
@no_throw
@cpp_extern("SKIP_getchar")
native fun getChar(): Char;

@debug
@no_throw
@cpp_runtime
native fun getArgc(): UInt32;

@debug
@no_throw
@cpp_runtime
native fun getArgN(n: UInt32): String;

// Command line arguments without the name of the current executable.
fun arguments(): Array<String> {
  size = getArgc();
  result = mutable Vector[];
  for (i in Range(0, size.toInt())) {
    result.push(getArgN(UInt32::truncate(i)));
  };
  result.toArray();
}

@debug
@no_throw
@cpp_runtime
native fun print_stack_trace(): void;

@debug
@no_return
@cpp_runtime
native fun print_last_exception_stack_trace_and_exit(Exception): void;

@debug
@no_return
fun skipExit<T>(res: Int): T {
  internalExit(res);
  invariant_violation("never")
}

@debug
@no_return
@cpp_runtime
native fun internalExit(Int): void;

class DivisionByZeroException() extends Exception {
  fun getMessage(): String {
    "Division by zero"
  }
}

class InvariantViolation(msg: String) extends Exception {
  fun getMessage(): String {
    "Invariant violation: " + this.msg
  }
}

// Uncomment this line to get reliable stack traces when debugging invariant_violations.
const print_stack_on_invariant_violation: Bool = false;

@no_inline
fun invariant_violation<T>(msg: String): T {
  debug_break();
  ex = InvariantViolation(msg);
  if (print_stack_on_invariant_violation) {
    print_last_exception_stack_trace_and_exit(ex);
  };
  print_error("Invariant violation: " + msg);
  throw ex;
}

fun invariant(cond: Bool, msg: String = "assert"): void {
  if (!cond) invariant_violation(msg)
}

fun assert(cond: Bool): void {
  invariant(cond, "assert")
}

// This function garbage collects memory allocated by the current function
// or any subroutine it called. The determination of "current function" is
// made after all inlining is complete. This only does anything in the
// native back end, it is a no-op in the others (which use a different GC
// strategy).
@debug
@intrinsic
fun localGC(): void {
  void
}

module Debug;

@debug
@intrinsic
native fun getMemoryFrameUsage(): Int;

@debug
@no_throw
@cpp_runtime
native fun printMemoryStatistics(): void;

@debug
@no_throw
@cpp_runtime
native fun getLeakCounter(classname: String): Int;

base class DebugBoxBase
class DebugBox<T>(value: T) extends DebugBoxBase

@debug
@no_throw
@cpp_runtime
private native fun printBoxedObjectSize(box: readonly DebugBoxBase): void;

@gc
fun printObjectSize<T>(value: T): void {
  printBoxedObjectSize(DebugBox(value));
}

module end;

@cpp_extern("SKIP_getBuildVersion")
@may_alloc
native fun getBuildVersion(): String;

@cpp_runtime
@may_alloc
untracked native fun read_stdin(): String;

@cpp_runtime
@may_alloc
native fun read_line(): ?String;

@cpp_runtime
@may_alloc
untracked native fun read_stdin_bytes(bytes: Int): String;

@cpp_extern("SKIP_flush_stdout")
native fun flushStdout(): void;
