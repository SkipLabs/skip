module SKStore;

@cpp_extern("SKIP_create_external_pointer")
native fun createExternalPointer(ExternalPointer): ExternalPointer;

base class BExternalPointer {
  fun toString(): String;
  fun getMagicNumber(): UInt32;
}

class DumbPointer(n: UInt32) extends BExternalPointer {
  fun toString(): String {
    "dumb:" + this.n
  }
  fun getMagicNumber(): UInt32 {
    UInt32::truncate(0)
  }
}

class ExternalPointer private (
  magic: UInt32,
  value: UInt32,
  destructor: UInt32 ~> void,
) extends File, BExternalPointer {
  static fun create(value: UInt32, destructor: UInt32 ~> void): this {
    createExternalPointer(
      static(UInt32::truncate(234566 + value % 2), value, destructor),
    );
  }

  static fun getExternalPointer(): ExternalPointer {
    ExternalPointer(UInt32::truncate(0), UInt32::truncate(0), _ ~> void)
  }

  fun toString(): String {
    "external:" + this.value
  }

  fun getMagicNumber(): UInt32 {
    this.magic
  }
}

@wasm_export("sk_get_magic_number")
@cpp_export("sk_get_magic_number")
fun getExternalPointerMagicNumber(ep: BExternalPointer): UInt32 {
  ep.getMagicNumber()
}

@wasm_export("sk_debug_external_pointer")
@cpp_export("sk_debug_external_pointer")
fun debugExternalPointer(ep: BExternalPointer): void {
  debug(ep.toString())
}

@wasm_export("sk_get_external_pointer")
@cpp_export("sk_get_external_pointer")
fun getExternalPointer(): ExternalPointer {
  ExternalPointer::getExternalPointer()
}

@wasm_export("sk_get_external_pointer_value")
@cpp_export("sk_get_external_pointer_value")
fun getValue(p: ExternalPointer): UInt32 {
  p.value
}

@wasm_export("sk_get_external_pointer_destructor")
@cpp_export("sk_get_external_pointer_destructor")
fun getDestructor(p: ExternalPointer): UInt32 ~> void {
  p.destructor
}

@wasm_export("sk_call_external_pointer_descructor")
@cpp_export("sk_call_external_pointer_descructor")
fun callDestructor(destructor: UInt32 ~> void, value: UInt32): void {
  destructor(value)
}

extension base class .Inspect {
  fun simplePrint(o: String -> void): void
  | .InspectSpecial(v) -> o("'" + v + "'")
  | .InspectString(v) -> o("\"" + v + "\"")
  | .InspectLiteral(v) -> o(v)
  | .InspectVector(name, values) ->
    o(name + "[");
    if (values.size() == 0) {
      o("]");
      return void;
    };
    for (i in Range(0, values.size() - 1)) {
      elt = values[i];
      elt.simplePrint(o);
      o(",");
    };
    values[values.size() - 1].simplePrint(o);
    o("]")
  | .InspectMap(name, values) ->
    o(name + "[");
    if (values.size() == 0) {
      o("]");
      return void;
    };
    for (i in Range(0, values.size() - 1)) {
      (elt, value) = values[i];
      elt.simplePrint(o);
      o("=>");
      value.simplePrint(o);
      o(",");
    };
    (elt, value) = values[values.size() - 1];
    elt.simplePrint(o);
    o("=>");
    value.simplePrint(o);
    o(",");
    o("]")
  | .InspectCall(name, values) ->
    o(name + "(");
    if (values.size() == 0) {
      o(")");
      return void;
    };
    for (i in Range(0, values.size() - 1)) {
      elt = values[i];
      elt.simplePrint(o);
      o(",");
    };
    values[values.size() - 1].simplePrint(o);
    o(")")
  | .InspectObject(name, values) ->
    o(name + "{");
    if (values.size() == 0) {
      o("}");
      return void;
    };
    for (i in Range(0, values.size() - 1)) {
      (key, value) = values[i];
      o(key);
      o("=>");
      value.simplePrint(o);
      o(",");
    };
    (key, value) = values[values.size() - 1];
    o(key);
    o("=>");
    value.simplePrint(o);
    o(",");
    o("}")

  fun toString(): String {
    buffer = mutable Vector[];
    o = (x) -> buffer.push(x);
    this.simplePrint(o);
    "".join(buffer);
  }
}

class VoidFile() extends File

class IntFile(value: Int) extends File uses Orderable, Show {
  fun +<T: Integral>(x: T): IntFile {
    !this.value = this.value + x;
    this
  }
  fun -<T: Integral>(x: T): IntFile {
    !this.value = this.value + x;
    this
  }
  fun toString(): String {
    this.value.toString()
  }
}

class BoolFile(value: Bool) extends File uses Orderable, Show {
  fun toString(): String {
    this.value.toString()
  }
}

class StringFile(value: .String) extends File {
  fun toKVString(_format: OutputFormat, key: Key): String {
    "" + escape(key.toString()) + "\t\"" + escape(this.value) + "\"\n"
  }

  fun toKVStringRemove(_format: OutputFormat): String {
    "" + escape(this.value) + "\t\n"
  }
}

class ErrorFile(value: .Exception) extends File
class ArrayCharFile(value: Array<Char>) extends File
class ArrayStringFile(value: Array<String>) extends File

base class OutputFormat uses Orderable {
  children =
  | OSQL()
  | OCSV()
  | OJSON(fieldNames: Array<String>)
  | OJS(fieldNames: Array<String>)
  | OTable(fieldNames: Array<String>)

  fun usesComma(): Bool
  | OSQL() -> false
  | OCSV() -> true
  | OJSON(_) -> true
  | OTable(_) -> false
  | OJS _ ->
    invariant_violation(
      "Internal error: JS direct mode should never be printed",
    )

  fun usesDoubleQuotes(): Bool
  | OSQL() -> false
  | OCSV() -> true
  | OJSON(_) -> true
  | OTable(_) -> true
  | OJS _ ->
    invariant_violation(
      "Internal error: JS direct mode should never be printed",
    )
}

base class File {
  deferred macro overridable static fun type(obj: File): this {
    obj match {
    | x @ #ThisClass _ -> x
    }
  }

  overridable fun toKVString(_csv: OutputFormat, key: Key): String {
    "" +
      escape(key.toString()) +
      "\t\"" +
      escape(inspect(this).toString()) +
      "\"\n"
  }
}

trait CGroup {
  fun zero(): inst;
  fun +(inst): inst;
  fun -(inst): inst;
}

base class CGroupFile extends File uses CGroup

extension class .Int uses CGroup {
  fun zero(): .Int {
    0
  }
}

module end;
