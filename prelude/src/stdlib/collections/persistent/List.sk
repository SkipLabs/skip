/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module List;

mutable base class .List<+T>
  extends Sequence<T>
  uses
    Show[T: readonly Show],
    Hashable[T: Hashable],
    Equality[T: Equality],
    Orderable[T: Orderable],
   {
  children =
  | Nil()
  | Cons(mutable head: T, mutable tail: mutable List<T>)

  static fun tabulate<V>(size: Int, f: Int -> V): List<V> {
    invariant(size >= 0, "List.tabulate: negative size");
    static::tabulateFrom(size, f, Nil())
  }

  protected static fun tabulateFrom<V>(
    i: Int,
    f: Int -> V,
    rest: List<V>,
  ): List<V> {
    if (i == 0) {
      rest
    } else {
      static::tabulateFrom(i - 1, f, Cons(f(i - 1), rest))
    }
  }

  static fun create(): List<T> {
    Nil()
  }

  static fun of<E>(element: E): List<E> {
    List[element]
  }

  static fun createFromItems<C: readonly Sequence<T>>(items: C): List<T> {
    result: mutable List<T> = mutable Nil();
    prev: ?mutable Cons<T> = None();

    for (x in items) {
      c = mutable Cons(x, mutable Nil());
      prev match {
      | Some(p) -> p.!tail = c
      | None() -> !result = c
      };
      !prev = Some(c)
    };

    unsafe_chill_trust_me(result)
  }

  static fun createFromIterator<C: mutable Iterator<T>>(items: C): List<T> {
    result: mutable List<T> = mutable Nil();
    prev: ?mutable Cons<T> = None();

    for (x in items) {
      c = mutable Cons(x, mutable Nil());
      prev match {
      | Some(p) -> p.!tail = c
      | None() -> !result = c
      };
      !prev = Some(c)
    };

    unsafe_chill_trust_me(result)
  }

  static fun reverseFromIterator<C: mutable Iterator<T>>(items: C): List<T> {
    result: List<T> = Nil();
    for (element in items) {
      !result = Cons(element, result)
    };
    result
  }

  readonly fun inspect(): Inspect
  | Nil() -> InspectVector("List", Array[])
  | Cons _ ->
    InspectVector(
      "List",
      {
        items = mutable Vector[];
        this.each(value -> {
          items.push(inspect(value))
        });
        items.toArray();
      },
    )

  readonly fun isEmpty(): Bool
  | Cons _ -> false
  | Nil() -> true

  readonly fun maybeHead(): ?T
  | Cons(value, _) -> Some(value)
  | Nil() -> None()

  readonly fun getHead(): T
  | Cons(value, _) -> value
  | Nil() -> invariant_violation("head of empty list")

  frozen fun maybeTail(): ?List<T>
  | Cons(_, tail) -> Some(tail)
  | Nil() -> None()

  frozen fun getTail(): List<T>
  | Cons(_, values) -> values
  | Nil() -> invariant_violation("tail of empty list")

  readonly fun getNth(index: Int): T {
    x = this;
    loop {
      (x, index) match {
      | (Nil(), _) -> throwOutOfBounds()
      | (Cons(head, _), 0) -> break head
      | (Cons(_, tail), _) ->
        !x = tail;
        !index = index - 1
      }
    }
  }

  readonly fun compare<T2: Orderable>[T: T2](other: List<T2>): Order
  | Nil() ->
    other match {
    | Nil() -> EQ()
    | _ -> LT()
    }
  | Cons(head1, tail1) ->
    other match {
    | Nil() -> GT()
    | Cons(head2, tail2) ->
      compare(head1, head2) match {
      | EQ() -> tail1.compare(tail2)
      | c -> c
      }
    }

  readonly fun <<T2: Orderable>[T: T2](x: List<T2>): Bool {
    this.compare(x) == LT()
  }

  readonly fun ><T2: Orderable>[T: T2](x: List<T2>): Bool {
    this.compare(x) == GT()
  }

  readonly fun <=<T2: Orderable>[T: T2](x: List<T2>): Bool {
    this.compare(x) != GT()
  }

  readonly fun >=<T2: Orderable>[T: T2](x: List<T2>): Bool {
    this.compare(x) != LT()
  }

  // Expects the list to be sorted
  fun unique[T: Orderable](): List<T> {
    this match {
    | Nil() -> Nil()
    | l @ Cons(_, Nil()) -> l
    | Cons(x1, rl @ Cons(x2, _)) if (x1 == x2) -> rl.unique()
    | Cons(x, rl) -> Cons(x, rl.unique())
    }
  }

  readonly fun eqBy<T2>[T: T2](
    other: readonly List<T2>,
    eq: (T2, T2) -> Bool,
  ): Bool {
    l1 = this;
    l2 = other;

    loop {
      (l1, l2) match {
      | (Nil(), Nil()) -> break true
      | (Cons(head1, tail1), Cons(head2, tail2)) ->
        if (!eq(head1, head2)) {
          break false
        };
        !l1 = tail1;
        !l2 = tail2
      | _ -> break false
      }
    }
  }

  readonly fun ==<T2: Equality>[T: T2](other: readonly List<T2>): Bool {
    this.eqBy(other, (a, b) ~> a == b)
  }

  readonly fun !=<T2: Equality>[T: T2](other: List<T2>): Bool {
    !(this == other)
  }

  @always_inline
  readonly fun map<T2>(f: T -> T2): List<T2> {
    result: mutable List<T2> = mutable Nil();
    prev: ?mutable Cons<T2> = None();
    cur = this;

    loop {
      cur match {
      | Nil() -> break unsafe_chill_trust_me(result)
      | Cons(head, tail) ->
        !cur = tail;
        c = mutable Cons(f(head), mutable Nil());
        prev match {
        | Some(p) -> p.!tail = c
        | None() -> !result = c
        };
        !prev = Some(c)
      }
    }
  }

  readonly fun mapWithIndex<T2>(f: (Int, T) -> T2): List<T2> {
    i = -1;
    this.map(v -> {
      !i = i + 1;
      f(i, v)
    })
  }

  static fun map2<A, B, R>(f: (A, B) -> R, a: List<A>, b: List<B>): List<R> {
    (a, b) match {
    | (Nil(), Nil()) -> Nil()
    | (Cons(ahd, atl), Cons(bhd, btl)) ->
      Cons(f(ahd, bhd), static::map2(f, atl, btl))
    | _ -> invariant_violation("Mismatched list sizes")
    }
  }

  readonly fun unzip<A, B>[T: (A, B)](): (List<A>, List<B>) {
    (this.map(p -> p.i0), this.map(p -> p.i1))
  }

  protected fun splitImpl<U>[T: U](i: Int, acc: List<U>): (List<U>, List<U>) {
    this match {
    | Cons(hd, tl) if (i > 0) -> tl.splitImpl(i - 1, Cons(hd, acc))
    | _ -> (acc.reversed(), this)
    }
  }

  fun split(i: Int): (List<T>, List<T>) {
    this.splitImpl(i, Nil())
  }

  readonly fun size(): Int {
    this.foldl((size, _) -> size + 1, 0)
  }

  readonly fun each(f: T -> void): void {
    cur = this;
    loop {
      cur match {
      | Nil() -> break void
      | Cons(x, xs) ->
        f(x);
        !cur = xs
      }
    }
  }

  @always_inline
  readonly fun foldl<R>(f: (R, T) -> R, init: R): R {
    list = this;
    while (
      list match {
      | Cons(x, xs) ->
        !init = f(init, x);
        !list = xs;
        true
      | Nil() -> false
      }
    ) {
      void
    };

    init
  }

  readonly fun foldr<R>(f: (T, R) -> R, init: R): R {
    this.toArray().reversedValues().reduce((a, b) -> f(b, a), init)
  }

  static fun fold2<T1, T2, R>(
    l1: List<T1>,
    l2: List<T2>,
    fn: (R, T1, T2) -> R,
    initial: R,
  ): R {
    loop {
      (l1, l2) match {
      | (Cons(head1, tail1), Cons(head2, tail2)) ->
        !l1 = tail1;
        !l2 = tail2;
        !initial = fn(initial, head1, head2)
      | (Nil(), Nil()) -> break initial
      | _ -> invariant_violation("Mismatched list sizes")
      }
    }
  }

  static fun fold3<T1, T2, T3, R>(
    l1: List<T1>,
    l2: List<T2>,
    l3: List<T3>,
    fn: (R, T1, T2, T3) -> R,
    initial: R,
  ): R {
    loop {
      (l1, l2, l3) match {
      | (Cons(head1, tail1), Cons(head2, tail2), Cons(head3, tail3)) ->
        !l1 = tail1;
        !l2 = tail2;
        !l3 = tail3;
        !initial = fn(initial, head1, head2, head3)
      | (Nil(), Nil(), Nil()) -> break initial
      | _ -> invariant_violation("Mismatched list sizes")
      }
    }
  }

  static fun foldr2<T1, T2, R>(
    values1: List<T1>,
    values2: List<T2>,
    fn: (R, T1, T2) -> R,
    initial: R,
  ): R {
    (values1, values2) match {
    | (Nil(), Nil()) -> initial
    | (Cons(head1, tail1), Cons(head2, tail2)) ->
      fn(static::foldr2(tail1, tail2, fn, initial), head1, head2)
    | _ -> invariant_violation("Mismatched list sizes")
    }
  }

  static fun combine<T1, T2>(
    values1: List<T1>,
    values2: List<T2>,
  ): List<(T1, T2)> {
    static::map2((a, b) ~> (a, b), values1, values2)
  }

  readonly fun map_foldl<V, R>(f: (R, T) -> (R, V), acc: R): (R, List<V>) {
    list = this.map(v -> {
      (!acc, v2) = f(acc, v);
      v2
    });
    (acc, list)
  }

  readonly fun reversed(): List<T> {
    result: List<T> = Nil();
    for (x in this) {
      !result = Cons(x, result)
    };
    result
  }

  readonly fun sorted[T: readonly Orderable](
    compare: (T, T) ~> Order = (x, y) ~> x.compare(y),
  ): List<T> {
    List::createFromItems(Array::createFromItems(this).sorted(compare))
  }

  readonly fun sortedBy<K: readonly Orderable>(
    selector: T ~> K,
    compare: (K, K) ~> Order = (x, y) ~> x.compare(y),
  ): List<T> {
    List::createFromItems(
      Array::createFromItems(this).sortedBy(selector, compare),
    )
  }

  readonly fun sorted_DEPRECATED(cmp: (T, T) ~> Order): List<T> {
    items = Array::mcreateFromItems(this);
    items.sortBy(x ~> Orderable.create(x, cmp));
    List::reverseFromIterator(items.reversedValues());
  }

  readonly fun flatten<U>[T: Sequence<U>](): List<U> {
    this.foldl<List<U>>(
      (result, items) ~> result.concat(List::createFromItems(items)),
      Nil(),
    )
  }

  readonly fun concat<T2>[T: T2](tail: List<T2>): List<T2> {
    result = tail;
    this.reversed().each(element -> {
      !result = Cons(element, result);
    });
    result
  }

  readonly fun filter(test: T -> Bool): List<T> {
    List::createFromIterator(this.values().filter(test))
  }

  readonly fun filterNone<V>[T: ?V](): List<V> {
    this.filter(element -> element.isSome()).map(element -> element.fromSome())
  }

  readonly fun all(predicate: T -> Bool): Bool {
    cur = this;
    loop {
      cur match {
      | Nil() -> break true
      | Cons(head, tail) ->
        if (!predicate(head)) break false;
        !cur = tail
      }
    }
  }

  readonly fun contains<T2: Equality>[T: T2](value: T2): Bool {
    this.any(element ~> element == value)
  }

  readonly fun any(predicate: T -> Bool): Bool {
    cur = this;
    loop {
      cur match {
      | Nil() -> break false
      | Cons(head, tail) ->
        if (predicate(head)) break true;
        !cur = tail
      }
    }
  }

  readonly fun find(p: T -> Bool): ?T {
    cur = this;
    loop {
      cur match {
      | Nil() -> break None()
      | Cons(head, tail) ->
        if (p(head)) break Some(head);
        !cur = tail
      }
    }
  }

  frozen fun takeAndDrop(n: Int): (List<T>, List<T>) {
    taken: mutable List<T> = mutable Nil();
    prev: ?mutable Cons<T> = None();
    cur = this;

    loop {
      (n, cur) match {
      | (_, Nil()) -> break (this, Nil())
      | (0, _) -> break (unsafe_chill_trust_me(taken), cur)
      | (_, Cons(val, tail)) ->
        c = mutable Cons(val, mutable Nil());

        prev match {
        | Some(p) -> p.!tail = c
        | None() -> !taken = c
        };
        !prev = Some(c);

        !cur = tail;
        !n = n - 1
      }
    }
  }

  readonly fun partition(p: T -> Bool): (List<T>, List<T>) {
    cur = this;
    trues: List<T> = Nil();
    falses: List<T> = Nil();
    loop {
      cur match {
      | Nil() -> break (trues.reversed(), falses.reversed())
      | Cons(hd, tl) ->
        if (p(hd)) !trues = Cons(hd, trues) else !falses = Cons(hd, falses);
        !cur = tl
      }
    }
  }

  readonly fun values(): mutable Iterator<T> {
    mutable ListIterator(this)
  }

  readonly fun last(): T {
    cur = this;
    loop {
      cur match {
      | Nil() -> break this.getHead()
      | Cons(hd, Nil()) -> break hd
      | Cons(_, tl) -> !cur = tl
      }
    }
  }

  readonly fun maybeLast(): ?T {
    cur = this;
    loop {
      cur match {
      | Nil() -> break None()
      | Cons(hd, Nil()) -> break Some(hd)
      | Cons(_, tl) -> !cur = tl
      }
    }
  }

  readonly fun hash[T: Hashable](): Int {
    this.foldl((i, x) -> (i, x.hash()).hash(), 0)
  }

  readonly fun hashBy(hash: T -> Int, seed: Int): Int {
    this.foldl((i, x) -> (i, hash(x)).hash(), seed)
  }

  readonly fun join[T: readonly Show](separator: String): String {
    this.collect(Array).join(separator)
  }

  async fun genReverse<U: frozen>[T: ^U](): ^List<U> {
    await this.genReverseHelp(Nil())
  }

  protected async fun genReverseHelp<U: frozen>[T: ^U](tl: List<U>): ^List<U>
  | Cons(x, rest) -> await rest.genReverseHelp(Cons(await x, tl))
  | Nil() -> tl

  frozen async fun genFoldl<R>(f: (R, T) ~> ^R, init: R): ^R
  | Cons(x, rest) -> await rest.genFoldl(f, await f(init, x))
  | Nil() -> init

  // reverse map
  protected static fun mapRev<T, T2>(
    f: T -> T2,
    acc: List<T2>,
    list: readonly List<T>,
  ): List<T2> {
    list match {
    | Nil() -> acc
    | Cons(h, t) -> List::mapRev(f, Cons(f(h), acc), t)
    }
  }

  static fun all2<T1, T2>(
    values1: List<T1>,
    values2: List<T2>,
    predicate: (T1, T2) -> Bool,
  ): Bool {
    (values1, values2) match {
    | (Nil(), Nil()) -> true
    | (Cons(head1, tail1), Cons(head2, tail2)) ->
      predicate(head1, head2) && List::all2(tail1, tail2, predicate)
    | _ -> invariant_violation("Mismatched sizes in List.all2")
    }
  }

  static fun iter2<T1, T2>(
    values1: List<T1>,
    values2: List<T2>,
    fn: (T1, T2) -> void,
  ): void {
    (values1, values2) match {
    | (Nil(), Nil()) -> void
    | (Cons(head1, tail1), Cons(head2, tail2)) ->
      fn(head1, head2);
      List::iter2(tail1, tail2, fn)
    | _ -> invariant_violation("Mismatched sizes in List.iter2")
    }
  }

  readonly fun toArray(): Array<T> {
    x = this;
    Array::fillBy(this.size(), _ ->
      x match {
      | Cons(head, tail) ->
        !x = tail;
        head
      | Nil() -> invariant_violation("unreachable")
      }
    )
  }

  readonly fun toString[T: readonly Show](): String {
    `List[${this.join(", ")}]`
  }
}

mutable private class ListIterator<+T>(
  private mutable list: readonly List<T>,
) extends Iterator<T> {
  readonly fun sizeHint(): ?Int {
    Some(this.list.size())
  }

  mutable fun next(): ?T {
    this.list match {
    | Nil() -> None()
    | Cons(head, tail) ->
      this.!list = tail;
      Some(head)
    }
  }
}

module end;
