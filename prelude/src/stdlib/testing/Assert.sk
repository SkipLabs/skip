/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

class AssertionFailure(
  message: String,
  expected: String,
  actual: String,
) extends Exception {
  fun getMessage(): String {
    "AssertionFailure: " +
      this.message +
      "\n  expected: " +
      this.expected +
      "\n  actual: " +
      this.actual
  }
}

// Named arguments cannot be used
fun assertFailure<T>{
  message: String,
  expected: String = "",
  actual: String = "",
}: T {
  throw AssertionFailure(message, expected, actual)
}

fun assertEqual<T: readonly Equality & readonly Show>(
  actual: T,
  expected: T,
  message: String = "values are not equal",
): void {
  if (expected != actual) {
    throw AssertionFailure(message, expected.toString(), actual.toString())
  }
}

fun assertNotEqual<T: readonly Equality & readonly Show>(
  actual: T,
  expected: T,
): void {
  if (expected == actual) {
    throw AssertionFailure(
      "values are equal",
      expected.toString(),
      actual.toString(),
    )
  }
}

fun assertEqualOption<T: readonly Equality & readonly Show>(
  actual: ?T,
  expected: ?T,
): void {
  expected match {
  | None() ->
    actual match {
    | None() -> void
    | Some(y) ->
      assertFailure{
        message => "values are not equal",
        expected => "None",
        actual => "Some(" + y + ")",
      }
    }
  | Some(x) ->
    actual match {
    | None() ->
      assertFailure{
        message => "values are not equal",
        expected => "Some(" + x + ")",
        actual => "None",
      }
    | Some(y) -> assertEqual(y, x)
    }
  }
}

fun assertTrue(b: Bool): void {
  assertEqual(b, true)
}

fun assertFalse(b: Bool): void {
  assertEqual(b, false)
}

fun assertThrows<T>(f: () -> T): void {
  threw = false;
  vtry(
    () -> {
      _ = f();
    },
    _ -> {
      !threw = true
    },
  );
  if (!threw) {
    assertFailure{
      message => "expected an exception, but none were thrown",
      expected => "an exception",
      actual => "no exception",
    };
  }
}

fun assertDoesNotThrow<T: frozen>(f: () -> T): void {
  vtry(
    () -> {
      _ = f();
      void;
    },
    e -> {
      assertFailure{
        message => "an exception was thrown",
        expected => "no exception",
        actual => e.getMessage(),
      }
    },
  );
}
