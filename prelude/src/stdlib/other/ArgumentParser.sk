/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Utilities for parsing command-line arguments.
 *
 * # Example Usage
 *
 * 1. Define a schema as an array of `Param`s:
 *
 *     schema = Array[
 *       IntParam{name => "n", help => "...", required => true}
 *       StringParam{name => "s", default => Some("")}
 *       StringParam{name => "optional"}
 *     ]
 *
 * 2. Parse input arguments against the schema:
 *
 *     args = arguments();
 *     result = parse(schema, args);
 *
 * 3. For bool params, required params, and params with default values, the
 *    value can be read unconditionally (readBool, readInt, etc):
 *
 *     n: Int = result.getInt("n");
 *     s: String = result.getString("s")
 *
 * 4. For other params (not required and no default), read the value as
 *    an option:
 *
 *     foo: ?String = result.maybeGetString("optional")
 *
 * # Help Messages
 *
 * Use `help(schema)` to create a help message for a schema
 */
module ArgumentParser;

/**
 * Build a help string describing the arguments of a schema.
 */
fun help(schema: Sequence<Param>): String {
  lines = mutable Vector[];
  requiredText = required ~> if (required) "required" else "optional";
  for (param in schema) {
    param match {
    | BoolParam{name, help, negatable} ->
      lines.push(`  --${name}${if (help != "") ": " + help else ""}`);
      if (negatable) {
        lines.push(`  --no-${name}: inverse of --${name}.`);
      }
    | IntParam{name, help, required, default} ->
      defaultText = default match {
      | Some(x) -> `, default ${x}`
      | _ -> ""
      };
      lines.push(
        `  --${name} <int>: (${requiredText(required)}${defaultText}) ${help}`,
      )
    | StringParam{name, help, default, required} ->
      defaultText = default match {
      | Some(x) -> `, default '${x}'`
      | _ -> ""
      };
      lines.push(
        `  --${name} <string>: (${requiredText(
          required,
        )}${defaultText}) ${help}`,
      )
    | StringArrayParam{name, help, default, required} ->
      defaultText = default match {
      | Some(x) -> `, default [${x.map(s ~> `'${s}'`).join(", ")}]`
      | _ -> ""
      };
      lines.push(
        `  --${name} <string>: (${requiredText(
          required,
        )}${defaultText}) ${help}`,
      )
    }
  };
  lines.join("\n")
}

/**
 * Given a schema describing zero or more arguments and some values (typically derived
 * from argv), returns a mapping of argument name to argument value, plus any unrecognized
 * argument values. Returns Success(ParseResult) if the arguments were parsed successfully,
 * or Failure(ArgumentError) otherwise.
 */
fun parse(
  schema: Sequence<Param>,
  argv: Sequence<String>,
): Result<ParseResult, ArgumentError> {
  // Build a mapping of all possible options
  options = mutable Map[];
  for (param in schema) {
    flag = "--" + param.name;
    if (options.containsKey(flag)) {
      invariant_violation(`Duplicate definition of argument '${param.name}'.`)
    };
    options.add(flag, param);
    // Add inverted bool options
    param match {
    | bool @ BoolParam{negatable => true} ->
      options.add("--no-" + bool.name, bool with {value => !bool.value});
      // todo: remove support for legacy `--no<flag>` style once new style
      // is supported in lkg
      options.add("--no" + bool.name, bool with {value => !bool.value})
    | _ -> void
    };
  };

  // Results
  argumentValues: mutable Map<String, mutable Value> = mutable Map[];
  rest = mutable Vector[];
  unknown = mutable Vector[];

  iterator = argv.values();
  hasRest = false;
  loop {
    iterator.next() match {
    | None() -> break void
    | Some(str) if (hasRest) -> rest.push(str)
    | Some("--") -> !hasRest = true
    | Some(str) ->
      options.maybeGet(str) match {
      | Some(BoolParam{name, value}) ->
        argumentValues.set(name, mutable BoolValue{name, value})
      | Some(IntParam{name, validate}) ->
        validation = liftValidation(name, validate);
        readInt(name, iterator).flatMap(validation) match {
        | Success(intValue) ->
          argumentValues.set(name, mutable IntValue{name, value => intValue})
        | Failure(exn) -> return Failure(exn)
        }
      | Some(StringParam{name, validate}) ->
        validation = liftValidation(name, validate);
        readString(name, iterator).flatMap(validation) match {
        | Success(stringValue) ->
          argumentValues.set(
            name,
            mutable StringValue{name, value => stringValue},
          )
        | Failure(exn) -> return Failure(exn)
        }
      | Some(StringArrayParam{name, validate}) ->
        argumentValues.getOrAdd(name, () ->
          mutable StringArrayValue{name, value => mutable Vector[]}
        ) match {
        | StringArrayValue{value} ->
          validation = liftValidation(name, validate);
          readString(name, iterator).flatMap(validation) match {
          | Success(stringValue) -> value.push(stringValue)
          | Failure(exn) -> return Failure(exn)
          }
        | value ->
          return Failure(
            InvalidValueError(
              name,
              `Expected a list of strings, got '${value}'`,
            ),
          )
        }
      | _ -> unknown.push(str)
      }
    }
  };

  // Check that no required arguments were missing a value and fill default/missing values
  for (param in schema) {
    if (argumentValues.containsKey(param.name)) {
      continue;
    };
    param match {
    | BoolParam{name} ->
      argumentValues.set(name, mutable MissingValue{name, param})
    | IntParam{name, required, default} ->
      if (required) {
        return Failure(MissingValueError(name))
      } else {
        default match {
        | Some(value) -> argumentValues.set(name, mutable IntValue{name, value})
        | _ -> argumentValues.set(name, mutable MissingValue{name, param})
        }
      }
    | StringParam{name, required, default} ->
      if (required) {
        return Failure(MissingValueError(name))
      } else {
        default match {
        | Some(value) ->
          argumentValues.set(name, mutable StringValue{name, value})
        | _ -> argumentValues.set(name, mutable MissingValue{name, param})
        }
      }
    | StringArrayParam{name, required, default} ->
      if (required) {
        return Failure(MissingValueError(name))
      } else {
        default match {
        | Some(value) ->
          argumentValues.set(
            name,
            mutable StringArrayValue{name, value => value.clone()},
          )
        | _ -> argumentValues.set(name, mutable MissingValue{name, param})
        }
      }
    }
  };

  Success(
    ParseResult{
      argumentValues => argumentValues.chill().map((_, x) -> x.chill()),
      hasRest,
      rest => rest.chill(),
      unknown => unknown.chill(),
    },
  )
}

/**
 * A description of an individual argument accepted by a program.
 */
base class Param{name: String, help: String = ""} {
  children =
  /**
   * A valueless argument: `--<name>` sets the value to `value`. If
   * `negative` is true then `--no<name>` sets the value to `!value`.
   */
  | BoolParam{value: Bool = true, negatable: Bool = true}

  /**
   * An argument with a single, integer value.
   */
  | IntParam{
    required: Bool = false,
    default: ?Int = None(),
    validate: Int ~> Result<void, String> = _ ~> Success(void),
  }

  /**
   * An argument with a single, string value.
   */
  | StringParam{
    required: Bool = false,
    default: ?String = None(),
    validate: String ~> Result<void, String> = _ ~> Success(void),
  }

  /**
   * An argument that may appear zero or more times, each with a single string value.
   */
  | StringArrayParam{
    required: Bool = false,
    default: ?Vector<String> = None(),
    validate: String ~> Result<void, String> = _ ~> Success(void),
  }
}

// Helper to convert a user-defined validate function that returns void for
// success and string message for failure into one that returns the value
// on success or an InvalidValueError on failure.
private fun liftValidation<T>(
  name: String,
  validate: T ~> Result<void, String>,
): T ~> Result<T, ArgumentError> {
  value ~> {
    validate(value) match {
    | Success(void) -> Success(value)
    | Failure(reason) -> Failure(InvalidValueError(name, reason))
    }
  }
}

// Helper for validating that input strings are non-empty
const nonEmpty: String ~> Result<void, String> = str ~>
  if (!str.trim().isEmpty()) {
    Success(void)
  } else {
    Failure(`Expected value to be non-empty, got '${str}'.`)
  };

// Helper for validating that input integers are nonnegative
const nonNegative: Int ~> Result<void, String> = int ~>
  if (int >= 0) {
    Success(void)
  } else {
    Failure(`Expected value to be nonnegative, got '${int}'.`)
  };

// Helper for validating that input integers are greater than zero
const strictlyPositive: Int ~> Result<void, String> = int ~>
  if (int > 0) {
    Success(void)
  } else {
    Failure(
      `Expected value to be strictly positive (greater than zero), got '${int}'`,
    )
  };

// Helper to create a validator that accepts only the allowed choices.
fun oneOf<T: Hashable & Equality & Show>(
  choices: Set<T>,
): T ~> Result<void, String> {
  value ~>
    if (choices.contains(value)) {
      Success(void)
    } else {
      Failure(
        `Expected one of ${choices
          .map(x ~> `${x}`)
          .join(", ")}, got '${value}'`,
      )
    }
}

/**
 * A parsed argument value.
 */
mutable base class Value{name: String} uses Show {
  children =
  | MissingValue{param: Param}
  | BoolValue{value: Bool}
  | IntValue{value: Int}
  | StringValue{value: String}
  | StringArrayValue{value: mutable Vector<String>}

  readonly fun chill(): this
  | MissingValue{name, param} -> MissingValue{name, param}
  | BoolValue{name, value} -> BoolValue{name, value}
  | IntValue{name, value} -> IntValue{name, value}
  | StringValue{name, value} -> StringValue{name, value}
  | StringArrayValue{name, value} ->
    StringArrayValue{name, value => value.chill()}

  readonly fun toString(): String
  | MissingValue _ -> "(no value)"
  | BoolValue{name, value} -> `boolean value: ${name}=${value}`
  | IntValue{name, value} -> `integer value: ${name}=${value}`
  | StringValue{name, value} -> `string value: ${name}='${value}'`
  | StringArrayValue{name, value} ->
    `string array value: ${name}=[${value.map(s ~> `'${s}'`).join(", ")}]`
}

/**
 * Results of parsing arguments on a specific set of inputs.
 */
class ParseResult{
  argumentValues: Map<String, Value>,
  hasRest: Bool,
  rest: Vector<String>,
  unknown: Vector<String>,
} {
  // Like maybeGetBool(), but always returns a Bool by defaulting to the same
  // value as if `--no-<name>` had been explicitly provided.
  // Throws if the argument was not defined as a BoolParam.
  fun getBool(name: String): Bool {
    this.argumentValues.maybeGet(name) match {
    | Some(BoolValue{value}) -> value
    | Some(MissingValue{param => BoolParam{value}}) -> !value
    // Other cases are programmer error:
    | Some(value @ _) ->
      invariant_violation(
        `Attempted to access '${name}' as a bool, got '${value}'.`,
      )
    | None() ->
      invariant_violation(
        `Attempted to access the value of undefined argument '${name}'.`,
      )
    }
  }

  // Read a boolean, returning Some(Bool) if --flag or --no-flag was explicitly
  // specified and None() otherwise.
  // Throws if the argument was not defined as a BoolParam.
  fun maybeGetBool(name: String): ?Bool {
    this.argumentValues.maybeGet(name) match {
    | Some(BoolValue{value}) -> Some(value)
    | Some(MissingValue{param => BoolParam _}) -> None()
    // Other cases are programmer error:
    | Some(value @ _) ->
      invariant_violation(
        `Attempted to access '${name}' as a bool, got '${value}'.`,
      )
    | None() ->
      invariant_violation(
        `Attempted to access the value of undefined argument '${name}'.`,
      )
    }
  }

  // Read the value of an int param that is required or has a default value.
  // Throws if the argument was not defined as an IntParam.
  fun getInt(name: String): Int {
    this.maybeGetInt(name) match {
    | Some(value) -> value
    | _ ->
      invariant_violation(
        `Attempted to unconditionally access non-required/non-default argument '${name}'.`,
      )
    }
  }

  // Read the value of an int param that may not be present (not required
  // and no default value).
  // Throws if the argument was not defined as an IntParam.
  fun maybeGetInt(name: String): ?Int {
    this.argumentValues.maybeGet(name) match {
    | Some(IntValue{value}) -> Some(value)
    | Some(MissingValue{param => IntParam _}) -> None()
    // Other cases are programmer error:
    | Some(value @ _) ->
      invariant_violation(
        `Attempted to access '${name}' as an int, got '${value}'.`,
      )
    | None() ->
      invariant_violation(
        `Attempted to access the value of undefined argument '${name}'.`,
      )
    }
  }

  // Read the value of a string param that is required or has a default value.
  // Throws if the argument was not defined as a StringParam.
  fun getString(name: String): String {
    this.maybeGetString(name) match {
    | Some(value) -> value
    | _ ->
      invariant_violation(
        `Attempted to unconditionally access non-required/non-default argument '${name}'.`,
      )
    }
  }

  // Read the value of a string param that may not be present (not required
  // and no default value).
  // Throws if the argument was not defined as a StringParam.
  fun maybeGetString(name: String): ?String {
    this.argumentValues.maybeGet(name) match {
    | Some(StringValue{value}) -> Some(value)
    | Some(MissingValue{param => StringParam _}) -> None()
    // Other cases are programmer error:
    | Some(value @ _) ->
      invariant_violation(
        `Attempted to access '${name}' as a string, got '${value}'.`,
      )
    | None() ->
      invariant_violation(
        `Attempted to access the value of undefined argument '${name}'.`,
      )
    }
  }

  // Read the value of a string array param that is required or has a default
  // value.
  // Throws if the argument was not defined as a StringArrayParam.
  fun getStringArray(name: String): Vector<String> {
    this.maybeGetStringArray(name) match {
    | Some(value) -> value
    | _ ->
      invariant_violation(
        `Attempted to unconditionally access non-required/non-default argument '${name}'.`,
      )
    }
  }

  // Read the value of a string array param that may not be present (not
  // required and no default value).
  // Throws if the argument was not defined as a StringArrayParam.
  fun maybeGetStringArray(name: String): ?Vector<String> {
    this.argumentValues.maybeGet(name) match {
    | Some(StringArrayValue{value}) -> Some(value)
    | Some(MissingValue{param => StringArrayParam _}) -> None()
    // Other cases are programmer error:
    | Some(value @ _) ->
      invariant_violation(
        `Attempted to access '${name}' as a string array, got '${value}'.`,
      )
    | None() ->
      invariant_violation(
        `Attempted to access the value of undefined argument '${name}'.`,
      )
    }
  }

  // Returns an iterator over the parsed values in the order that each
  // flag first appeared.
  fun values(): mutable Iterator<Value> {
    this.argumentValues.values()
  }
}

/**
 * Param parsing errors
 */
base class ArgumentError extends Exception uses Equality {}

class MissingValueError(name: String) extends ArgumentError {
  fun getMessage(): String {
    `No value provided for required argument ${this.name}.`
  }
}
class InvalidValueError(name: String, hint: String) extends ArgumentError {
  fun getMessage(): String {
    hint = if (this.hint.isEmpty()) "" else " " + this.hint;
    `Invalid value for argument '${this.name}'.${hint}.`
  }
}

private fun readInt(
  name: String,
  iterator: mutable Iterator<String>,
): Result<Int, ArgumentError> {
  readString(name, iterator).flatMap(str -> {
    str.toIntOption() match {
    | Some(i) -> Success(i)
    | _ -> Failure(InvalidValueError(name, `Expected an integer, got '${str}'`))
    }
  })
}

private fun readString(
  name: String,
  iterator: mutable Iterator<String>,
): Result<String, ArgumentError> {
  iterator.next() match {
  | Some(str) -> Success(str)
  | None() -> Failure(MissingValueError(name))
  }
}
