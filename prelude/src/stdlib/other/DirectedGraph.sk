/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module DirectedGraph;

// https://en.wikipedia.org/wiki/Directed_graph
//
// A directed graph is a set of Vertices and a collection of Edges.
//
// An Edge is an ordered pair of vertices, a head and a tail.
// Note that the edges in a graph need not be unique.
//
// The tail of an edge is said to be a direct succcessor of the head of that
// edge.
//
// A path is a sequence of edges where the tail of each edge is the head of
// the next edge in the path. The head of the first edge is the start of the path.
// The tail of the last edge is the end of the path.
//
// A destination vertex is reachable from a source vertex if a path exists
// whose start is the source vertex and whose end is the destination vertex.
// Every vertex is considered reachable from itself by an empty path.
//
// The size of a path is the number of edges in the path.
//
// The distance from a source vertex to a destination is the size of the
// shortest path from the source to the destination. If no path exists
// then the distance between the 2 vertices is not well defined.
//
// A cycle is a path whose start end end are the same vertex.
//
// A graph containing a cycle is a cyclic graph.
// A graph which contains no cycles is an acyclic graph.
//
// The strongly connected components of a graph is a partition of the graph's
// vertices where each vertex in a partition is reachable by every other vertex in
// that partition. In an acyclic graph, each strongly connected
// component contains exactly one vertex.
class .DirectedGraph<Vertex: Hashable & Equality & frozen>{
  vertices: Vector<Vertex>,
  vertexToSuccessors: Vertex ~> Vector<Vertex>,
} {
  fun edges(): mutable Iterator<(Vertex, Vertex)> {
    this.vertices.values().flatMap((head: Vertex) ~> {
      this.successorsOf(head).map(tail ~> (head, tail)).values();
    });
  }

  // Returns the direct successors of a vertex.
  fun successorsOf(vertex: Vertex): Vector<Vertex> {
    this.vertexToSuccessors(vertex);
  }

  // Returns all vertices reachable from the input vertex.
  // The returned vertices will be ordered by their distance from the input vertex;
  // closest first.
  // The result includes the input vertex as the first element.
  fun reachableFromBFS(vertex: Vertex): Set<Vertex> {
    visited = mutable Set[vertex];
    // TODO: Should really have a Q class instead of a Vector.
    todo = mutable Vector[vertex];
    index = 0;
    while (index < todo.size()) {
      current = todo[index];
      !index = index + 1;
      for (child in this.successorsOf(current)) {
        if (visited.maybeInsert(child)) {
          todo.push(child);
        }
      };
    };
    visited.chill();
  }

  // Returns all vertices reachable from the input vertex.
  // The returned set yields vertices in DFS order.
  // For acyclic graphs a vertex will appear in the result after all of its
  // direct and indirect successors.
  fun reachableFromDFS(vertex: Vertex): Set<Vertex> {
    this.dfsOrder(Vector[vertex]);
  }

  // Returns all vertices in the graph in depth first order.
  // For acyclic graphs a vertex will appear in the result after all of its
  // direct and indirect successors.
  fun dfsOrderAll(): Set<Vertex> {
    this.dfsOrder(this.vertices);
  }

  // Returns all vertices reachable from any of the roots.
  // For acyclic graphs a vertex will appear in the result after all of its
  // direct and indirect successors.
  fun dfsOrder(roots: Vector<Vertex>): Set<Vertex> {
    seen = mutable UnorderedSet[];
    result = mutable Set[];
    todo = mutable Vector[];

    add = child -> {
      if (seen.maybeInsert(child)) {
        todo.push((0, child));
      };
    };

    for (vertex in roots) {
      add(vertex);
      while (!todo.isEmpty()) {
        (index, current) = todo.pop();
        edges = this.successorsOf(current);
        if (index < edges.size()) {
          todo.push((index + 1, current));
          add(edges[index]);
        } else {
          result.add(current);
        }
      }
    };

    result.chill();
  }

  // Returns one of the shortest non-degenerate strongly connected components
  // in the graph, if any exist.
  //
  // Note that this is not the same as finding the smallest cycle.
  // Finding the smallest cycle requires much more computation.
  // See Floyd-Warshall algorithm for details.
  fun getSmallestStronglyConnectedComponent(): ?Vector<Vertex> {
    this.getStronglyConnectedComponents()
      .filter(component ~> component.size() > 1)
      .minBy(cycle ~> cycle.size());
  }

  // https://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm
  // Tme: Order(V + E)
  fun getStronglyConnectedComponents(): Vector<Vector<Vertex>> {
    vertexToIndex = mutable UnorderedMap[];
    vertexToComponentRootIndex = mutable UnorderedMap[];
    result: mutable Vector<Vector<Vertex>> = mutable Vector[];
    index = 0;
    stack = mutable Vector[];
    onStack = mutable UnorderedSet[];

    seen = vertex -> vertexToIndex.containsKey(vertex);
    assignIndex = vertex -> {
      vertexToIndex.add(vertex, index);
      vertexToComponentRootIndex.add(vertex, index);
      !index = index + 1;
      stack.push(vertex);
      onStack.add(vertex);
    };
    componentRootIndex = vertex -> vertexToComponentRootIndex.get(vertex);
    getIndex = vertex -> vertexToIndex.get(vertex);
    reduceComponentRootIndex = (vertex, min) -> {
      if (componentRootIndex(vertex) > min) {
        vertexToComponentRootIndex.set(vertex, min);
      }
    };

    // TODO: Recursive lambdas.
    recurse: Vertex -> void = _ -> void;
    !recurse = vertex -> {
      if (!seen(vertex)) {
        assignIndex(vertex);

        // Examine neighbors
        for (neighbor in this.successorsOf(vertex)) {
          if (!seen(neighbor)) {
            recurse(neighbor);
            reduceComponentRootIndex(vertex, componentRootIndex(neighbor));
          } else if (onStack.contains(neighbor)) {
            reduceComponentRootIndex(vertex, getIndex(neighbor));
          };
        };

        // Check for the root of a component
        if (getIndex(vertex) == componentRootIndex(vertex)) {
          component = mutable Vector[];
          while ({
            top = stack.pop();
            onStack.remove(top);
            component.push(top);
            top != vertex;
          }) void;
          result.push(component.chill());
        }
      }
    };

    this.vertices.each(recurse);

    result.chill();
  }
}

// Creates a directed graph.
// Each element of successors is a Vertex and the direct successors of that vertex.
fun create<Vertex: Hashable & Equality>(
  successors: Vector<(Vertex, Vector<Vertex>)>,
): DirectedGraph<Vertex> {
  map = successors.collect(UnorderedMap);
  DirectedGraph{
    vertices => map.keys().collect(Vector),
    vertexToSuccessors => vertex ~> map.get(vertex),
  };
}

module end;
