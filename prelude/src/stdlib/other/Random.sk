/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Random;

// Default RNG using the Xoroshiro128plus algorithm. This is a robust RNG with
// 128 bits of state. Note that low bits have less entropy than higher bits:
// use sign test to derive random booleans (or randomBool()), and use right
// shifts (or random()) to derive smaller values (as opposed to modulo).
// Adapted from http://vigna.di.unimi.it/xorshift/xoroshiro128plus.c
mutable class .Random private (
  private mutable s0: Int,
  private mutable s1: Int,
) uses Show {
  static fun create(state: Int): this {
    static::mcreate(state).chill()
  }

  readonly fun chill(): this {
    static(this.s0, this.s1)
  }

  // Create an instance using a 64 bit seed. The seed is used to initialize
  // a 64-bit RNG from which two state values are extracted.
  static fun mcreate(seed: Int): mutable this {
    invariant(seed != 0, "Random: Expected seed to be non-zero.");
    rng = Splitmix64::mcreate(seed);
    // Extract two non-zero state values
    s0 = 0;
    s1 = 0;
    while (s0 == 0) !s0 = rng.next();
    while (s1 == 0) !s1 = rng.next();
    mutable static(s0, s1)
  }

  static fun createWithState(s0: Int, s1: Int): this {
    static::mcreateWithState(s0, s1).chill()
  }

  static fun mcreateWithState(s0: Int, s1: Int): mutable this {
    invariant(
      s0 != 0 || s1 != 0,
      "Random: Expected at least one seed to be non-zero.",
    );
    mutable static(s0, s1)
  }

  readonly fun clone(): mutable this {
    mutable static(this.s0, this.s1)
  }

  // Returns the next raw random number from this generator.
  mutable fun next(): Int {
    s0 = this.s0;
    s1 = this.s1;
    result = s0 + s1;
    !s1 = s1.xor(s0);
    this.!s0 = rotl(s0, 55).xor(s1).xor(s1.shl(14));
    this.!s1 = rotl(s1, 36);
    result
  }

  // Returns a random number within the range from start (inclusive) to end (exclusive).
  mutable fun random(start: Int, end: Int): Int {
    range = end - start;
    invariant(
      end > start,
      "Random.random(): Expected end to be greater than start.",
    );
    invariant(
      range.ule(Int::max),
      "Random.random(): Expected start/end delta to be less than maximum Int.",
    );
    raw = 0;
    // Use the highest N bits (which have more entropy than low bits), where N
    // is the minimum number of bits necessary to fit `range`. This retains as
    // much randomness as possible from the input. To ensure an even distribution
    // of vaues within the range, use a loop to reject values >= range (rather
    // than a modulo operation).
    shift = range.clz();
    while ({
      !raw = this.next().ushr(shift);
      raw.uge(range)
    }) void;
    start + raw
  }

  // Returns a random boolean
  mutable fun randomBool(): Bool {
    // Xoroshiro128plus authors recommend using a sign test to derive a bool,
    // high bits have better randomness than low bits.
    this.next() > 0
  }

  // Returns a random Float in the range [0, 1)
  mutable fun randomFloat(): Float {
    next = this.random(0, 1.shl(53));
    next.toFloat() * (1.0 / (1.shl(53).toFloat()))
  }

  // Alter the random number generator in a deterministic way depending
  // on its argument. Used for generating random functions: the generated
  // function will take its argument, perturb the generator, and use that
  // to generate the return value.
  mutable fun perturb(n: Int): void {
    this.!s0 = this.s0.xor(n);
    this.!s1 = this.s1.xor(n);
  }

  readonly fun toString(): String {
    this.s0.toString() + " " + this.s1
  }
}

// Splitmix64 is a simple & fast RNG with 64 bits of state, recommended for use
// initializing the state of other RNGs.
// Adapted from http://xoroshiro.di.unimi.it/splitmix64.c
private mutable class Splitmix64 private (private mutable state: Int) {
  static fun mcreate(seed: Int): mutable this {
    invariant(seed != 0, "Splitmix64: Expected seed to be non-zero.");
    mutable static(seed)
  }

  mutable fun next(): Int {
    state = this.state + 0x9e3779b97f4a7c15;
    next = state.xor(state.ushr(30)) * 0xbf58476d1ce4e5b9;
    !next = next.xor(next.ushr(27)) * 0x94d049bb133111eb;
    !next = next.xor(next.ushr(31));
    this.!state = state;
    next
  }
}

private fun rotl(x: Int, k: Int): Int {
  x.shl(k).or(x.ushr(64 - k))
}

module end;
