/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Filesystem Paths
//
// Multiple consqcutive /'s are equivalent to a single /.
// Trailing /'s are not significant in paths.

module Path;

const separator: String = "/";
const extSeparator: String = ".";
const parentDirectory: String = "..";
const currentDirectory: String = ".";
const rootDirectory: String = "/";

fun isAbsolute(path: String): Bool {
  path.startsWith(rootDirectory);
}

fun isRelative(path: String): Bool {
  !isAbsolute(path);
}

fun isRoot(path: String): Bool {
  normalize(path) == rootDirectory;
}

fun isNormalized(path: String): Bool {
  normalize(path) == path;
}

// Trims trailing separator chars from a path.
//
// trimTrailingSeparators("path/") == "path"
// trimTrailingSeparators("path///") == "path"
// trimTrailingSeparators("/") == "/"
// trimTrailingSeparators("///") == "/"
// trimTrailingSeparators("") == ""
fun trimTrailingSeparators(path: String): String {
  if (path == rootDirectory) {
    path
  } else {
    i = path.getEndIter();
    while (i.prev() == Some('/')) {
      void
    };
    _ = i.next();
    path.getIter().substring(i)
  }
}

// Returns the directory name of a path.
// Trailing separators are ignored.
// Returns "." if path is empty, or contains only a filename.
//
// The returned directory name will have traililng spearators removed.
//
// Note that the result of dirname(path) may not be normalize()d.
//
// dirname("/") == "/"
// dirname("/base") == "/"
// dirname("base") == "."
// dirname("dir/base") == dir
// dirname("dir////base") == dir
// dirname("dir/base///") == "base"
// dirname("dir/..") == "dir"
// dirname("dir/.") == "dir"
// dirname(".") == "."
// dirname("..") == ".."
// dirname("/..") == "/"
// dirname("/.") == "/"
// dirname("") == "."
fun dirname(path: String): String {
  split(path).i0;
}

// Returns the portion of a path after the last separator.
// Trailing separators are ignored
// Returns empty if path is empty, rootDirectory, currentDirectory, parentDirectory.
//
// basename("") == ""
// basename("/") == ""
// basename(".") == ""
// basename("..") == ""
// basename("/..") == ".."
// basename("/.") == "."
// basename("dir/..") == ".."
// basename("dir/.") == "."
// basename("base") == "base"
// basename("dir/base") == "base"
// basename("dir/base///") == "base"
fun basename(path: String): String {
  split(path).i1;
}

// Returns (dirname(path), basename(path))
fun split(path: String): (String, String) {
  trimmedPath = trimTrailingSeparators(path);
  trimmedPath match {
  | "" -> (currentDirectory, "")
  | "/" -> (rootDirectory, "")
  | "." -> (currentDirectory, "")
  | ".." -> (parentDirectory, "")
  | "/." -> (rootDirectory, currentDirectory)
  | "/.." -> (rootDirectory, parentDirectory)
  | _ ->
    trimmedPath.splitLast(separator) match {
    | ("", "") -> invariant_violation("Should be handled above")
    | ("", base) ->
      invariant(!base.isEmpty());
      // Either basename or /basename
      if (isAbsolute(trimmedPath)) {
        (rootDirectory, base);
      } else {
        (currentDirectory, base);
      }
    | (dir, base) ->
      invariant(!dir.isEmpty());
      invariant(!base.isEmpty());
      (trimTrailingSeparators(dir), base)
    }
  };
}

// Returns the portion of the basename of a path after the last "." inclusive.
// Always includes the "." if present.
//
// Returns "" if the basename(path) is "..", "." or does not contain ".".
//
// Trailing separators are ignored.
//
// extname("a.ext") == ".ext"
// extname("a.") == "."
// extname("a.b.c") == ".c"
// extname(".ext") == ".ext"
// extname("dir/basename") == ""
// extname("a.ext///") == ".ext"
fun extname(path: String): String {
  base = basename(path);
  base match {
  | "" | "." | ".." -> ""
  | _ ->
    base.splitLast(extSeparator) match {
    | ("", ext) if (!base.startsWith(extSeparator)) ->
      // Not found
      invariant(base == ext);
      ""
    | (_, ext) -> extSeparator + ext
    }
  }
}

// Removes unnecessary ".", ".." components.
// Removes trailing "/"s and adjacent "/"s.
// An empty input yields currentDirectory.
//
// For all paths:
// normalize(path) == join(normalize(dirname(path), basename(path)))
//
// normalize("/") == "/"
// normalize("path///") == "path"
// normalize("a///b") == "a/b"
// normalize("a/./b") == "a/b"
// normalize("a/b/../c") == "a/c"
// normalize("") == "."
// normalize("../file") == "../file"
// normalize("../../file") == "../../file"
// normalize("../..) == "../.."
// normalize("./..") == ".."
// normalize("/..") == "/.."
// normalize("/.") == "/"
// normalize("a/..") == "."
fun normalize(path: String): String {
  split(path) match {
  | (dir, "") ->
    // path is one of /, ., ..
    dir
  | (dir, ".") -> normalize(dir)
  | (dir, "..") -> parentname(dir)
  | (dir, base) ->
    normalize(dir) match {
    | "." -> base
    | "/" -> "/" + base
    | normalizedDir -> `${normalizedDir}/${base}`
    }
  };
}

// Returns the normalized result of normalize(path) + "/..".
fun parentname(path: String): String {
  normalize(path) match {
  | "/" ->
    "/.." // Degenerate input path
  | "." -> ".."
  | ".." -> "../.."
  | normalizedDir ->
    split(normalizedDir) match {
    | (_, "..") -> normalizedDir + "/.."
    | (dirdir, dirbase) ->
      invariant(dirbase != "" && dirbase != "." && dirbase != "..");
      dirdir
    }
  };
}

// Joins 2 path components using separator and normalizes the result.
// zero length path components are ignored.
// Terminating separators are ignored.
// If the result would be 0 length, then currentDirectory is returned.
private fun join2(path1: String, path2: String): String {
  normalizedPath2 = normalize(path2);
  if (isAbsolute(normalizedPath2)) {
    normalizedPath2;
  } else {
    normalizedPath2 match {
    | "." -> normalize(path1)
    | ".." -> parentname(path1)
    | npath2 ->
      npath1 = normalize(path1);
      // TODO: Could do something like this to avoid normalizing the result:
      // while (() ~> npath2.startsWith("..") && !isRoot(npath1),
      //    () -> {
      //      !npath1 = parentnameNoNormalize(npath1);
      //      !npath2 = npath2.splice(
      //        if (npath2.startsWith("../")) 3 else 2,
      //        npath2.size());
      //  });
      // npath1 + if (!npath2.isEmpty()) "/" + npath2 else "";
      npath1 match {
      | "/" -> npath1 + npath2
      | "." -> npath2
      | _ -> normalize(`${npath1}/${npath2}`)
      }
    };
  }
}

// Joins path components using separator and normalizes the result.
// zero length path components are ignored.
// Terminating separators are ignored.
// If the result would be 0 length, then currentDirectory is returned.
fun join(path1: String = "", path2: String = "", path3: String = ""): String {
  // Avoid multiple normalizes.
  if (path3 == "") {
    join2(path1, path2);
  } else {
    join2(path1, join2(path2, path3));
  };
}

private fun resolve1(path: String): String {
  normalize(if (isAbsolute(path)) path else join(getcwd(), path));
}

private fun resolve2(path1: String, path2: String): String {
  if (path2.isEmpty()) {
    resolve1(path1);
  } else if (isAbsolute(path2)) {
    normalize(path2);
  } else {
    join(resolve1(path1), path2);
  }
}

// Resolves a sequence of paths into a normalized absolute path.
//
// The input paths are processed right to left,
// If the current path is absolute, then it is normalized and returned,
// Otherwise, the previous path is prepended and the process repeats.
// If there is no previous path, then the absolute current working directory is
// prepended and the process repeats.
//
// Empty paths are ignored.
//
// If no paths are supplied then the normalized, absolute,
// current working directory is returned.
fun resolve(
  path1: String = "",
  path2: String = "",
  path3: String = "",
): String {
  // Avoid multiple normalize calls on path1 and path2
  if (path3.isEmpty()) {
    resolve2(path1, path2);
  } else {
    resolve2(resolve2(path1, path2), path3);
  };
}

// TOOD: Add relative(path1, path2)
