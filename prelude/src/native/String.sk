/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Unsafe;

fun string_utf8_size(s: String): Int {
  String.byteSize(s).toInt()
}

@cpp_extern("SKIP_Unsafe_string_utf8_get")
native fun string_utf8_get(s: String, i: Int): UInt8;

module end;

module String;

extension class .String {
  fun utf8(): Array<UInt8> {
    result = mutable Vector[];
    for (i in Range(0, Unsafe.string_utf8_size(this))) {
      result.push(Unsafe.string_utf8_get(this, i));
    };
    result.toArray()
  }
}

class InvalidUtf8() extends Exception

@cpp_export("SKIP_invalid_utf8")
fun invalidUtf8(): void {
  throw (InvalidUtf8())
}

private fun blockIterator<T>(
  input: Sequence<T>,
  blockSize: Int,
): mutable Iterator<Array<T>> {
  loop {
    // peel off a block from the input
    pred = input.take(blockSize).collect(Array);
    if (pred.isEmpty()) yield break;
    !input = input.drop(blockSize);
    yield pred;
  }
}

// TODO: need an annotation which says "don't reorder these fields"
private mutable class ConvertBuffer{
  mutable input: readonly Array<UInt8>,
  output: mutable Array<UInt8> = Array::mfill(8192, UInt8::truncate(0)),
  pivot: mutable Array<UInt8> = Array::mfill(8192, UInt8::truncate(0)),
  mutable sourceEncoder: Runtime.NonGCPointer = Runtime.NonGCPointer::zero(),
  mutable targetEncoder: Runtime.NonGCPointer = Runtime.NonGCPointer::zero(),
  mutable inputUsed: Int = 0,
  mutable outputUsed: Int = 0,
  mutable pivotSource: Int = 0,
  mutable pivotTarget: Int = 0,
} {
  @cpp_runtime
  mutable native fun setup(
    inputEncoding: String,
    outputEncoding: String,
    throwOnBadCharacter: Bool,
  ): void;

  @cpp_runtime
  mutable native fun teardown(): void;

  @cpp_runtime
  mutable native fun convert(): void;

  @cpp_runtime
  mutable native fun flush(): void;

  readonly fun empty(): Bool {
    this.inputUsed == this.input.size()
  }
}
