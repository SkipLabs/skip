/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Iterator;

// A stateful instance describing one iteration pass over a sequence of values.
// Calling next() advances the iterator and returns Some(item) if there are
// more items or None() when there are no more items. An iterator cannot be
// reset: mutable methods will, in general, advance the iterator.
mutable base class .Iterator<+T> {
  // Returns a hint of the number of items that this Iterator may yield:
  // - Returns Some(n) if the exact number of items is known. Examples:
  //   iterators over concrete collections, 1:1 transform operations
  //   (e.g. map()).
  // - Otherwise returns None(). Examples: transform operations that may
  //   not be 1:1, such as filter(), flatMap(), takeWhile(), etc.
  overridable readonly fun sizeHint(): ?Int {
    None()
  }

  // Advance the Iterator's position and return Some() with the next item, or None()
  // if there are no more items.
  mutable fun next(): ?T;

  mutable fun values(): mutable Iterator<T> {
    this
  }

  mutable fun iterator(): mutable Iterator<T> {
    this
  }

  // Collects the results of this sequence into an instance of the given class.
  mutable fun collect<C: FromIterator<T>>(cls: Concrete<C>): C {
    cls::createFromIterator(this)
  }

  // # Iteration
  // Methods for iterating over the items of an iterator for the purpose
  // of executing side effects.

  // Calls the given function once per element of this iterator.
  @synonym("iter")
  overridable mutable fun each(f: T -> void): void {
    loop {
      this.next() match {
      | Some(x) -> f(x)
      | None() -> break void
      }
    }
  }

  // # Composition
  // Methods for creating a new iterator that represents the results of applying
  // an operation to the items of this iterator. In general the operation is
  // applied lazily, when the returned iterator is advanced, but implementations
  // may modify the original iterator in place. Callers should not use the
  // source iterator (this) after applying a composition operator.

  // Returns a new iterator representing the results of calling the selection
  // function on each element of this iterator.
  @synonym("select")
  @synonym("project")
  overridable mutable fun map<U>(f: T -> U): mutable Iterator<U> {
    mutable MapIterator(this, f)
  }

  // Returns a new iterator representing the results of calling the selection
  // function on each element to map each element to an iterator, and
  // (conceptually) flattening the resulting iterators.
  @synonym("selectMany")
  overridable mutable fun flatMap<U, I: mutable Iterator<U>>(
    f: T -> I,
  ): mutable Iterator<U> {
    for (value in this) {
      iter = f(value);
      for (x in iter) {
        yield x
      }
    }
  }

  overridable mutable fun flatten<U>[
    T: mutable Iterator<U>,
  ](): mutable Iterator<U> {
    this.flatMap(id)
  }

  overridable mutable fun concat(
    tail: mutable Iterator<T>,
  ): mutable Iterator<T> {
    for (x in this) {
      yield x;
    };
    for (x in tail) {
      yield x;
    };
  }

  // Returns a new iterator representing all the elements of this iterator
  // for which the predicate returns true.
  @synonym("where")
  overridable mutable fun filter(p: T -> Bool): mutable Iterator<T> {
    for (v in this) if (p(v)) yield v
  }

  overridable mutable fun filterNone<U>[T: ?U](): mutable Iterator<U> {
    for (v in this) {
      v match {
      | Some(x) -> yield x
      | None() -> void
      }
    }
  }

  overridable mutable fun unique[T: Hashable & Equality](): mutable Iterator<
    T,
  > {
    this.collect(Set).iterator()
  }

  // Returns a new iterator representing tuples of the ith elements of
  // this and the other iterator.
  overridable mutable fun zip<U>(
    other: mutable Iterator<U>,
  ): mutable Iterator<(T, U)> {
    mutable ZipIterator(this, other)
  }

  // Returns a new iterator representing the tuples of the ith elements of this
  // and the other iterator.  Unlike zip(), zipLongest() continues until both
  // iterators are exhausted.
  overridable mutable fun zipLongest<U>(
    other: mutable Iterator<U>,
  ): mutable Iterator<(?T, ?U)> {
    loop {
      (this.next(), other.next()) match {
      | (None(), None()) -> break void
      | i @ _ -> yield i
      }
    }
  }

  // Returns a new iterator representing the results of calling the selection
  // function with tuples of the ith elements of this and the other iterator.
  overridable mutable fun zipWith<U, V>(
    other: mutable Iterator<U>,
    f: (T, U) -> V,
  ): mutable Iterator<V> {
    mutable ZipWithIterator(this, other, f)
  }

  // Returns a new iterator representing the elements of this iterator after the
  // nth element.
  overridable mutable fun drop(n: Int): mutable Iterator<T> {
    mutable DropIterator(this, n)
  }

  // Returns a new iterator representing the elements of this iterator after the
  // contiguous prefix for which the predicate returns true.
  overridable mutable fun dropWhile(p: T -> Bool): mutable Iterator<T> {
    dropping = true;
    for (v in this) {
      if (dropping && !p(v)) {
        !dropping = false;
      };
      if (!dropping) {
        yield v
      }
    }
  }

  // Returns a new iterator representing the first n elements of this.
  overridable mutable fun take(n: Int): mutable Iterator<T> {
    mutable TakeIterator(this, n)
  }

  // Returns a new iterator representing the contiguous prefix of elements from this
  // for which the predicate returns true.
  overridable mutable fun takeWhile(p: T -> Bool): mutable Iterator<T> {
    for (v in this) {
      if (!p(v)) {
        break void
      } else {
        yield v
      }
    }
  }

  // # Aggregation
  // Methods that aggregate (or "reduce") the items of an iterator into a single value.

  // Returns Some(x) for the first item in this iterator that matches
  // the predicate, or None() if no items match.
  overridable mutable fun find(p: T -> Bool): ?T {
    loop {
      this.next() match {
      | Some(x) -> if (p(x)) break Some(x)
      | None() -> break None()
      }
    }
  }

  // Returns true if the predicate returns true for all elements of this
  // iterator.
  @synonym("every")
  overridable mutable fun all(p: T -> Bool): Bool {
    for (v in this) {
      if (!p(v)) {
        break false
      }
    } else {
      true
    }
  }

  // Returns true if the predicate returns true for at least one element
  // of this iterator.
  @synonym("some")
  overridable mutable fun any(p: T -> Bool): Bool {
    for (v in this) {
      if (p(v)) {
        break true
      }
    } else {
      false
    }
  }

  // Returns the result of applying an accumulator function to all
  // the elements of this iterator.
  @synonym("aggregate")
  @synonym("fold")
  @synonym("foldl")
  overridable mutable fun reduce<U>(f: (U, T) -> U, init: U): U {
    result = init;
    this.each(x -> !result = f(result, x));
    result
  }

  // Returns an iterator that yields tuples of (index, item), where index
  // is the zero-based index of the item within the stream of values yielded
  // by this iterator.
  overridable mutable fun enumerated(): mutable Iterator<(Int, T)> {
    index = 0;
    for (x in this) {
      yield (index, x);
      !index = index + 1;
    }
  }

  // # Extensions
  // TODO: move to extension classes when .ModuleClass can be extended

  // Calls the given function with the index and value for each item in this
  // iterator. The index is the zero-based index of the value within the
  // sequence of values provided: for iterators over a concrete, indexed
  // collection the index does not necessarily correspond to the index of the
  // value in the original collection.
  overridable mutable fun eachWithIndex(f: (Int, T) -> void): void {
    for (item in this.enumerated()) {
      (index, value) = item;
      f(index, value)
    }
  }

  // Temporary alias to reduce()
  @deprecated("Use reduce() instead")
  overridable mutable fun foldl<U>(f: (U, T) -> U, init: U): U {
    this.reduce(f, init)
  }
}

// See Iterator#drop()
mutable class DropIterator<+T>(
  private base: mutable Iterator<T>,
  private mutable n: Int,
) extends Iterator<T> {
  readonly fun sizeHint(): ?Int {
    this.base.sizeHint().map(sizeHint -> max(0, sizeHint - this.n))
  }

  mutable fun next(): ?T {
    while (this.n > 0) {
      this.!n = this.base.next() match {
      | Some(_) -> this.n - 1
      | None() -> 0
      }
    };
    this.base.next()
  }
}

// See Iterator#take()
mutable class TakeIterator<+T>(
  private base: mutable Iterator<T>,
  private mutable n: Int,
) extends Iterator<T> {
  readonly fun sizeHint(): ?Int {
    this.base.sizeHint().map(sizeHint -> max(0, sizeHint - this.n))
  }

  mutable fun next(): ?T {
    if (this.n > 0) {
      this.!n = this.n - 1;
      v = this.base.next();
      if (v.isNone()) {
        this.!n = 0
      };
      v
    } else {
      None()
    }
  }
}

// See Iterator#map()
mutable class MapIterator<T, +U>(
  private base: mutable Iterator<T>,
  private f: T -> U,
) extends Iterator<U> {
  readonly fun sizeHint(): ?Int {
    this.base.sizeHint()
  }

  mutable fun next(): ?U {
    this.base.next() match {
    | Some(x) -> Some(this.f(x))
    | _ -> None()
    }
  }
}

// See Iterator#zip()
mutable class ZipIterator<+T, +U>(
  private left: mutable Iterator<T>,
  private right: mutable Iterator<U>,
) extends Iterator<(T, U)> {
  readonly fun sizeHint(): ?Int {
    (this.left.sizeHint(), this.right.sizeHint()) match {
    | (Some(left), Some(right)) -> Some(min(left, right))
    | _ -> None()
    }
  }

  mutable fun next(): ?(T, U) {
    (this.left.next(), this.right.next()) match {
    | (Some(x), Some(y)) -> Some(((x, y) : (T, U)))
    | _ -> None()
    }
  }
}

// See Iterator#zipWith()
mutable class ZipWithIterator<T, U, +V>(
  private left: mutable Iterator<T>,
  private right: mutable Iterator<U>,
  private f: (T, U) -> V,
) extends Iterator<V> {
  readonly fun sizeHint(): ?Int {
    (this.left.sizeHint(), this.right.sizeHint()) match {
    | (Some(left), Some(right)) -> Some(min(left, right))
    | _ -> None()
    }
  }

  mutable fun next(): ?V {
    (this.left.next(), this.right.next()) match {
    | (Some(l), Some(r)) -> Some(this.f(l, r))
    | _ -> None()
    }
  }
}

// Base class just to factor out some common code so we only compile it once.
private mutable base class GeneratorBase {
  fun inspect(): Inspect {
    InspectObject("Generator", Array[])
  }
}

// This is a special class that acts a standin for all the generator
// subclasses of Iterator that might be created by the back end. Its
// existence, and the fact that it is private, prevents users from ever
// doing an incorrectly "exhaustive" match on "Iterator".
//
// The native back end also uses this as a template to start from for
// its codegened implementations.
private mutable class Generator<+T>() extends Iterator<T>, GeneratorBase {
  mutable fun next(): ?T {
    None()
  }
}

module end;
