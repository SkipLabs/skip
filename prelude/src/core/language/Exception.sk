/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

base class Exception {
  overridable fun getMessage(): String {
    "Exception " + inspect(this).toString()
  }
}

class OutOfBounds() extends Exception {
  fun getMessage(): String {
    "Out of bounds"
  }
}

class Duplicate() extends Exception {
  fun getMessage(): String {
    "Duplicate element"
  }
}

class KeyNotFound() extends Exception {
  fun getMessage(): String {
    "Key not found"
  }
}

class ContainerChanged() extends Exception {
  fun getMessage(): String {
    "Container changed during iteration"
  }
}

class InvalidCast(tOriginal: String, tExpected: String) extends Exception {
  fun getMessage(): String {
    `Failed to cast object of type ${this.tOriginal} to type ${
      this.tExpected
    } in 'as' expression`
  }
}

// Exlined code to make uncommon case for compiled code smaller.
@no_inline
fun throwOutOfBounds(): _ {
  throw OutOfBounds()
}

@no_inline
fun throwKeyNotFound(): _ {
  throw KeyNotFound()
}

@no_inline
fun throwContainerChanged(): _ {
  throw ContainerChanged()
}

class RuntimeError(msg: String) extends Exception {
  fun getMessage(): String {
    this.msg
  }
}

@cpp_extern("SKIP_getExn")
native fun getExn(): Exception;

@cpp_export("SKIP_call0")
fun call0(f: () -> void): void {
  f()
}

@cpp_runtime
native fun etry<T>(f: () -> void, onError: () -> void): void;

fun vtry<T>(f: () -> T, onError: Exception -> T): T {
  result: ?T = None();
  etry(
    () -> {
      !result = Some(f());
    },
    () -> {
      !result = Some(onError(getExn()));
    },
  );
  result.fromSome()
}

/*****************************************************************************/
/* The definitions for the C runtime errors (thrown from C code). */
/*****************************************************************************/

// We use Int32 to be JS friendly
class CRuntimeError(code: Int32) extends Exception {
  fun getMessage(): String {
    inspect(this).toString()
  }
}

@cpp_export("SKIP_throw_cruntime")
fun throwCRuntime(code: Int32): void {
  throw CRuntimeError(code);
}
