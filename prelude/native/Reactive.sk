/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Reactive;

@cpp_extern("SKIP_set_context")
native fun setContext(mutable SKFS.Context): void;

@cpp_extern("SKIP_get_context")
native fun getContext(): mutable SKFS.Context;

class Table(parentName: SKFS.DirName, dirName: SKFS.DirName) {
  static fun create(name: String): this {
    dirName = SKFS.DirName::create(name);
    parentName = SKFS.DirName::create("/parent" + name);
    static(parentName, dirName)
  }

  private fun getDir(): SKFS.EagerDir {
    context = getContext();
    context.maybeGetEagerDir(this.dirName) match {
    | None() ->
      _ = context.mkdir(
        SKFS.StringFile::fromFile,
        this.dirName,
        false,
        Array[],
      );
      setContext(context);
      context.unsafeGetEagerDir(this.dirName)
    | Some(dir) -> dir
    }
  }

  fun get(key: String): Array<String> {
    dir = this.getDir();
    arr = dir.getArrayRaw(SKFS.SID(key));
    arr.map(x -> SKFS.StringFile::fromFile(x).value);
  }

  fun set(source: String, key: String, values: Array<String>): void {
    context = getContext();
    dir = this.getDir();
    !dir = dir.writeEntry(
      context,
      SKFS.Path::create(this.parentName, SKFS.SID(source)),
      SKFS.SID(key),
      values.map(x -> SKFS.StringFile(x)),
    );
    context.setDir(dir.dirName, dir);
    setContext(context);
  }
}

class GTable(parentName: SKFS.DirName, dirName: SKFS.DirName) {
  static fun create(name: String): this {
    dirName = SKFS.DirName::create(name);
    parentName = SKFS.DirName::create("/parent" + name);
    static(parentName, dirName)
  }

  private fun getDir(): SKFS.EagerDir {
    context = getContext();
    context.maybeGetEagerDir(this.dirName) match {
    | None() ->
      _ = context.mkdir(
        SKFS.StringFile::fromFile,
        this.dirName,
        false,
        Array[],
      );
      setContext(context);
      context.unsafeGetEagerDir(this.dirName)
    | Some(dir) -> dir
    }
  }

  fun get(key: SKFS.BaseName): Array<SKFS.File> {
    dir = this.getDir();
    arr = dir.getArrayRaw(key);
    arr;
  }

  fun set(source: String, key: SKFS.BaseName, values: Array<SKFS.File>): void {
    context = getContext();
    dir = this.getDir();
    !dir = dir.writeEntry(
      context,
      SKFS.Path::create(this.parentName, SKFS.SID(source)),
      key,
      values,
    );
    context.setDir(dir.dirName, dir);
    setContext(context);
  }
}

module end;
