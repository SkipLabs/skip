module alias T = SKTest;

module SKDateTests;

class TimeTest(hours: Int, minutes: Int, seconds: Int, milliseconds: Int) {
  fun run(time: SKDate.Time): void {
    T.expectEq(
      (
        time.getHours(),
        time.getMinutes(),
        time.getSeconds(),
        time.getMilliseconds(),
      ),
      (this.hours, this.minutes, this.seconds, this.milliseconds),
    )
  }
}

class WeekTest(week: Int) {
  fun run(date: SKDate.Date): void {
    T.expectEq(date.getWeekNumber(), this.week)
  }
}

class CalendarTest(
  year: Int,
  month: SKDate.Month,
  dayOfMonth: Int,
  hours: Int,
  minutes: Int,
  seconds: Int,
  milliseconds: Int,
) {
  fun run(calendar: SKDate.Calendar): void {
    T.expectEq(
      (
        calendar.date.getYear(),
        calendar.date.getMonth(),
        calendar.date.getDayOfMonth(),
        calendar.time.getHours(),
        calendar.time.getMinutes(),
        calendar.time.getSeconds(),
        calendar.time.getMilliseconds(),
      ),
      (
        this.year,
        this.month,
        this.dayOfMonth,
        this.hours,
        this.minutes,
        this.seconds,
        this.milliseconds,
      ),
    )
  }
}

class WeekDateTest(week: SKDate.WeekDate) {
  fun run(date: SKDate.Date): void {
    T.expectEq(date.getWeekDate(), this.week)
  }
}

@test
fun date1(): void {
  date = SKDate.Date::create(2018, 11, 6);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.November(), 6),
  )
}

@test
fun date2(): void {
  date = SKDate.Date::create(2018, 11, 6).addDays(1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.November(), 7),
  )
}

@test
fun date3(): void {
  date = SKDate.Date::create(2018, 11, 7).addDays(-1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.November(), 6),
  )
}

@test
fun date4(): void {
  date = SKDate.Date::create(2018, 11, 6).addDays(-1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.November(), 5),
  )
}

@test
fun date5(): void {
  date = SKDate.Date::create(2018, 11, 5).addDays(31);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.December(), 6),
  )
}

@test
fun date6(): void {
  date = SKDate.Date::create(2018, 12, 6).addDays(-31);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.November(), 5),
  )
}

@test
fun date7(): void {
  date = SKDate.Date::create(2018, 11, 5).addDays(-31);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.October(), 5),
  )
}

@test
fun date8(): void {
  date = SKDate.Date::create(2018, 10, 5).addDays(-1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.October(), 4),
  )
}

@test
fun date9(): void {
  date = SKDate.Date::create(2018, 10, 4).addDays(-1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.October(), 3),
  )
}

@test
fun date10(): void {
  date = SKDate.Date::create(2018, 10, 3).addDays(-1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.October(), 2),
  )
}

@test
fun date11(): void {
  date = SKDate.Date::create(2018, 10, 2).addDays(-1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.October(), 1),
  )
}

@test
fun date12(): void {
  date = SKDate.Date::create(2018, 10, 1).addDays(-1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.September(), 30),
  )
}

@test
fun date13(): void {
  date = SKDate.Date::create(2018, 9, 30).addDays(-1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.September(), 29),
  )
}

@test
fun date14(): void {
  date = SKDate.Date::create(2018, 9, 29).addMonths(1);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.October(), 29),
  )
}

@test
fun date15(): void {
  date = SKDate.Date::create(2018, 9, 29).addMonths(4);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2019, SKDate.January(), 29),
  )
}

@test
fun date16(): void {
  date = SKDate.Date::create(2019, 1, 29).addMonths(-4);
  T.expectEq(
    (date.getYear(), date.getMonth(), date.getDayOfMonth()),
    (2018, SKDate.September(), 29),
  )
}

@test
fun time1(): void {
  TimeTest(6, 20, 30, 500).run(SKDate.Time::create(6, 20, 30, 500))
}

@test
fun time2(): void {
  TimeTest(6, 20, 31, 0).run(
    SKDate.Time::create(6, 20, 30, 500).addMilliseconds(500),
  )
}

@test
fun time3(): void {
  TimeTest(6, 20, 36, 0).run(SKDate.Time::create(6, 20, 31, 0).addSeconds(5))
}

@test
fun time4(): void {
  TimeTest(6, 20, 29, 0).run(SKDate.Time::create(6, 20, 36, 0).addSeconds(-7))
}

@test
fun time5(): void {
  TimeTest(6, 19, 59, 0).run(SKDate.Time::create(6, 20, 29, 0).addSeconds(-30))
}

@test
fun time6(): void {
  TimeTest(6, 20, 59, 0).run(SKDate.Time::create(6, 19, 59, 0).addMinutes(1))
}

@test
fun time7(): void {
  TimeTest(7, 20, 59, 0).run(SKDate.Time::create(6, 20, 59, 0).addMinutes(60))
}

@test
fun time8(): void {
  TimeTest(6, 20, 59, 0).run(SKDate.Time::create(7, 20, 59, 0).addMinutes(-60))
}

@test
fun time9(): void {
  TimeTest(6, 21, 1, 0).run(
    SKDate.Time::create(6, 20, 59, 0).addMilliseconds(2000),
  )
}

fun testWeek(idx: Int): void {
  (week, phase, date) = if (idx <= 102) {
    i = (idx / 2);
    (i + 1, idx % 2, SKDate.Date::create(2018, 1, 1).addDays(i * 7))
  } else if (idx <= 106) {
    i = (idx - 102) / 2;
    (i + 1, idx % 2, SKDate.Date::create(2018, 12, 31).addDays(i * 7))
  } else {
    index = idx - 106;
    index match {
    | 0 -> (50, 0, SKDate.Date::create(2016, 12, 18))
    | 1 -> (51, 0, SKDate.Date::create(2016, 12, 19))
    | 2 -> (51, 0, SKDate.Date::create(2016, 12, 25))
    | 3 -> (52, 0, SKDate.Date::create(2016, 12, 26))
    | _ -> (52, 0, SKDate.Date::create(2017, 1, 1))
    }
  };
  if (phase == 0) {
    WeekTest(week).run(date);
  } else {
    WeekTest(week).run(date.addDays(6));
  }
}

@test
fun weeks(): void {
  for (idx in Range(0, 111)) {
    testWeek(idx)
  }
}

@test
fun weekDate1(): void {
  WeekDateTest(SKDate.WeekDate(2004, 53, SKDate.Saturday())).run(
    SKDate.Date::create(2005, 1, 1),
  )
}

@test
fun weekDate2(): void {
  WeekDateTest(SKDate.WeekDate(2004, 53, SKDate.Sunday())).run(
    SKDate.Date::create(2005, 1, 2),
  )
}

@test
fun weekDate3(): void {
  WeekDateTest(SKDate.WeekDate(2005, 52, SKDate.Saturday())).run(
    SKDate.Date::create(2005, 12, 31),
  )
}

@test
fun weekDate4(): void {
  WeekDateTest(SKDate.WeekDate(2005, 52, SKDate.Sunday())).run(
    SKDate.Date::create(2006, 1, 1),
  )
}

@test
fun epoch1(): void {
  CalendarTest(2018, SKDate.November(), 11, 12, 34, 13, 543).run(
    SKDate.Calendar::epoch(1541939653543, SKDate.utc),
  )
}

@test
fun epoch2(): void {
  T.expectEq(SKDate.Calendar::epoch(1541939653543).toEpoch(), 1541939653543)
}

@test
fun epoch3(): void {
  T.expectEq(
    SKDate.Calendar::create(
      SKDate.Date::create(2001, 10, 28),
      SKDate.Time::create(),
      SKDate.utc,
    ).toEpoch(),
    1004227200000,
  )
}

@test
fun epoch4(): void {
  date = SKDate.Calendar::create(
    SKDate.Date::create(1995, 1, 1),
    SKDate.Time::create(),
    SKDate.TZ(SKDate.TimeZone::create(false, 1)),
  );
  got = date.toEpoch();
  expect = 788914800000;
  debug(("epoch4", date, got, expect, expect - got));
  T.expectEq(got, expect)
}

@test
fun epoch5(): void {
  date = SKDate.Calendar::create(
    SKDate.Date::create(1995, 1, 2),
    SKDate.Time::create(),
    SKDate.TZ(SKDate.TimeZone::create(false, 1)),
  );
  got = date.toEpoch();
  expect = 789001200000;
  debug(("epoch4", date, got, expect, expect - got));
  T.expectEq(got, expect)
}

@test
fun days(): void {
  day: ?SKDate.Date = None();
  p: ?SKDate.Date = None();
  epoch = epoch_1900_01_01;
  for (ydays in validDays) {
    dn = 1;
    for (strd in ydays) {
      d = SKDate.parseFullDate(strd).fromSome() as SKDate.Date _;
      day.each(c -> {
        if (c != d) {
          debug(("days", p, c, strd, d));
        };
        T.expectEq(c, d);
      });
      !p = day;
      !day = Some(d.addDays(1));
      yd = d.getDayOfYear();
      if (yd != dn) {
        debug(("DayOfYear", d, yd, dn));
      };
      T.expectEq(yd, dn);
      utcDate = d.toCalendar().withTimeZone(SKDate.utc);
      dEpoch = utcDate.toEpoch();
      if (dEpoch != epoch) {
        debug(("Epoch", d, dEpoch, epoch));
      };
      T.expectEq(dEpoch, epoch);
      !epoch = epoch + 3600000 * 24;
      !dn = dn + 1;
    };
  }
}

@test
fun daysAtTime(): void {
  for (strt in Array["23:00", "23:30", "00:00", "00:30", "01:00"]) {
    p: ?SKDate.Calendar = None();
    day: ?SKDate.Calendar = None();
    validDays.each(ydays ->
      ydays.each(strd -> {
        d = SKDate.parseFullDate(
          strd + " " + strt,
        ).fromSome() as SKDate.Calendar _;
        day.each(c -> {
          if (c.date != d.date || c.time != d.time) {
            debug(("days", p, c, strd, d));
          };
          T.expectEq((c.date, c.time), (d.date, d.time));
        });
        !p = day;
        !day = Some(d.addDays(1));
      })
    )
  }
}

/*
TODO add extern call test

@test
fun timezone(): void {
  date = SKDate.Date::create(2023, 9, 22);
  got = SKDate.TZLocal().toTimeZone(date);
  expect = SKDate.TimeZone::create(false, 2);
  if (got != expect) {
    debug(("Timezone", got, expect));
  };
  T.expectEq(got, expect)
}

@test
fun timezone2(): void {
  date = SKDate.Date::create(1985, 1, 1);
  got = SKDate.TZLocal().toTimeZone(date);
  expect = SKDate.TimeZone::create(false, 1);
  if (got != expect) {
    debug(("Timezone", got, expect));
  };
  T.expectEq(got, expect)
}

@test
fun timezone3(): void {
  date = SKDate.Date::create(2021, 1, 27);
  got = SKDate.TZLocal().toTimeZone(date);
  expect = SKDate.TimeZone::create(false, 1);
  if (got != expect) {
    debug(("Timezone", got, expect));
  };
  T.expectEq(got, expect)
}

@test
fun timezone4(): void {
  date = SKDate.Date::create(1963, 12, 31);
  got = SKDate.TZLocal().toTimeZone(date);
  expect = SKDate.TimeZone::create(false, 1);
  if (got != expect) {
    debug(("Timezone", got, expect));
  };
  T.expectEq(got, expect)
}

@test
fun timezone5(): void {
  date = SKDate.Date::create(1911, 3, 11);
  got = SKDate.TZLocal().toTimeZone(date);
  expect = SKDate.TimeZone::create(false, 0);
  if (got != expect) {
    debug(("Timezone", got, expect));
  };
  T.expectEq(got, expect)
}

@test
fun timezone6(): void {
  date = SKDate.Date::create(1911, 3, 10);
  got = SKDate.TZLocal().toTimeZone(date);
  expect = SKDate.TimeZone::create(false, 0, 9, 21);
  if (got != expect) {
    debug(("Timezone", got, expect));
  };
  T.expectEq(got, expect)
}

@test
fun timezone7(): void {
  date = SKDate.Date::create(1995, 1, 1);
  got = SKDate.TZLocal().toTimeZone(date);
  expect = SKDate.TimeZone::create(false, 1, 0, 0);
  if (got != expect) {
    debug(("Timezone", got, expect));
  };
  T.expectEq(got, expect)
}*/

@test
fun add_seconds(): void {
  date = SKDate.Calendar::current();
  got = date.addSeconds(3600);
  expect = date.addHours(1);
  if (got != expect) {
    debug(("Add seconds", date, got, expect));
  };
  T.expectEq(got, expect)
}

@test
fun minus_seconds(): void {
  date = SKDate.Calendar::current();
  got = date.addSeconds(-7200);
  expect = date.addHours(-2);
  if (got != expect) {
    debug(("Minus seconds", date, got, expect));
  };
  T.expectEq(got, expect)
}

@test
fun minus_seconds2(): void {
  date = SKDate.Calendar::current();
  got = date.addSeconds(-86400);
  expect = date.addDays(-1);
  if (got != expect) {
    debug(("Minus seconds", date, got, expect));
  };
  T.expectEq(got, expect)
}

module end;
