module alias T = SKTest;

module SKDateTests;

@test
fun parse1(): void {
  got = SKDate.parseFullDate("2023-09-19");
  expected = SKDate.Date::create(2023, 9, 19);
  debug((got, expected));
  T.expectEq(got, Some(expected))
}

@test
fun parse2(): void {
  got = SKDate.parseFullDate("2023-09-19 18:02");
  expected = SKDate.Calendar::create(
    SKDate.Date::create(2023, 9, 19),
    SKDate.Time::create(18, 2),
    SKDate.TZLocal(),
  );
  debug((got, expected));
  T.expectEq(got, Some(expected))
}

@test
fun parse3(): void {
  got = SKDate.parseFullDate("2023-09-19 18:02:00+100");
  expected = SKDate.Calendar::create(
    SKDate.Date::create(2023, 9, 19),
    SKDate.Time::create(18, 2),
    SKDate.TZ(SKDate.TimeZone::create(false, 1)),
  );
  debug((got, expected));
  T.expectEq(got, Some(expected))
}

@test
fun parse4(): void {
  got = SKDate.parseFullDate("18:30:25.896");
  expected = SKDate.Time::create(18, 30, 25, 896);
  debug((got, expected));
  T.expectEq(got, Some(expected))
}

@test
fun parse5(): void {
  got = SKDate.parseTimeZone("+9");
  expected = SKDate.TimeZone::create(false, 9);
  debug((got, expected));
  T.expectEq(got, Some(expected))
}

@test
fun parse6(): void {
  got = SKDate.parseTimeZone("+09");
  expected = SKDate.TimeZone::create(false, 9);
  debug((got, expected));
  T.expectEq(got, Some(expected))
}

@test
fun parse7(): void {
  got = SKDate.parseTimeZone("+0930");
  expected = SKDate.TimeZone::create(false, 9, 30);
  debug((got, expected));
  T.expectEq(got, Some(expected))
}

@test
fun parse8(): void {
  got = SKDate.parseFullDate("1995-01-01 00:00:00", SKDate.utc);
  expected = SKDate.Calendar::create(
    SKDate.Date::create(1995, 01, 01),
    SKDate.Time::create(0, 0),
    SKDate.utc,
  );
  debug((got, expected));
  T.expectEq(got, Some(expected))
}

module end;
