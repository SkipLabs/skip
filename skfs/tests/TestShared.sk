module SKFSTest;

base class Ptr(id: Int) uses Equality, Hashable {
  fun getId(): Int {
    this.id
  }
}

class X0(Int, Int) extends Ptr
value class VX0(Int, Int) uses Equality, Hashable

class X1(Int, Ptr) extends Ptr
value class VX1(Int, Ptr) uses Equality, Hashable

class X2(Ptr, Int) extends Ptr
class VX2(Ptr, Int) uses Equality, Hashable

class X3(Ptr, Ptr) extends Ptr
class VX3(Ptr, Ptr) uses Equality, Hashable

fun makePtr(id: () -> Int, n: Int): Ptr {
  (n % 4) match {
  | 0 -> X0(1, 2, id())
  | 1 -> X1(1, makePtr(id, n.shr(2)), id())
  | 2 -> X2(makePtr(id, n.shr(2)), 1, id())
  //  | 3 -> X3(makePtr(id, n.shr(2)), makePtr(id, n.shr(2)), id())
  | _ -> invariant_violation("Internal error")
  }
}

class Y1(VX0, VX1) extends Ptr
class Y2(VX1, VX2) extends Ptr
class Y3(VX2, VX3) extends Ptr

mutable class M(mutable x: Int, y: Int) {
  fun swap(): this {
    M(this.y, this.x)
  }
}

@cpp_extern("SKIP_is_marked")
native fun is_marked<T: frozen>(T): Bool;

const foo: Map<Int, Int> = Map[1 => 1, 3 => 3];
const foo2: X0 = X0(1, 1, 3);

fun testShared(): void {
  debug(is_marked(foo));
  debug(is_marked(foo2));
  /*  x0 = X0(1, 2, 3);
    x1 = X1(1, x0, 4);
    m1: Ptr = foo(x0);
    m2: Ptr = foo(x1);
    debug(Array[m1, m2].map(x -> x.getId()));
    debug(foo(Array[m1, m2, m2]));
  */
  myString = "test my glo";
  debug(myString.hash());
  //  debug(foo(Array[myString, myString, "b", "c"]));
  //  y = 223;
  //  debug(foo(x ~> x + y)(24))
}
