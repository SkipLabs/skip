module alias T = SKTest;

module SKStoreTest;

fun testMap(): mutable SKStore.Context {
  data = Array[
    (SKStore.IID(1), SKStore.IntFile(1)),
    (SKStore.IID(2), SKStore.IntFile(2)),
  ];
  SKStore.run(context ~> {
    dir1 = context.mkdir(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      SKStore.DirName::create("/dir1/"),
      data,
    );
    dir2 = dir1.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/dir2/"),
      (_context, writer, _, v) ~> writer.set(SKStore.IID(0), v.first),
    );
    _dir3 = dir2.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/dir3/"),
      (_context, writer, _key, values) ~> {
        writer.set(SKStore.IID(1), values.first)
      },
    );
  });
}

fun testMap2(): mutable SKStore.Context {
  dataStr1 = Array[
    (SKStore.IID(1), SKStore.StringFile("1")),
    (SKStore.IID(2), SKStore.StringFile("2")),
  ];
  dataStr2 = Array[
    (SKStore.IID(1), SKStore.StringFile("3")),
    (SKStore.IID(2), SKStore.StringFile("4")),
  ];
  SKStore.run(context ~> {
    dirStr1 = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      SKStore.DirName::create("/dirStr1/"),
      dataStr1,
    );
    dirStr2 = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      SKStore.DirName::create("/dirStr2/"),
      dataStr2,
    );
    dir1 = dirStr1.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/dir1/"),
      ((_context, writer, key, values) ~>
        writer.set(key, SKStore.IntFile(values.first.value.toInt()))),
    );
    dir2 = dirStr2.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/dir2/"),
      ((_, writer, key, values) ~>
        writer.set(key, SKStore.IntFile(values.first.value.toInt()))),
    );
    _dir3 = dir1.map(
      SKStore.IID::keyType,
      SKStore.IntFile::type,
      context,
      SKStore.DirName::create("/dir3/"),
      (context, writer, key, values) ~> {
        dirName = SKStore.DirName::create("/dir3/" + key + "/");
        _ = dir2.map(
          SKStore.IID::keyType,
          SKStore.IntFile::type,
          context,
          dirName,
          (_, writer, key, values) ~>
            writer.setArray(key, values.collect(Array))
          ,
        );
        writer.set(key, values.first);
      },
    );
  });
}

@test
fun testMultiMap(): void {
  dirName1 = SKStore.DirName::create("/sinput1/");
  dirName2 = SKStore.DirName::create("/sinput2/");
  dirNameResult = SKStore.DirName::create("/result/");
  context = SKStore.run(context ~> {
    dir1 = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      dirName1,
      Array[
        (SKStore.IID(0), SKStore.StringFile("0")),
        (SKStore.IID(1), SKStore.StringFile("0")),
      ],
    );
    dir2 = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      dirName2,
      Array[
        (SKStore.IID(0), SKStore.StringFile("1")),
        (SKStore.IID(1), SKStore.StringFile("1")),
      ],
    );
    _res = SKStore.EHandle::multiMap(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      context,
      Array[
        (
          dir1,
          (
            (_ctx, writer, key, values) ~>
              writer.set(
                key,
                SKStore.StringFile("0" + values.first.value.toString()),
              ),
            None(),
          ),
        ),
        (
          dir2,
          (
            (_ctx, writer, key, values) ~>
              writer.set(
                key,
                SKStore.StringFile("1" + values.first.value.toString()),
              ),
            None(),
          ),
        ),
      ],
      dirNameResult,
    );
  });

  tick = context.tick;
  context.update();
  (_, changedKeys) = context
    .unsafeGetEagerDir(dirNameResult)
    .getChangesAfter(tick);
  T.expectEq(
    Array<SKStore.Key>[SKStore.IID(0), SKStore.IID(1)],
    changedKeys.collect(Array).sorted(),
    "Test multiMap 0",
  );
  T.expectEq(
    getData(context, dirNameResult, SKStore.IID(0))
      .map(x -> SKStore.StringFile::type(x).value)
      .sorted(),
    Array["00", "11"],
  );
  !tick = context.tick;
  write(context, dirName1, SKStore.IID(0), Array[]);
  write(context, dirName2, SKStore.IID(1), Array[SKStore.StringFile("22")]);
  context.update();
  (_, !changedKeys) = context
    .unsafeGetEagerDir(dirNameResult)
    .getChangesAfter(tick);
  T.expectEq(
    Array<SKStore.Key>[SKStore.IID(0), SKStore.IID(1)],
    changedKeys.collect(Array).sorted(),
    "Test multiMap 1",
  );
  T.expectEq(
    getData(context, dirNameResult, SKStore.IID(0)),
    Array[SKStore.StringFile("11")],
  );
  T.expectEq(
    getData(context, dirNameResult, SKStore.IID(1))
      .map(x -> SKStore.StringFile::type(x).value)
      .sorted(),
    Array["00", "122"],
  );
}

@test
fun testMultiMapSameParent(): void {
  dirName1 = SKStore.DirName::create("/sinput1/");
  dirNameResult = SKStore.DirName::create("/result/");
  context = SKStore.run(context ~> {
    dir1 = context.mkdir(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      dirName1,
      Array[
        (SKStore.IID(0), SKStore.StringFile("0")),
        (SKStore.IID(1), SKStore.StringFile("1")),
      ],
    );
    _res = SKStore.EHandle::multiMap(
      SKStore.IID::keyType,
      SKStore.StringFile::type,
      context,
      Array[
        (
          dir1,
          (
            (_ctx, writer, key, values) ~> {
              writer.set(
                key,
                SKStore.StringFile("0" + values.first.value.toString()),
              )
            },
            None(),
          ),
        ),
        (
          dir1,
          (
            (_ctx, writer, key, values) ~> {
              writer.set(
                key,
                SKStore.StringFile("1" + values.first.value.toString()),
              )
            },
            None(),
          ),
        ),
      ],
      dirNameResult,
    );
  });

  tick = context.tick;
  context.update();
  (_, changedKeys) = context
    .unsafeGetEagerDir(dirNameResult)
    .getChangesAfter(tick);
  T.expectEq(
    Array<SKStore.Key>[SKStore.IID(0), SKStore.IID(1)],
    changedKeys.collect(Array).sorted(),
    "Test multiMap 0",
  );
  T.expectEq(
    getData(context, dirNameResult, SKStore.IID(0))
      .map(x -> SKStore.StringFile::type(x).value)
      .sorted(),
    Array["00", "10"],
  );
  T.expectEq(
    getData(context, dirNameResult, SKStore.IID(1))
      .map(x -> SKStore.StringFile::type(x).value)
      .sorted(),
    Array["01", "11"],
  );

  !tick = context.tick;
  write(context, dirName1, SKStore.IID(0), Array[]);
  write(context, dirName1, SKStore.IID(1), Array[SKStore.StringFile("2")]);
  context.update();
  (_, !changedKeys) = context
    .unsafeGetEagerDir(dirNameResult)
    .getChangesAfter(tick);
  T.expectEq(
    Array<SKStore.Key>[SKStore.IID(0), SKStore.IID(1)],
    changedKeys.collect(Array).sorted(),
    "Test multiMap 1",
  );
  T.expectEq(getData(context, dirNameResult, SKStore.IID(0)), Array[]);
  T.expectEq(
    getData(context, dirNameResult, SKStore.IID(1))
      .map(x -> SKStore.StringFile::type(x).value)
      .sorted(),
    Array["02", "12"],
  );
}

module end;
