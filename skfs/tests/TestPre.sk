module SKFSTest;

fun testPre(): mutable SKFS.Context {
  context = SKFS.run(context ~> {
    dirSInput1 = context.mkdir(
      SKFS.StringFile::fromFile,
      SKFS.DirName::create("/sinput/"),
      false,
      Array[
        (SKFS.IID(0), SKFS.StringFile("23")),
        (SKFS.IID(1), SKFS.StringFile("35")),
      ],
    );

    _dirSInput2 = context.mkdir(
      SKFS.StringFile::fromFile,
      SKFS.DirName::create("/sinput2/"),
      false,
      Array[
        (SKFS.IID(0), SKFS.StringFile("44")),
        (SKFS.IID(1), SKFS.StringFile("45")),
      ],
    );

    dirInput = dirSInput1.map(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/input/"),
      x ~> SKFS.IntFile(x.value.toInt()),
    );
    _dir = dirInput.contextWriterKeyMap(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/diff/"),
      (context, writer, key, valueFile) ~> {
        preOpt = dirInput.pre(context);
        preOpt match {
        | None() -> writer.write(key, SKFS.IntFile(0))
        | Some(pre) ->
          pre.maybeGet(context, key) match {
          | None() -> writer.write(key, SKFS.IntFile(0))
          | Some(old) ->
            diff = valueFile.value - old.value;
            writer.write(key, SKFS.IntFile(diff))
          }
        }
      },
    );
  });

  /***************************************************************************/
  // STARTING TESTS

  dirSInput1 = SKFS.DirName::create("/sinput/");
  dirInput = SKFS.DirName::create("/input/");
  dirInputEHandle = SKFS.EHandle(SKFS.IntFile::fromFile, dirInput);

  write(context, dirSInput1, SKFS.IID(3), Array[SKFS.StringFile("3")]);
  context.update();
  write(context, dirSInput1, SKFS.IID(4), Array[SKFS.StringFile("4")]);
  context.update();
  expectEq("Test pre 1", Array<SKFS.File>[SKFS.IntFile(3)], () ->
    getData(
      context,
      dirInputEHandle.pre(context).fromSome().dirName,
      SKFS.IID(3),
    )
  );
  write(context, dirSInput1, SKFS.IID(3), Array[]);
  context.update();
  expectEq("Test pre 2", Array<SKFS.File>[SKFS.IntFile(4)], () ->
    getData(
      context,
      dirInputEHandle.pre(context).fromSome().dirName,
      SKFS.IID(4),
    )
  );
  write(context, dirSInput1, SKFS.IID(4), Array[]);
  context.update();
  expectEq("Test pre 3", Array<SKFS.File>[], () ->
    getData(
      context,
      dirInputEHandle.pre(context).fromSome().dirName,
      SKFS.IID(3),
    )
  );

  context
}
