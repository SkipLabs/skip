module alias T = SKTest;

module SKStoreTest;

@test
fun testKsuid(): void {
  // check each single bit of the timestamp individually
  i = 31;
  while (i >= 0) {
    n = 1.shl(i);
    id1 = Ksuid::create_raw(UInt32::truncate(n), 0, 0);
    // check timestamp decodes to expected value
    T.expectEq(id1.timestamp(), n + 1400000000, "");
    T.expectEq(id1.payload(), (0, 0));
    // check that toString and fromString are inverses
    str1 = id1.toString();
    id2 = Ksuid::fromString(str1);
    str2 = id2.toString();
    // debug(n.toStringBinary() + "   " + str1);
    T.expectEq(id1, id2, "");
    T.expectEq(str1, str2, "");
    !i = i - 1;
  };
  // check each single bit of the high half of the payload individually
  !i = 63;
  while (i >= 0) {
    n = 1.shl(i);
    id1 = Ksuid::create_raw(UInt32::truncate(0), n, 0);
    T.expectEq(id1.timestamp(), 1400000000, "");
    // check that payload decodes to expected value
    T.expectEq(id1.payload(), (n, 0), "");
    // check that toString and fromString are inverses
    str1 = id1.toString();
    id2 = Ksuid::fromString(str1);
    str2 = id2.toString();
    // debug(n.toStringBinary() + "   " + str1);
    T.expectEq(id1, id2, "");
    T.expectEq(str1, str2, "");
    !i = i - 1;
  };
  // check each single bit of the low half of the payload individually
  !i = 63;
  while (i >= 0) {
    n = 1.shl(i);
    id1 = Ksuid::create_raw(UInt32::truncate(0), 0, n);
    T.expectEq(id1.timestamp(), 1400000000, "");
    // check that payload decodes to expected value
    T.expectEq(id1.payload(), (0, n));
    // check that toString and fromString are inverses
    str1 = id1.toString();
    id2 = Ksuid::fromString(str1);
    str2 = id2.toString();
    // debug(n.toStringBinary() + "   " + str1);
    T.expectEq(id1, id2, "");
    T.expectEq(str1, str2, "");
    !i = i - 1;
  };

  // check that order is monotone in the timestamp
  id0 = Ksuid::create();
  ts = id0.timestamp() - 1400000000;
  (hi, lo) = id0.payload();
  id1 = Ksuid::create_raw(UInt32::truncate(ts + 1), hi, lo);
  T.expectTrue(id0 < id1, "");

  // check that the bijection between sextets and chars is as expected
  sextet_chars = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"
    .getIter()
    .collect(Array);
  for (sextet1 in Range(0, 64)) {
    char = Ksuid::sextet_to_char(sextet1);
    T.expectEq(char, sextet_chars[sextet1]);
    sextet2 = Ksuid::char_to_sextet(char);
    T.expectEq(sextet2, sextet1);
  };

  // check that the injection from sextets to chars preserves order
  for (j in Range(0, 63)) {
    T.expectTrue(sextet_chars[j] < sextet_chars[j + 1]);
  };

  // check that short strings round-trip
  root_id0 = Ksuid::fromString("root");
  root_str0 = root_id0.toString();
  root_id1 = Ksuid::fromString(root_str0);
  root_str1 = root_id1.toString();
  T.expectEq(root_id0, root_id1);
  T.expectEq(root_str0, root_str1);
  // check that trailing '-' chars are trimmed
  root___id0 = Ksuid::fromString("root--");
  root___str0 = root___id0.toString();
  root___id1 = Ksuid::fromString(root___str0);
  root___str1 = root___id1.toString();
  T.expectEq(root___id0, root___id1);
  T.expectEq(root___str0, root___str1);
}

module end;
