module SKStoreTest;

@test
fun testRangeMap(): void {
  /*
    data = mutable Vector[];
    rand = Random::mcreate(23);
    intSize = 100000;
    for (i in Range(0, 100000)) {
      start = rand.random(0, intSize);
      end = start + rand.random(0, 1000000);
      data.push((start, end, i));
    };

    rmap = RangeMapList[];
    for (elt in data) {
      (start, end, value) = elt;
      !rmap = rmap.add(start, end, value);
    };
    rmap.rmaps.each((slot, rmap) -> {
      print_string("SLOT: " + slot);
      rmap.values().each(x -> {
        print_raw(`[${x.i0}, ${x.i1}]\n`);
      });
      print_string("")
    });
    for (i in Range(0, intSize * 2)) {
      set = SortedSet[];
      for (elt in data) {
        (start, end, value) = elt;
        if (i >= start && i <= end) {
          !set = set.set(value);
        }
      };
      rset = rmap.get(i);
      for (elt in set) {
        if (rset.contains(elt)) continue;
        debug(
          rmap.values().filter(x -> x.i0.i0 <= 8 && 8 <= x.i0.i1).collect(Array),
        );
        invariant_violation("ERROR: " + elt + " missing1 " + i);
      };
      for (elt in rset) {
        if (set.contains(elt)) continue;
        debug(
          rmap.values().filter(x -> x.i0.i0 <= i && i <= x.i0.i1).collect(Array),
        );
        invariant_violation("ERROR: " + elt + " missing2 " + i);
      };
    }
  */
  void
}

module end;
