/*****************************************************************************/
/* Stress testing changes after. */
/*****************************************************************************/

module alias T = SKTest;

module SKFSTest;

@test
fun testChangesAfter(): void {
  dirName = SKFS.DirName::create("/sinput/");
  context = SKFS.run(context ~> {
    _ = context.mkdir(
      SKFS.StringFile::fromFile,
      dirName,
      Array[
        (SKFS.IID(0), SKFS.StringFile("0")),
        (SKFS.IID(1), SKFS.StringFile("0")),
      ],
    );
  });
  tick = context.tick;
  context.update();
  (isReset, changedKeys) = context
    .unsafeGetEagerDir(dirName)
    .getChangesAfter(tick);
  invariant(!isReset);
  T.expectEq(
    Array<SKFS.BaseName>[SKFS.IID(0), SKFS.IID(1)],
    changedKeys.collect(Array).sorted(),
    "Test getChangesAfter 0",
  );
  !tick = context.tick;
  write(context, dirName, SKFS.IID(1), Array[]);
  write(context, dirName, SKFS.IID(2), Array[SKFS.StringFile("22")]);
  context.update();
  (!isReset, !changedKeys) = context
    .unsafeGetEagerDir(dirName)
    .getChangesAfter(tick);
  invariant(!isReset);
  T.expectEq(
    Array<SKFS.BaseName>[SKFS.IID(1), SKFS.IID(2)],
    changedKeys.collect(Array).sorted(),
    "Test getChangesAfter 1",
  );

  for (i in Range(0, 1000)) {
    write(context, dirName, SKFS.IID(i), Array[SKFS.StringFile("23")]);
  };
  context.update();

  rand = Random::mcreate(23);
  for (i in Range(0, 100)) {
    !tick = context.tick;
    changes = SortedSet<SKFS.BaseName>[];
    for (_ in Range(0, rand.random(0, 100))) {
      dir = context.unsafeGetEagerDir(dirName);
      key = SKFS.IID(rand.random(0, 1000));
      current = dir.getArrayRaw(key);
      value = Array[SKFS.StringFile(rand.random(44, 48).toString())];
      if (native_eq(current, value) != 0) {
        !changes = changes.set(key);
      };
      write(context, dirName, key, value);
    };
    context.update();

    dir = context.unsafeGetEagerDir(dirName);
    if (rand.random(0, 10) > 5) !dir = dir.purge(context);
    (!isReset, !changedKeys) = context
      .unsafeGetEagerDir(dirName)
      .getChangesAfter(tick);
    invariant(!isReset);

    T.expectEq(
      changes.collect(Array).sorted(),
      changedKeys.collect(Array).sorted(),
      "Test getChangesAfter " + (2 + i),
    );
  }
}
