module SKStoreTest;

class MyEx(value: Int) extends Exception

fun makeExn(): Int {
  throw MyEx(22);
}

@cpp_extern("SKIP_SKStoreTest_Obstack")
native fun testObstack<T: frozen>(T): void;

value class Foo(X, X, Int)

class X(Int, Int) extends SKStore.File
class T(Int, X) extends SKStore.File
class Y(X, Int) extends SKStore.File
class Z(Foo, Foo) extends SKStore.File

fun makeX(x: Int): X {
  X(x, x)
}

fun makeY(x: Int): Y {
  Y(X(x, x), x)
}

fun makeZ(n: Int): Z {
  x = X(n, n);
  Z(Foo(x, x, 22), Foo(x, x, 22))
}

fun makeT(x: Int): T {
  T(x + 1, makeX(x))
}

@cpp_extern
base class CObject

@cpp_extern("SKIP_make_C_object")
native fun makeCObject(): CObject;

@cpp_extern("SKIP_is_C_object")
native fun isCObject(CObject): UInt32;

class CObjectContainer(i0: CObject, i1: Array<CObject>)

@test
fun testRuntime(): void {
  chars = Array['a', 'b', 'c'];
  SKTest.expectEq(
    "xbc",
    String::fromChars(chars).replace("a", "x"),
    "String::replace",
  );
  str = "abc";
  str2 = "123";
  SKTest.expectEq((GT() : Order), str.compare(str2), "String GT");
  SKTest.expectEq((EQ() : Order), str.compare("abc"), "String LT");
  SKTest.expectEq((LT() : Order), str2.compare(str), "String LT");
  SKTest.expectEq("abc123", str + str2, "String.concat2");
  SKTest.expectEq(3, String.byteSize(str).toInt(), "String.byteSize");
  SKTest.expectEq(
    22,
    try {
      makeExn()
    } catch {
    | MyEx(x) -> x
    | e -> throw e
    },
    "throw",
  );
  arr = Array[Array[1], Array[2], Array[3]];
  SKTest.expectEq(3, getArraySize(arr).toInt(), "getArraySize");
  SKTest.expectEq(2147580002, str.hash(), "hash");
  SKTest.expectEq('b'.code(), String.getByte(str, 1).toInt(), "String.getByte");
  SKTest.expectEq(
    "c",
    {
      iter = str.getIter();
      str.substring(iter.drop(2))
    },
    "substring",
  );
  SKTest.expectEq(
    6,
    {
      result = 0;
      Array[1, 2, 3].each(x -> !result = result + x);
      result
    },
    "ArrayEach",
  );
  SKTest.expectEq(0, native_eq(Array[1, 2, 3], Array[1, 2, 3]), "Native Eq 1");
  SKTest.expectEq(1, native_eq(Array[1, 2, 3], Array[1, 2, 4]), "Native Eq 2");
  SKTest.expectEq(1, native_eq(Array[1, 2, 4], Array[1, 2, 3]), "Native Eq 3");
  SKTest.expectEq(1, native_eq(Array[1, 2], Array[1, 2, 3]), "Native Eq 3");
  SKTest.expectEq(
    0,
    native_eq(Array[X(1, 1), T(23, X(2, 2))], Array[X(1, 1), T(23, X(2, 2))]),
    "Native Eq 4",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(0, 1), T(23, X(2, 2))], Array[X(1, 1), T(23, X(2, 2))]),
    "Native Eq 5",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(1, -1), T(23, X(2, 2))], Array[X(1, 1), T(23, X(2, 2))]),
    "Native Eq 6",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(1, 1), T(-23, X(2, 2))], Array[X(1, 1), T(23, X(2, 2))]),
    "Native Eq 7",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(1, 1), T(23, X(-2, 2))], Array[X(1, 1), T(23, X(2, 2))]),
    "Native Eq 8",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(1, 1), T(23, X(2, -2))], Array[X(1, 1), T(23, X(2, 2))]),
    "Native Eq 9",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(1, 1), T(23, X(2, 2))], Array[X(2, 1), T(23, X(2, 2))]),
    "Native Eq 10",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(1, 1), T(23, X(2, 2))], Array[X(1, 2), T(23, X(2, 2))]),
    "Native Eq 11",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(1, 1), T(23, X(2, 2))], Array[X(1, 1), T(24, X(2, 2))]),
    "Native Eq 12",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(1, 1), T(23, X(2, 2))], Array[X(1, 1), T(23, X(3, 2))]),
    "Native Eq 13",
  );
  SKTest.expectEq(
    1,
    native_eq(Array[X(1, 1), T(23, X(2, 2))], Array[X(1, 1), T(23, X(2, 3))]),
    "Native Eq 14",
  );
}

module end;
