fun todo(): _ {
  invariant_violation("TODO");
}

module SKFSTest;

const FAILED: String = "FAILED";
const FAILED_SIZE: Int = "FAILED".length();

const OK: String = "OK";
const OK_SIZE: Int = "OK".length();

fun printFAILEDAfterMsg(msg: String): void {
  for (_ in Range(msg.length(), 79 - FAILED_SIZE)) {
    print_raw(" ");
  };
  print_string(FAILED);
}

fun printOKAfterMsg(msg: String): void {
  for (_ in Range(msg.length(), 79 - OK_SIZE)) {
    print_raw(" ");
  };
  print_string(OK);
}

fun expectFail(msg: String, f: () -> void): void {
  !msg = msg.replace("\n", "\\n");
  print_raw(msg);
  vtry(
    () -> {
      f();
      printFAILEDAfterMsg(msg);
    },
    _ -> printOKAfterMsg(msg),
  );
}

fun expectPass(msg: String, f: () -> void): void {
  !msg = msg.replace("\n", "\\n");
  print_raw(msg);
  vtry(
    () -> {
      f();
      printOKAfterMsg(msg);
    },
    exn -> {
      printFAILEDAfterMsg(msg);
      exn match {
      | NotEqExn(x, y) ->
        print_string(
          `     ===> Expected ${x.toString()} != Got ${y.toString()}`,
        );
        skipExit(23)
      | _ -> print_string("\t\t" + exn.getMessage())
      };
      print_string("");
    },
  );
}

class NotEqExn(Inspect, Inspect) extends Exception

extension base class .Inspect uses Equality {}

fun expectEq<T: frozen>(msg: String, x: T, f: () -> T): void {
  expectPass(msg + " (expect ==)", () -> {
    y = f();
    ix = inspect(x);
    iy = inspect(y);
    if (ix != iy) {
      throw NotEqExn(ix, iy);
    }
  });
}

fun write(
  context: mutable SKFS.Context,
  dirInput: SKFS.DirName,
  key: SKFS.BaseName,
  values: Array<SKFS.File>,
): void {
  context.unsafeGetEagerDir(dirInput).writeArray(context, key, values);
}

fun getData(
  context: mutable SKFS.Context,
  dirName: SKFS.DirName,
  key: SKFS.BaseName,
): Array<SKFS.File> {
  context.unsafeGetDir(dirName) match {
  | SKFS.DeletedDir _ ->
    invariant_violation("Trying to write to an empty directory")
  | edir @ SKFS.EagerDir _ -> edir.getArrayRaw(key)
  | ldir @ SKFS.LazyDir _ -> ldir.unsafeGetArray(context, key)
  }
}

fun getLazyData(
  context: mutable SKFS.Context,
  dirName: SKFS.DirName,
  key: SKFS.BaseName,
  isAsync: Bool = false,
): Array<SKFS.File> {
  context.unsafeGetDir(dirName) match {
  | SKFS.DeletedDir _ ->
    invariant_violation("Trying to write to an empty directory")
  | SKFS.EagerDir _ -> invariant_violation("Was expecting a Lazy dir")
  | ldir @ SKFS.LazyDir _ -> ldir.unsafeGetArray(context, key, isAsync)
  }
}

module end;
