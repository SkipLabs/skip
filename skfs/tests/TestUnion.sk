module SKFSTest;

/*
fun testUnion(): mutable SKFS.Context {
  SKFS.run(context ~> {
    getData = (dir, key) -> context.unsafeGetDir(dir.dirName).getArrayRaw(key);

    dirInput1 = context.mkdir(
      SKFS.IntFile::fromFile,
      SKFS.DirName::create("/input1/"),
      Array[(SKFS.IID(0), SKFS.IntFile(23)), (SKFS.IID(1), SKFS.IntFile(35))],
    );
    dirInput2 = context.mkdir(
      SKFS.IntFile::fromFile,
      SKFS.DirName::create("/input2/"),
      Array[(SKFS.IID(0), SKFS.IntFile(24)), (SKFS.IID(2), SKFS.IntFile(36))],
    );
    dir = dirInput1.union(
      context,
      SKFS.DirName::create("/union/"),
      Array[dirInput2],
    );
    arr0 = getData(dir, SKFS.IID(0));
    expectEq("Union multi-value", arr0, () ->
      Array[SKFS.IntFile(23), SKFS.IntFile(24)]
    );
    arr1 = getData(dir, SKFS.IID(1));
    expectEq("Union left", arr1, () -> Array[SKFS.IntFile(35)]);
    arr2 = getData(dir, SKFS.IID(2));
    expectEq("Union right", arr2, () -> Array[SKFS.IntFile(36)]);
    write = (
      dirInput1: SKFS.EHandle<SKFS.IntFile>,
      key: SKFS.BaseName,
      values: Array<SKFS.IntFile>,
    ) -> {
      context
        .unsafeGetEagerDir(dirInput1.dirName)
        .writeArray(context, key, values);
    };

    write(dirInput1, SKFS.IID(0), Array[]);
    context.update();
    !arr0 = getData(dir, SKFS.IID(0));
    expectEq("Union update1", arr0, () -> Array[SKFS.IntFile(24)]);

    write(dirInput2, SKFS.IID(0), Array[]);
    context.update();
    !arr0 = dir.getArray(context, SKFS.IID(0));
    expectEq("Union update2", arr0, () -> Array[]);

    write(dirInput2, SKFS.IID(1), Array[SKFS.IntFile(37), SKFS.IntFile(38)]);
    context.update();
    !arr1 = getData(dir, SKFS.IID(1));
    expectEq("Union update3", arr1, () ->
      Array[SKFS.IntFile(35), SKFS.IntFile(37), SKFS.IntFile(38)]
    );
  });
}

*/
