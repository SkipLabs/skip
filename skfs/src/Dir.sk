/*****************************************************************************/
/* The interface for directories. */
/*****************************************************************************/

module SKFS;

base class Dir extends File {
  /**
   * Returns true is the directory is an Input.
   */
  fun isInput(): Bool;

  /**
   * Returns an array of files associated with a key.
   * The array is empty if the key does not exist.
   */
  fun getArray(context: mutable Context, key: BaseName): Array<File>;

  /**
   * Returns an iterator of files associated with a key.
   * The iterator is empty if the key does not exist.
   */
  fun getIter(context: mutable Context, key: BaseName): mutable Iterator<File>;

  /**
   * Same as getArray but does not create a dependency, which will break in
   * incremental mode. This should only be used for testing.
   */
  fun getArrayRaw(key: BaseName): Array<File>;

  /**
   * Returns the list of files in a directory. Should only be used for testing.
   */
  fun keys(): SortedSet<BaseName>;

  /**
   * Returns the directory name
   */
  fun getDirName(): DirName;

  /**
   * Returns the creation time of that directory.
   */
  fun getTime(): Time;
}

/*****************************************************************************/
/* Exceptions */
/*****************************************************************************/

class DirAlreadyExists(dirName: DirName) extends Exception {
  fun toString(): String {
    `Directory ${this.dirName} already exists`
  }
}

class CyclicData(key: String) extends Exception {
  fun toString(): String {
    `Cyclic dependencies detected on key ${this.key}`
  }
}
