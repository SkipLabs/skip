/*****************************************************************************/
/* Lazy directories. */
/*****************************************************************************/
module SKStore;

class CyclicExn(Key) extends Exception, File {
  fun toString(): String {
    inspect(this).toString()
  }
}

base class LazyResult {
  children =
  | LDefined(Array<File>, Array<Path>)
  | LRemoved(Array<Path>)
  | LCycle()
  | LAbsent()
  | LDelayed()
}

class LazyDir{
  time: Time,
  dirName: DirName,
  data: SortedMap<Key, LazyResult> = SortedMap[],
  lazyFun: ((mutable Context, Key) ~> LazyResult),
  collect: Bool,
} extends Dir {
  fun isInput(): Bool {
    false
  }

  fun getTime(): Time {
    this.time
  }

  fun reset(context: mutable Context): void {
    context.setDir(this.dirName, this);
  }

  fun keys(): SortedSet<Key> {
    keys = SortedSet[];
    for (newKey => value in this.data) {
      if (value is LDefined _) {
        !keys = keys.set(newKey);
      };
    };
    keys
  }

  fun getDirName(): DirName {
    this.dirName
  }

  fun isDeleted(): Bool {
    false
  }

  static fun create(
    context: mutable Context,
    dirName: DirName,
    f: (mutable Context, DirName, Key) ~> ?Array<File>,
    collect: Bool = true,
  ): Dir {
    time = context.timeStamp();
    lazyFun = (context: mutable Context, key: Key) ~> {
      dir = context.unsafeGetLazyDir(dirName);
      !dir.data[key] = LCycle();
      context.setDir(dirName, dir);

      readsCopy = context.reads;
      context.!reads = SortedSet[];

      resultOpt = try {
        f(context, dirName, key)
      } catch {
      | exn ->
        !dir = context.unsafeGetLazyDir(dirName);
        !dir.data[key] = LAbsent();
        context.setDir(dirName, dir);
        context.!reads = readsCopy;
        throw exn
      };

      result = resultOpt match {
      | None() -> LAbsent()
      | Some(x) -> LDefined(x, context.reads.toArray())
      };

      for (read in context.reads) {
        arrowKey = ArrowKey(dirName, dirName, key);
        context.!deps = context.deps.set(read, arrowKey);
      };

      !dir = context.unsafeGetLazyDir(dirName);
      !dir.data[key] = result;
      context.setDir(dirName, dir);

      if (context.debugMode) {
        name = "" + dir.dirName + key;
        print_string(`WRITTEN LAZY:  ${name}`);
      };
      context.!reads = readsCopy;
      result
    };
    newDir = LazyDir{time, dirName, lazyFun, collect};
    context.maybeGetLazyDir(dirName) match {
    | Some(ldir) if (native_eq(ldir.lazyFun, lazyFun) == 0) ->
      if (context.debugMode) {
        print_string(`REUSING: ${dirName.toString()}`);
      };
      ldir
    | _ ->
      updateDirtyReaders(context, Path::create(dirName.tag(), DirTag()));
      context.setDir(dirName, newDir);
      newDir
    }
  }

  fun getArrayRaw(key: Key): Array<File> {
    this.data.maybeGet(key) match {
    | Some(LDefined(arr, _)) -> arr
    | _ -> Array[]
    }
  }

  fun update(
    context: mutable Context,
    dirtyReadersOpt: ?readonly Map<DirName, SortedSet<Key>>,
  ): void {
    dirtyReaders = SortedSet[];
    firstDirtyReaders = dirtyReadersOpt match {
    | None() -> mutable Map[]
    | Some(m) -> m
    };

    for (dirtyReaderDirName => dirtyReaderKeys in firstDirtyReaders) {
      for (dirtyReaderKey in dirtyReaderKeys) {
        !dirtyReaders = dirtyReaders.set(
          Path::create(dirtyReaderDirName, dirtyReaderKey),
        );
      }
    };

    for (path in dirtyReaders) {
      key = path.baseName;
      oldValue = this.data.maybeGet(key);
      !this.data = this.data.remove(key);
      updateDirtyReaders(context, path);
      oldValue match {
      | Some(LDefined(_, reads))
      | Some(LRemoved(reads)) ->
        for (read in reads) {
          arrow = ArrowKey(this.dirName, this.dirName, key);
          context.!deps = context.deps.remove(read, arrow)
        }
      | _ -> void
      }
    };

    context.setDir(this.dirName, this);
  }

  fun unsafeGetArray(
    context: mutable Context,
    key: Key,
    isAsync: Bool = false,
    throwOnCycle: Bool = true,
  ): Array<File> {
    if (this.collect) {
      context.!lazyGets = context.lazyGets.set(Path::create(this.dirName, key));
    };
    lazyResult = this.data.maybeGet(key) match {
    | Some(LCycle()) if (throwOnCycle) -> throw CyclicExn(key)
    | x @ None()
    | x @ Some(LRemoved _)
    | x @ Some(LAbsent()) ->
      if (x is Some(LRemoved _) && context.debugMode) {
        print_string("LRemoved: " + Path::create(this.dirName, key).toString())
      };
      if (isAsync) {
        context.pushAsync(Path::create(this.dirName, key));
        LDelayed()
      } else {
        this.lazyFun(context, key)
      }
    | Some(LDelayed()) if (!isAsync) -> this.lazyFun(context, key)
    | Some(x) -> x
    };
    lazyResult match {
    | LDefined(arr, _reads) -> arr
    | _ -> Array[]
    }
  }

  fun getArray(context: mutable Context, key: Key): Array<File> {
    path = Path::create(this.dirName, key);
    context.addDep(path);
    this.unsafeGetArray(context, key, false, true)
  }

  fun getArrayWithOptions(
    context: mutable Context,
    key: Key,
    isAsync: Bool = false,
    throwOnCycle: Bool = true,
  ): Array<File> {
    path = Path::create(this.dirName, key);
    context.addDep(path);
    this.unsafeGetArray(context, key, isAsync, throwOnCycle)
  }

  fun getIter(context: mutable Context, key: Key): mutable Iterator<File> {
    this.getArray(context, key).iterator()
  }

  fun getArrayAsync(context: mutable Context, key: Key): Array<File> {
    path = Path::create(this.dirName, key);
    context.addDep(path);
    this.unsafeGetArray(context, key, true)
  }
}

module end;
