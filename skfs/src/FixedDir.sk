/*****************************************************************************/
/* Definition of the "fixed" part of a directory.
 *
 * Every Eager Directory defines a "fixed" part. Meaning, the values defined
 * at initialization time. After the initialization, the directory is defined
 * as the difference between the initialization data (that never changes) and
 * the changes made to the directory since its inception.
 *
 * So for example:
 * dir = mkdir(..., Array[(1, 1), (2, 2), (3, 3)]);
 * fixedData => FixedRow((1, (src, 1)), (2, (src, 2)), (3, (src, 3)))
 *
 * Then later someone removes the key 2.
 * data => DMap[2 => SortedMap(src, Array[])]
 *
 * And the value associated with the key "2" is defined as the difference
 * between fixedData and data. So in this case, because the source is the same
 * the key 2 is associated with an empty array.
 */
/*****************************************************************************/
module SKStore;

value class Source(dirName: DirName, baseName: Key) uses Orderable {
  static fun create(value: Path): this {
    static(value.dirName, value.baseName)
  }

  fun path(): Path {
    Path(this.dirName, this.baseName)
  }
}

value class FixedRow<T>(key: Key, value: (Source, T), tag: TickRange) {
  fun changeSource(source: Source): this {
    !this.value.i0 = source;
    this
  }
}

base class FixedData<T> {
  fun size(): Int;
  fun get(idx: Int): FixedRow<T>;
  fun getPos(key: Key): Int;
  fun getArray(key: Key): Array<(Source, T)>;
  fun getIter(key: Key): mutable Iterator<(Tick, Source, T)>;
  fun getIterAfter(tick: Tick, key: Key): mutable Iterator<(Tick, Source, T)>;
  fun getArraySourceKey(source: Source, key: Key): Array<T>;
  fun getIterSourceKey(source: Source, key: Key): mutable Iterator<T>;
  fun getChangesAfter(tick: Tick): SortedSet<Key>;
  fun getTick(): ?Tick;
}

// Assuming delta is monotone, that is, i <= j implies delta(i) <= delta(j),
// findFirstBy(delta, l, u) is the least m where l <= m <= u such that
// delta(m) == EQ(). If there is no such m, then l <= m <= u+1 but otherwise
// is arbitrary.
fun findFirstBy(delta: Int ~> Order, l: Int, u: Int): Int {
  while (l <= u) {
    m = l + (u - l) / 2;
    if (delta(m) is GT()) {
      !l = m + 1
    } else {
      !u = m - 1
    }
  };
  l;
}

// Assuming delta is monotone, that is, i <= j implies delta(i) <= delta(j),
// findAllBy(delta, l, u) enumerates, in increasing order, all the m where l
// <= m <= u such that delta(m) == EQ().
fun findAllBy<T>(delta: Int ~> Order, l: Int, u: Int): mutable Iterator<Int> {
  i = findFirstBy(delta, l, u);
  // Linear scan to find all elements that compare equal to key. If
  // the number of such duplicates is expected to be > lg(u-i), this
  // should be replaced with the findLastBy analogue of findFirstBy.
  while (i <= u && delta(i) == EQ()) {
    yield i;
    !i = i + 1;
  }
}

fun findAll<T: Orderable>(
  get: Int ~> T,
  key: T,
  i: Int,
  j: Int,
): mutable Iterator<Int> {
  findAllBy(idx ~> key.compare(get(idx)), i, j)
}

// Assuming x <= y implies get(x) <= get(y), binSearch(get, key, i, j)
// is the least index k where i <= k <= j such that get(k) == key. If
// there is no such index, then i <= k <= j+1 but otherwise is arbitrary.
fun binSearch<T: Orderable>(get: Int ~> T, key: T, i: Int, j: Int): Int {
  findFirstBy(idx ~> key.compare(get(idx)), i, j)
}

class FixedDir<T: frozen> private {
  data: Array<FixedRow<T>> = Array[],
} extends FixedData<T> {
  static fun create(
    data: mutable Vector<FixedRow<T>> = mutable Vector[],
  ): this {
    i = 0;
    sz = data.size();
    sorted = loop {
      !i = i + 1;
      if (i >= sz) break true;
      keyComparison = data[i - 1].key.compare(data[i].key);
      keyComparison match {
      | LT() -> continue
      | GT() -> break false
      | EQ() -> data[i - 1].value.i0.compare(data[i].value.i0)
      } match {
      | LT() -> continue
      | EQ() -> continue
      | GT() -> break false
      };
    };
    if (!sorted) {
      data.sortBy(row ~> (row.key, row.value.i0));
    };
    _ = static::computeTags(data, 0, data.size() - 1);
    FixedDir{data => data.toArray()}
  }

  fun size(): Int {
    this.data.size()
  }

  fun get(idx: Int): FixedRow<T> {
    this.data.unsafe_get(idx)
  }

  fun getPos(key: Key): Int {
    binSearch(i ~> this.get(i).key, key, 0, this.size() - 1)
  }

  fun getAll(key: Key): mutable Iterator<Int> {
    findAll(i ~> this.get(i).key, key, 0, this.size() - 1)
  }

  fun getAllSourceKey(source: Source, key: Key): mutable Iterator<Int> {
    delta = i ~> {
      entry = this.get(i);
      c = key.compare(entry.key);
      if (c != EQ()) return c;
      source.compare(entry.value.i0)
    };
    findAllBy(delta, 0, this.size() - 1)
  }

  fun getArray(key: Key): Array<(Source, T)> {
    this.getAll(key).map(i ~> this.get(i).value).collect(Array)
  }

  fun getIter(key: Key): mutable Iterator<(Tick, Source, T)> {
    this.getAll(key).map(i -> {
      elt = this.get(i);
      (elt.tag.current, elt.value.i0, elt.value.i1)
    })
  }

  fun getIterSourceKey(source: Source, key: Key): mutable Iterator<T> {
    this.getAllSourceKey(source, key).map(i -> this.get(i).value.i1)
  }

  fun getArraySourceKey(source: Source, key: Key): Array<T> {
    this.getIterSourceKey(source, key).collect(Array)
  }

  static fun computeTags(
    array: mutable Vector<FixedRow<T>>,
    i: Int,
    j: Int,
  ): TickRange {
    if (i > j) {
      return TickRange::create(Tick(0))
    };
    pivot = i + (j - i) / 2;
    elt = array[pivot];
    tag = elt.tag;
    right = static::computeTags(array, pivot + 1, j);
    left = static::computeTags(array, i, pivot - 1);
    !tag.max = max(tag.max, max(left.max, right.max));
    array![pivot] = elt with {tag};
    tag
  }

  fun getChangesAcc(
    after: Tick,
    acc: mutable Vector<Key>,
    i: Int,
    j: Int,
  ): void {
    if (i > j) {
      return void;
    };
    pivot = i + (j - i) / 2;
    elt = this.data[pivot];
    tick = elt.tag;
    if (tick.max < after) return void;
    if (tick.current >= after) {
      acc.push(elt.key);
    };
    this.getChangesAcc(after, acc, i, pivot - 1);
    this.getChangesAcc(after, acc, pivot + 1, j);
  }

  fun getChangesAfter(tick: Tick): SortedSet<Key> {
    acc = mutable Vector[];
    this.getChangesAcc(tick, acc, 0, this.data.size() - 1);
    result = SortedSet[];
    for (elt in acc) {
      !result = result.set(elt);
    };
    result
  }

  fun getKeyChangesAfter(
    after: Tick,
    key: Key,
    i: Int,
    j: Int,
    acc: mutable Vector<(Tick, Source, T)>,
  ): void {
    if (i <= j) {
      pivot = i + (j - i) / 2;
      elt = this.data[pivot];
      tick = elt.tag;
      if (tick.max >= after) {
        if (key <= elt.key) {
          this.getKeyChangesAfter(after, key, i, pivot - 1, acc);
        };
        if (tick.current >= after) {
          if (elt.key.compare(key) is EQ()) {
            acc.push((tick.current, elt.value.i0, elt.value.i1));
          }
        };
        if (key >= elt.key) {
          this.getKeyChangesAfter(after, key, pivot + 1, j, acc);
        }
      }
    }
  }

  fun getIterAfter(limit: Tick, key: Key): mutable Iterator<(Tick, Source, T)> {
    acc = mutable Vector[];
    this.getKeyChangesAfter(limit, key, 0, this.data.size() - 1, acc);
    acc.iterator()
  }

  fun getTick(): ?Tick {
    if (this.data.isEmpty()) {
      None()
    } else {
      middle = (this.data.size() - 1) / 2;
      tick = this.data[middle].tag;
      Some(tick.max)
    }
  }
}

/*****************************************************************************/
/* Same as FixedDir but with no values. */
/*****************************************************************************/

value class FixedKey(key: Key, tag: TickRange) uses Orderable {
  fun compare(fixedKey2: FixedKey): Order {
    this.key.compare(fixedKey2.key) match {
    | EQ() -> this.tag.current.compare(fixedKey2.tag.current)
    | x -> x
    }
  }
}

class FixedSet private {data: Array<FixedKey> = Array[]} {
  static fun create(set: SortedSet<FixedKey> = SortedSet[]): this {
    data = mutable Vector[];
    lastOpt: ?FixedKey = None();
    for (elt in set) {
      lastOpt match {
      | None() -> data.push(elt)
      | Some(last) ->
        if (last.key == elt.key) {
          if (elt.tag.current > last.tag.current) {
            data![data.size() - 1] = elt;
          }
        } else {
          data.push(elt)
        }
      };
      !lastOpt = Some(elt)
    };
    result = data.toArray().clone();
    cache = Array::mfill(result.size(), false);
    _ = static::computeTags(cache, result, 0, result.size() - 1);
    FixedSet{data => result.chill()}
  }

  fun size(): Int {
    this.data.size()
  }

  static fun computeTags(
    cache: mutable Array<Bool>,
    array: mutable Array<FixedKey>,
    i: Int,
    j: Int,
  ): TickRange {
    if (i > j) {
      if (i < 0 || i >= array.size()) {
        return TickRange::create(Tick(0))
      } else {
        loop {
          elt = array[i];
          key = elt.key;
          maxVal = elt.tag.max;
          loop {
            !i = i + 1;
            if (i >= array.size() || array[i].key != key) {
              return TickRange(maxVal, maxVal)
            };
            !maxVal = max(maxVal, array[i].tag.max);
            if (cache[i]) {
              return TickRange(maxVal, maxVal)
            };
          }
        }
      }
    };
    pivot = i + (j - i) / 2;
    elt = array[pivot];
    tag = elt.tag;
    right = static::computeTags(cache, array, pivot + 1, j);
    left = static::computeTags(cache, array, i, pivot - 1);
    !tag.max = max(tag.max, max(left.max, right.max));
    array![pivot] = elt with {tag};
    cache![pivot] = true;
    tag
  }

  fun getChangesAcc(
    after: Tick,
    acc: mutable Vector<Key>,
    i: Int,
    j: Int,
  ): void {
    if (i < 0 || i >= this.data.size()) {
      return void
    };
    if (i >= j) {
      tick = this.data[i].tag;
      if (tick.max < after) return void;
      if (tick.current >= after) {
        acc.push(this.data[i].key);
      };
      return void;
    };
    pivot = i + (j - i) / 2;
    elt = this.data[pivot];
    tick = elt.tag;
    if (tick.max < after) return void;
    if (tick.current >= after) {
      acc.push(elt.key);
    };
    this.getChangesAcc(after, acc, i, pivot - 1);
    this.getChangesAcc(after, acc, pivot + 1, j);
  }

  fun getChangesAfter(tick: Tick): SortedSet<Key> {
    acc = mutable Vector[];
    this.getChangesAcc(tick, acc, 0, this.data.size() - 1);
    result = SortedSet[];
    for (elt in acc) {
      !result = result.set(elt);
    };
    result
  }
}

/*****************************************************************************/
/* Immutable set (represented with an Array), where the elements are
 * guaranteed to be unique. */
/*****************************************************************************/

class FixedSingle<K: Orderable, +V: frozen>(data: Array<(K, V)> = Array[]) {
  static fun empty(): this {
    FixedSingle()
  }

  fun items(): mutable Iterator<(K, V)> {
    this.data.iterator()
  }

  static fun createFromItems(items: Sequence<(K, V)>): this {
    static::create(Vector::mcreateFromItems(items));
  }

  static fun create(data: mutable Vector<(K, V)>, dedup: Bool = false): this {
    data.sortBy(x ~> x.i0);

    lastOpt: ?K = None();
    for (kv in data) {
      (k, _) = kv;
      lastOpt match {
      | None() -> !lastOpt = Some(k)
      | Some(last) ->
        if (last == k && !dedup) {
          debug((last, k));
          invariant_violation("Duplicate value in single")
        } else {
          !lastOpt = Some(k)
        }
      }
    };

    FixedSingle(data.toArray())
  }

  fun size(): Int {
    this.data.size()
  }

  fun get(idx: Int): (K, V) {
    this.data[idx]
  }

  private fun getPos(key: K): Int {
    binSearch(i ~> this.get(i).i0, key, 0, this.size() - 1)
  }

  fun maybeGet(key: K): ?V {
    pos = this.getPos(key);
    if (pos >= this.size()) return None();
    elt = this.get(pos);
    if (elt.i0 != key) return None();
    Some(elt.i1);
  }
}

module end;
