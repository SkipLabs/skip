/*****************************************************************************/
/* Definition of the "fixed" part of a directory.
 *
 * Every Eager Directory defines a "fixed" part. Meaning, the values defined
 * at initialization time. After the initialization, the directory is defined
 * as the difference between the initialization data (that never changes) and
 * the changes made to the directory since its inception.
 *
 * So for example:
 * dir = mkdir(..., Array[(1, 1), (2, 2), (3, 3)]);
 * fixedData => FixedRow((1, (src, 1)), (2, (src, 2)), (3, (src, 3)))
 *
 * Then later someone removes the key 2.
 * data => DMap[2 => SortedMap(src, Array[])]
 *
 * And the value associated with the key "2" is defined as the difference
 * between fixedData and data. So in this case, because the source is the same
 * the key 2 is associated with an empty array.
 */
/*****************************************************************************/
module SKStore;

value class FixedRow<T>(key: Key, value: T, source: Path, tag: TickRange) {
  fun changeSource(source: Path): this {
    !this.source = source;
    this
  }
}

base class FixedData<T> {
  fun size(): Int;
  fun get(idx: Int): FixedRow<T>;
  fun getPos(key: Key): Int;
  fun getArray(key: Key): Array<T>;
  fun getIter(key: Key): mutable Iterator<(Tick, Path, T)>;
  fun getIterAfter(tick: Tick, key: Key): mutable Iterator<(Tick, Path, T)>;
  fun getArraySourceKey(source: Path, key: Key): Array<T>;
  fun getIterSourceKey(source: Path, key: Key): mutable Iterator<T>;
  fun getChangesAfter(tick: Tick): SortedSet<Key>;
  fun getTick(): ?Tick;
  fun iterator(): mutable Iterator<FixedRow<T>>;
}

// Assuming delta is monotone, that is, i <= j implies delta(i) <= delta(j),
// findFirstBy(delta, l, u) is the least m where l <= m <= u such that
// delta(m) == EQ(). If there is no such m, then l <= m <= u+1 but otherwise
// is arbitrary.
fun findFirstBy(delta: Int ~> Order, l: Int, u: Int): Int {
  while (l <= u) {
    m = l + (u - l) / 2;
    if (delta(m) is GT()) {
      !l = m + 1
    } else {
      !u = m - 1
    }
  };
  l;
}

// Assuming delta is monotone, that is, i <= j implies delta(i) <= delta(j),
// findAllBy(delta, l, u) enumerates, in increasing order, all the m where l
// <= m <= u such that delta(m) == EQ().
fun findAllBy<T>(delta: Int ~> Order, l: Int, u: Int): mutable Iterator<Int> {
  i = findFirstBy(delta, l, u);
  // Linear scan to find all elements that compare equal to key. If
  // the number of such duplicates is expected to be > lg(u-i), this
  // should be replaced with the findLastBy analogue of findFirstBy.
  while (i <= u && delta(i) == EQ()) {
    yield i;
    !i = i + 1;
  }
}

fun findAll<T: Orderable>(
  get: Int ~> T,
  key: T,
  i: Int,
  j: Int,
): mutable Iterator<Int> {
  findAllBy(idx ~> key.compare(get(idx)), i, j)
}

// Assuming x <= y implies get(x) <= get(y), binSearch(get, key, i, j)
// is the least index k where i <= k <= j such that get(k) == key. If
// there is no such index, then i <= k <= j+1 but otherwise is arbitrary.
fun binSearch<T: Orderable>(get: Int ~> T, key: T, i: Int, j: Int): Int {
  findFirstBy(idx ~> key.compare(get(idx)), i, j)
}

// Assuming that the elements of `sortedData` are in fact sorted by `f`,
// checks that the elements are unique under `f` and throws otherwise
fun assertUnique<T, U: Orderable>(
  sortedData: mutable Vector<T>,
  f: T ~> U,
): void {
  lastOpt: ?U = None();
  for (t in sortedData) {
    u = f(t);
    lastOpt match {
    | None() -> !lastOpt = Some(u)
    | Some(last_u) ->
      if (last_u == u) {
        debug((last_u, u));
        invariant_violation("Unexpected duplicate elements found")
      } else {
        !lastOpt = Some(u)
      }
    }
  };
}

class FixedDir<T: frozen> extends IFixedDir<T, FixedRow<T>> {
  static fun create(
    data: mutable Vector<FixedRow<T>> = mutable Vector[],
  ): this {
    i = 0;
    sz = data.size();
    sorted = loop {
      !i = i + 1;
      if (i >= sz) break true;
      keyComparison = data[i - 1].key.compare(data[i].key);
      keyComparison match {
      | LT() -> continue
      | GT() -> break false
      | EQ() -> data[i - 1].source.compare(data[i].source)
      } match {
      | LT() -> continue
      | EQ() -> continue
      | GT() -> break false
      };
    };
    if (!sorted) {
      data.sortBy(row ~> (row.key, row.source));
    };
    _ = static::computeTags(data, 0, data.size() - 1);
    static{data => data.toArray()}
  }

  protected fun decode(row: FixedRow<T>): FixedRow<T> {
    row
  }
}

value class CompactRow<T>(
  values: Array<T>,
  repeat: Int,
  tag: TickRange,
  sourceKey: ?SKStore.Key,
)

class FixedDirMetadata{
  sourceDir: DirName,
  kinds: Array<(Int, SQLParser.IKind, SQLParser.Type)>,
}

// This is a more compact representation of a FixedDir, keeping some shared
// metadata about the directory and stripping redundant repeated data
// out of the rows themselves.
class CompactFixedDir{
  metadata: FixedDirMetadata,
} extends IFixedDir<Array<File>, CompactRow<?SKDB.CValue>> {
  static fun create(
    data: mutable Vector<FixedRow<Array<File>>>,
    metadata: FixedDirMetadata,
  ): this {
    i = 0;
    sz = data.size();
    sorted = loop {
      !i = i + 1;
      if (i >= sz) break true;
      keyComparison = data[i - 1].key.compare(data[i].key);
      keyComparison match {
      | LT() -> continue
      | GT() -> break false
      | EQ() -> data[i - 1].source.compare(data[i].source)
      } match {
      | LT() -> continue
      | EQ() -> continue
      | GT() -> break false
      };
    };
    if (!sorted) {
      data.sortBy(row ~> (row.key, row.source));
    };
    _ = static::computeTags(data, 0, data.size() - 1);
    static{
      data => data.map(static::stripMetadata).toArray(),
      metadata => metadata,
    }
  }
  protected static fun stripMetadata(
    row: FixedRow<Array<File>>,
  ): CompactRow<?SKDB.CValue> {
    invariant(row.value.size() == 1);
    sourceKey = if (row.source.baseName != row.key) {
      Some(row.source.baseName)
    } else {
      None()
    };

    row.value[0] match {
    | SKDB.RowValues(values, repeat) ->
      CompactRow(values, repeat, row.tag, sourceKey)
    | _ -> invariant_violation("Unexpected type")
    };
  }
  protected fun decode(
    compactRow: CompactRow<?SKDB.CValue>,
  ): FixedRow<Array<File>> {
    rowValues = SKDB.RowValues(compactRow.values, compactRow.repeat);
    rowKey = SKDB.RowKey(rowValues, this.metadata.kinds);
    sourceKey = compactRow.sourceKey match {
    | None() -> rowKey
    | Some(otherKey) -> otherKey
    };
    FixedRow(
      rowKey,
      Array[(rowValues : File)],
      Path(this.metadata.sourceDir, sourceKey),
      compactRow.tag,
    )
  }
}

//Defines the public interface of a FixedDir, allowing for some alternative
// internal RowRepresentation of conceptually-FixedRow<T> rows.
base class IFixedDir<T: frozen, RowRepresentation: frozen> protected {
  data: Array<RowRepresentation> = Array[],
} extends FixedData<T> {
  protected fun decode(repr: RowRepresentation): FixedRow<T>;

  fun iterator(): mutable Iterator<FixedRow<T>> {
    for (elt in this.data.iterator()) {
      yield this.decode(elt)
    }
  }

  static fun getMetadata(
    data: mutable Vector<FixedRow<Array<File>>>,
  ): ?FixedDirMetadata {
    if (data.size() == 0) return None();
    sourceDir: ?DirName = None();
    kinds: ?Array<(Int, SQLParser.IKind, SQLParser.Type)> = None();

    for (elt in data) {
      if (elt.value.size() != 1) return None();
      (elt.key, elt.value[0]) match {
      | (SKDB.RowKey(row1, k), row2 @ SKDB.RowValues _) ->
        kinds match {
        | None() -> !kinds = Some(k)
        | Some(k2) ->
          invariant(k == k2, "Mismatched kinds in table " + elt.source.dirName)
        };
        !sourceDir = sourceDir match {
        | None() -> Some(elt.source.dirName)
        | sd @ Some(dir) if (dir == elt.source.dirName) -> sd
        | _ -> return None()
        };
        if (row1 != row2) return None()
      | _ -> return None()
      }
    };
    sourceDir.map(sourceDir ->
      FixedDirMetadata{sourceDir, kinds => kinds.fromSome()}
    )
  }

  fun size(): Int {
    this.data.size()
  }

  fun get(idx: Int): FixedRow<T> {
    this.decode(this.data.unsafe_get(idx))
  }

  fun getPos(key: Key): Int {
    binSearch(i ~> this.get(i).key, key, 0, this.size() - 1)
  }

  fun getAll(key: Key): mutable Iterator<Int> {
    findAll(i ~> this.get(i).key, key, 0, this.size() - 1)
  }

  fun getAllSourceKey(source: Path, key: Key): mutable Iterator<Int> {
    delta = i ~> {
      entry = this.get(i);
      c = key.compare(entry.key);
      if (c != EQ()) return c;
      source.compare(entry.source)
    };
    findAllBy(delta, 0, this.size() - 1)
  }

  fun getArray(key: Key): Array<T> {
    this.getAll(key).map(i ~> this.get(i).value).collect(Array)
  }

  fun getIter(key: Key): mutable Iterator<(Tick, Path, T)> {
    this.getAll(key).map(i -> {
      elt = this.get(i);
      (elt.tag.current, elt.source, elt.value)
    })
  }

  fun getIterSourceKey(source: Path, key: Key): mutable Iterator<T> {
    this.getAllSourceKey(source, key).map(i -> this.get(i).value)
  }

  fun getArraySourceKey(source: Path, key: Key): Array<T> {
    this.getIterSourceKey(source, key).collect(Array)
  }

  static fun computeTags(
    array: mutable Vector<FixedRow<T>>,
    i: Int,
    j: Int,
  ): TickRange {
    if (i > j) {
      return TickRange::create(Tick(0))
    };
    pivot = i + (j - i) / 2;
    elt = array[pivot];
    tag = elt.tag;
    right = static::computeTags(array, pivot + 1, j);
    left = static::computeTags(array, i, pivot - 1);
    !tag.max = max(tag.max, max(left.max, right.max));
    array![pivot] = elt with {tag};
    tag
  }

  fun getChangesAcc(
    after: Tick,
    acc: mutable Vector<Key>,
    i: Int,
    j: Int,
  ): void {
    if (i > j) {
      return void;
    };
    pivot = i + (j - i) / 2;
    elt = this.decode(this.data[pivot]);
    tick = elt.tag;
    if (tick.max < after) return void;
    if (tick.current >= after) {
      acc.push(elt.key);
    };
    this.getChangesAcc(after, acc, i, pivot - 1);
    this.getChangesAcc(after, acc, pivot + 1, j);
  }

  fun getChangesAfter(tick: Tick): SortedSet<Key> {
    acc = mutable Vector[];
    this.getChangesAcc(tick, acc, 0, this.data.size() - 1);
    result = SortedSet[];
    for (elt in acc) {
      !result = result.set(elt);
    };
    result
  }

  fun getKeyChangesAfter(
    after: Tick,
    key: Key,
    i: Int,
    j: Int,
    acc: mutable Vector<(Tick, Path, T)>,
  ): void {
    if (i <= j) {
      pivot = i + (j - i) / 2;
      elt = this.decode(this.data[pivot]);
      tick = elt.tag;
      if (tick.max >= after) {
        if (key <= elt.key) {
          this.getKeyChangesAfter(after, key, i, pivot - 1, acc);
        };
        if (tick.current >= after) {
          if (elt.key.compare(key) is EQ()) {
            acc.push((tick.current, elt.source, elt.value));
          }
        };
        if (key >= elt.key) {
          this.getKeyChangesAfter(after, key, pivot + 1, j, acc);
        }
      }
    }
  }

  fun getIterAfter(limit: Tick, key: Key): mutable Iterator<(Tick, Path, T)> {
    acc = mutable Vector[];
    this.getKeyChangesAfter(limit, key, 0, this.data.size() - 1, acc);
    acc.iterator()
  }

  fun getTick(): ?Tick {
    if (this.data.isEmpty()) {
      None()
    } else {
      middle = (this.data.size() - 1) / 2;
      tickRange = this.decode(this.data[middle]).tag;
      Some(tickRange.max)
    }
  }
}

/*****************************************************************************/
/* Same as FixedDir but with no values. */
/*****************************************************************************/

value class FixedKey(key: Key, tag: TickRange) uses Orderable {
  fun compare(fixedKey2: FixedKey): Order {
    this.key.compare(fixedKey2.key) match {
    | EQ() -> this.tag.current.compare(fixedKey2.tag.current)
    | x -> x
    }
  }
}

class FixedSet private {data: Array<FixedKey> = Array[]} {
  static fun create(set: SortedSet<FixedKey> = SortedSet[]): this {
    data = mutable Vector[];
    lastOpt: ?FixedKey = None();
    for (elt in set) {
      lastOpt match {
      | None() -> data.push(elt)
      | Some(last) ->
        if (last.key == elt.key) {
          if (elt.tag.current > last.tag.current) {
            data![data.size() - 1] = elt;
          }
        } else {
          data.push(elt)
        }
      };
      !lastOpt = Some(elt)
    };
    result = data.toArray().clone();
    cache = Array::mfill(result.size(), false);
    _ = static::computeTags(cache, result, 0, result.size() - 1);
    FixedSet{data => result.chill()}
  }

  fun size(): Int {
    this.data.size()
  }

  static fun computeTags(
    cache: mutable Array<Bool>,
    array: mutable Array<FixedKey>,
    i: Int,
    j: Int,
  ): TickRange {
    if (i > j) {
      if (i < 0 || i >= array.size()) {
        return TickRange::create(Tick(0))
      } else {
        loop {
          elt = array[i];
          key = elt.key;
          maxVal = elt.tag.max;
          loop {
            !i = i + 1;
            if (i >= array.size() || array[i].key != key) {
              return TickRange(maxVal, maxVal)
            };
            !maxVal = max(maxVal, array[i].tag.max);
            if (cache[i]) {
              return TickRange(maxVal, maxVal)
            };
          }
        }
      }
    };
    pivot = i + (j - i) / 2;
    elt = array[pivot];
    tag = elt.tag;
    right = static::computeTags(cache, array, pivot + 1, j);
    left = static::computeTags(cache, array, i, pivot - 1);
    !tag.max = max(tag.max, max(left.max, right.max));
    array![pivot] = elt with {tag};
    cache![pivot] = true;
    tag
  }

  fun getChangesAcc(
    after: Tick,
    acc: mutable Vector<Key>,
    i: Int,
    j: Int,
  ): void {
    if (i < 0 || i >= this.data.size()) {
      return void
    };
    if (i >= j) {
      tick = this.data[i].tag;
      if (tick.max < after) return void;
      if (tick.current >= after) {
        acc.push(this.data[i].key);
      };
      return void;
    };
    pivot = i + (j - i) / 2;
    elt = this.data[pivot];
    tick = elt.tag;
    if (tick.max < after) return void;
    if (tick.current >= after) {
      acc.push(elt.key);
    };
    this.getChangesAcc(after, acc, i, pivot - 1);
    this.getChangesAcc(after, acc, pivot + 1, j);
  }

  fun getChangesAfter(tick: Tick): SortedSet<Key> {
    acc = mutable Vector[];
    this.getChangesAcc(tick, acc, 0, this.data.size() - 1);
    result = SortedSet[];
    for (elt in acc) {
      !result = result.set(elt);
    };
    result
  }
}

/*****************************************************************************/
/* Immutable set (represented with an Array), where the elements are
 * guaranteed to be unique. */
/*****************************************************************************/

class FixedSingle<K: Orderable, +V: frozen>(data: Array<(K, V)> = Array[]) {
  static fun empty(): this {
    FixedSingle()
  }

  fun items(): mutable Iterator<(K, V)> {
    this.data.iterator()
  }

  static fun createFromItems(items: Sequence<(K, V)>): this {
    static::create(Vector::mcreateFromItems(items));
  }

  static fun create(
    data: mutable Vector<(K, V)>,
    allowDuplicates: Bool = false,
  ): FixedSingle<K, V> {
    data.sortBy(x ~> x.i0);

    if (!allowDuplicates) assertUnique(data, x ~> x.i0);

    FixedSingle(data.toArray())
  }

  fun size(): Int {
    this.data.size()
  }

  fun get(idx: Int): (K, V) {
    this.data[idx]
  }

  private fun getPos(key: K): Int {
    binSearch(i ~> this.get(i).i0, key, 0, this.size() - 1)
  }

  fun maybeGet(key: K): ?V {
    pos = this.getPos(key);
    if (pos >= this.size()) return None();
    elt = this.get(pos);
    if (elt.i0 != key) return None();
    Some(elt.i1);
  }
}

// Mapping from source paths to MInfo
base class FixedSourceMap {
  fun maybeGet(key: Path): ?MInfo;
  fun get(idx: Int): (Path, MInfo);
  fun size(): Int;
  fun items(): mutable Iterator<(Path, MInfo)>;
  overridable static fun empty(): FixedSourceMap {
    FSMImpl::empty()
  }
  overridable static fun create(
    data: mutable Vector<(Path, MInfo)>,
    allowDuplicates: Bool = false,
  ): FixedSourceMap {
    static::getMetadata(data) match {
    | Some(metadata) ->
      CompactFSMImpl::createWithMetadata(data, metadata, allowDuplicates)
    | None() -> FSMImpl::create(data, allowDuplicates)
    }
  }

  private static fun getMetadata(
    data: readonly Vector<(Path, MInfo)>,
  ): ?FSMMetadata {
    seenDirOpt: ?DirName = None();
    seenRowKindsOpt: ?Array<(Int, SQLParser.IKind, SQLParser.Type)> = None();
    seenMInfoTypeOpt: ?FSMMInfoType = None();

    for ((path, minfo) in data) {
      !seenDirOpt = seenDirOpt match {
      | None() -> Some(path.dirName)
      | Some(seenDir) if (seenDir != path.dirName) -> return None()
      | _ -> seenDirOpt
      };
      path.baseName match {
      | rowKey @ SKDB.RowKey(pathRow, rowKinds) ->
        !seenRowKindsOpt = seenRowKindsOpt match {
        | None() -> Some(rowKinds)
        | Some(seenRowKinds) if (rowKinds != seenRowKinds) -> return None()
        | _ -> seenRowKindsOpt
        };
        minfo match {
        | MInfoSingle(
          minfoKey @ SKDB.RowKey(SKDB.RowValues(minfoRow, _), minfoKinds),
        ) ->
          if (minfoKey == rowKey) {
            !seenMInfoTypeOpt = seenMInfoTypeOpt match {
            | None() -> Some(FullRow())
            | Some(FullRow()) -> seenMInfoTypeOpt
            | _ -> return None()
            }
          } else if (pathRow.values.size() == 1) {
            pathVal = pathRow.values[0];
            !seenMInfoTypeOpt = seenMInfoTypeOpt match {
            | None() ->
              col: ?Int = None();
              for (idx in Range(0, minfoRow.size())) {
                if (pathVal == minfoRow[idx]) {
                  !col = Some(idx);
                  break void
                }
              };
              col match {
              | Some(x) -> Some(Extension(x, minfoKinds))
              | _ -> return None()
              }
            | Some(
              Extension(col, extKinds),
            ) if (
              col < minfoRow.size() &&
              pathVal == minfoRow[col] &&
              extKinds == minfoKinds
            ) ->
              seenMInfoTypeOpt
            | _ -> return None()
            }
          } else {
            return None()
          }
        | MInfoSingle(SKDB.IndexProjKey(minfoRow, indexKinds)) ->
          if (minfoRow != pathRow) return None();
          !seenMInfoTypeOpt = seenMInfoTypeOpt match {
          | None() -> Some(IndexProjection(indexKinds))
          | Some(
            IndexProjection(seenIndexKinds),
          ) if (indexKinds == seenIndexKinds) ->
            seenMInfoTypeOpt
          | _ -> None()
          }
        | MInfoSingle(SKDB.ProjKey(_value, col, left, right)) ->
          !seenMInfoTypeOpt = seenMInfoTypeOpt match {
          | None() -> Some(Projection(col, left, right))
          | Some(
            Projection(pCol, pLeft, pRight),
          ) if (col == pCol && left == pLeft && right == pRight) ->
            seenMInfoTypeOpt
          | _ -> None()
          }
        | _ -> return None()
        }
      | _ -> return None()
      };
    };
    seenDirOpt.flatMap(dir ->
      seenRowKindsOpt.flatMap(rowKinds ->
        seenMInfoTypeOpt.map(minfoType -> FSMMetadata{dir, rowKinds, minfoType})
      )
    )
  }
}
// Direct implementation of a FixedSourceMap as a (sorted) array of Path/MInfo pairs
private class FSMImpl(
  protected data: FixedSingle<Path, MInfo>,
) extends FixedSourceMap {
  static fun create(
    data: mutable Vector<(Path, MInfo)>,
    allowDuplicates: Bool = false,
  ): this {
    static(FixedSingle::create(data, allowDuplicates))
  }
  fun maybeGet(key: Path): ?MInfo {
    this.data.maybeGet(key)
  }
  fun get(idx: Int): (Path, MInfo) {
    this.data.get(idx)
  }
  fun size(): Int {
    this.data.size()
  }
  fun items(): mutable Iterator<(Path, MInfo)> {
    this.data.items()
  }
  static fun empty(): this {
    static::create(Vector::mcreate(0))
  }
}

// Each FSMMInfoType class encodes a relationship between Paths' baseNames and
// corresponding MInfoSingles' keys in a CompactFSMImpl
base class FSMMInfoType {
  children =
  // Each RowKey maps to itself
  | FullRow()
  // Each RowKey maps to an IndexProjKey with the same rowValues but the specified
  // kinds array
  | IndexProjection(kinds: Array<(Int, SQLParser.IKind, SQLParser.Type)>)
  // Each RowKey maps to a ProjKey with the specified left/right shard and the
  // scalar value at position col in the rowKey.
  | Projection(col: Int, leftShard: Int, rightShard: Int)
  // Each RowKey is a singleton and maps to some larger RowKey with that singleton
  // value at position col
  | Extension(col: Int, kinds: Array<(Int, SQLParser.IKind, SQLParser.Type)>)
}

class FSMMetadata{
  dir: DirName,
  rowKinds: Array<(Int, SQLParser.IKind, SQLParser.Type)>,
  minfoType: FSMMInfoType,
}
// More-compact representation of a FixedSourceMap, with shared information
// extracted out of the individual key/val pairs and reconstructed on demand
private class CompactFSMImpl protected (
  metadata: FSMMetadata,
  data: Array<SKDB.RowValues>,
) extends FixedSourceMap {
  private fun reconstructMInfo(rowKey: SKDB.RowKey): MInfo {
    minfoKey = this.metadata.minfoType match {
    | FullRow() -> rowKey
    | IndexProjection(indexKinds) -> SKDB.IndexProjKey(rowKey.row, indexKinds)
    | Projection(col, leftShard, rightShard) ->
      SKDB.ProjKey(rowKey.row.values[col], col, leftShard, rightShard)
    | ext @ Extension _ -> return this.extendKey(rowKey, ext).fromSome()
    };
    MInfoSingle(minfoKey)
  }

  private fun extendKey(rowKey: SKDB.RowKey, extMetadata: Extension): ?MInfo {
    idx = binSearch(
      i ~> this.data.get(i).values[extMetadata.col],
      rowKey.row.values[0],
      0,
      this.size() - 1,
    );
    if (idx >= this.data.size()) None() else {
      Some(MInfoSingle(SKDB.RowKey(this.data.get(idx), extMetadata.kinds)))
    }
  }

  private fun reconstructKVPair(row: SKDB.RowValues): (Path, MInfo) {
    rowKey = SKDB.RowKey(row, this.metadata.rowKinds);
    path = Path(this.metadata.dir, rowKey);
    minfo = this.metadata.minfoType match {
    | ext @ Extension _ -> this.extendKey(rowKey, ext).fromSome()
    | _ -> this.reconstructMInfo(rowKey)
    };
    (path, minfo)
  }

  fun maybeGet(key: Path): ?MInfo {
    key.baseName match {
    | rowKey @ SKDB.RowKey(row, _kinds) ->
      this.metadata.minfoType match {
      | ext @ Extension _ -> this.extendKey(rowKey, ext)
      | _ ->
        idx = binSearch(this.data.get, row, 0, this.size() - 1);
        if (idx >= this.data.size() || row != this.data.get(idx)) None() else {
          Some(this.reconstructMInfo(rowKey))
        }
      }
    | _ -> None()
    }
  }

  fun get(idx: Int): (Path, MInfo) {
    this.reconstructKVPair(this.data.get(idx))
  }

  fun size(): Int {
    this.data.size()
  }

  fun items(): mutable Iterator<(Path, MInfo)> {
    for (row in this.data.iterator()) {
      yield this.reconstructKVPair(row)
    }
  }

  static fun createWithMetadata(
    data: mutable Vector<(Path, MInfo)>,
    metadata: FSMMetadata,
    allowDuplicates: Bool = false,
  ): this {
    strippedData = Vector::mcreateFromItems(
      data.map(datum ->
        if (metadata.minfoType is Extension _) {
          datum.i1 match {
          | MInfoSingle(SKDB.RowKey(values, _kinds)) -> values
          | _ -> invariant_violation("malformed data for Extension metadata")
          }
        } else {
          datum.i0.baseName match {
          | SKDB.RowKey(values, _kinds) -> values
          | _ ->
            invariant_violation(
              "getMetadata ensures all path basenames are RowKeys",
            )
          }
        }
      ),
    );
    strippedData.sortBy(x ~> x);
    if (!allowDuplicates) assertUnique(strippedData, x ~> x);
    static(metadata, strippedData.toArray())
  }
}

module end;
