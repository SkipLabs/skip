/*****************************************************************************/
/* Parsing the entries (used the option --write). */
/*****************************************************************************/

module SKStore;

/*****************************************************************************/
/* Escaping functions. */
/*****************************************************************************/

fun escape(str: String): String {
  output = mutable Vector[];
  for (c in str) {
    if (c == '\\') {
      output.push('\\');
      output.push('\\');
    } else if (c == '\t') {
      output.push('\\');
      output.push('t');
    } else if (c == '\n') {
      output.push('\\');
      output.push('n');
    } else if (c == '"') {
      output.push('\\');
      output.push('"');
    } else {
      output.push(c);
    }
  };
  String::fromChars(output.toArray())
}

fun unescape(input: readonly Vector<Char>): String {
  output = mutable Vector[];
  i = 0;
  while (i < input.size()) {
    input[i] match {
    | '\\' ->
      if (i + 1 >= input.size()) {
        output.push('\\');
        break void;
      };
      input[i + 1] match {
      | 't' ->
        output.push('\t');
        !i = i + 1
      | 'n' ->
        output.push('\n');
        !i = i + 1
      | '"' ->
        output.push('"');
        !i = i + 1
      | '\\' ->
        output.push('\\');
        !i = i + 1
      | _ -> output.push('\\')
      }
    | c -> output.push(c)
    };
    !i = i + 1;
  };
  String::fromChars(output.toArray())
}

fun getWriteKey(getChar: () -> Char): (?String, Bool) {
  chars = mutable Vector[];
  try {
    loop {
      c = getChar();
      if (c == '\\') {
        chars.push(c);
        continue
      };
      if (c == '\n') {
        break (None(), false);
      };
      if (c == '\t') {
        break (Some(unescape(chars)), false)
      };
      chars.push(c);
    }
  } catch {
  | _ -> (None(), true)
  }
}

fun getWriteValue(getChar: () -> Char): ?String {
  chars = mutable Vector[];
  try {
    first = getChar();
    if (first != '"') {
      None();
    } else {
      loop {
        c = getChar();
        if (c == '\\') {
          chars.push(c);
          continue
        };
        if (c == '\n') {
          break Some(unescape(chars.slice(0, chars.size() - 1)))
        };
        chars.push(c);
      }
    }
  } catch {
  | _ -> None()
  }
}

fun getWriteKeyValueIter(
  getChar: () -> Char,
): mutable Iterator<?(String, ?String)> {
  loop {
    (key, isFinished) = getWriteKey(getChar);
    key match {
    | Some(k) -> yield (Some((k, getWriteValue(getChar))))
    | None() if (!isFinished) -> yield None()
    | None() -> void
    };
    if (isFinished) {
      break void;
    }
  }
}

base class KVStreamOp {
  children =
  | KVSep()
  | KVAcc(keyName: String, valueName: ?String)
}

fun getWriteStreamOpIter(getChar: () -> Char): mutable Iterator<?KVStreamOp> {
  lastKeyOpt: ?String = None();

  for (currentOpt in getWriteKeyValueIter(getChar)) {
    currentOpt match {
    | None() ->
      !lastKeyOpt = None();
      yield None()
    | Some(current) ->
      if (current.i0 == "") {
        yield Some(KVSep());
      } else {
        lastKeyOpt match {
        | None() -> yield Some(KVAcc(current.i0, current.i1))
        | Some(lastKey) ->
          if (current.i0 != lastKey) {
            yield Some(KVSep())
          };
          yield Some(KVAcc(current.i0, current.i1))
        }
      };
      !lastKeyOpt = Some(current.i0)
    }
  };

  yield Some(KVSep())
}

fun getWriteKeyValuesIter(
  getChar: () -> Char,
): mutable Iterator<(String, Array<String>)> {
  keyOpt: ?String = Some("");
  values = mutable Vector[];
  for (opOpt in getWriteStreamOpIter(getChar)) {
    opOpt match {
    | None() ->
      values.clear();
      !keyOpt = None()
    | Some(op) ->
      op match {
      | KVSep() ->
        keyOpt match {
        | None() -> void
        | Some(key) -> yield (key, values.toArray())
        };
        values.clear()
      | KVAcc(k, value) ->
        !keyOpt = Some(k);
        value match {
        | None() -> values.clear()
        | Some(v) -> values.push(v)
        }
      }
    }
  }
}

module end;
