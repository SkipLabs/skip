extension base class Inspect {
  fun toJS(): JSObject
  | .InspectSpecial(v)
  | .InspectString(v)
  | .InspectLiteral(v) ->
    JSLeaf(v)
  | .InspectCall(name, elts)
  | .InspectVector(name, elts) ->
    JSComposite(name, elts.map(x -> x.toJS()))
  | .InspectMap(name, elts) ->
    JSComposite(
      name,
      elts.map(kv -> {
        (x, y) = kv;
        JSComposite("", Array[x.toJS(), y.toJS()])
      }),
    )
  | .InspectObject(name, elts) ->
    JSComposite(
      name,
      elts.map(kv -> {
        (x, y) = kv;
        JSComposite("", Array[JSLeaf(x), y.toJS()])
      }),
    )
}

base class JSObject {
  children =
  | JSLeaf(String)
  | JSComposite(String, Array<JSObject>)

  static fun create<T>(obj: T): JSObject {
    inspect(obj).toJS()
  }
}

@cpp_export("objectKind")
fun objectKind(obj: JSObject): Int32 {
  obj match {
  | JSLeaf _ -> Int32::truncate(0)
  | JSComposite _ -> Int32::truncate(1)
  }
}

@cpp_export("getLeafValue")
fun getLeafValue(obj: JSObject): String {
  obj match {
  | JSLeaf(v) -> v
  | JSComposite _ ->
    invariant_violation("Error: cannot call getStringValue on composite object")
  }
}

@cpp_export("getCompositeSize")
fun getCompositeSize(obj: JSObject): Int32 {
  obj match {
  | JSLeaf(_) ->
    invariant_violation(
      "Error: cannot call getCompositeSize on composite object",
    )
  | JSComposite(_, elts) -> Int32::truncate(elts.size())
  }
}

@cpp_export("getCompositeAt")
fun getCompositeAt(obj: JSObject, idx: Int32): JSObject {
  obj match {
  | JSLeaf(_) ->
    invariant_violation("Error: cannot call getCompositeAt on composite object")
  | JSComposite(_, elts) -> elts[idx.toInt()]
  }
}

@cpp_export("getCompositeName")
fun getCompositeName(obj: JSObject): String {
  obj match {
  | JSLeaf(_) ->
    invariant_violation(
      "Error: cannot call getCompositeName on composite object",
    )
  | JSComposite(name, _) -> name
  }
}
