module SQLParser;

value class Name private (
  lower: String,
  origName: String,
) uses Orderable, Hashable, Show {
  static fun create(value: String): this {
    static(value.lowercase(), value)
  }

  fun compare(y: Name): Order {
    this.lower.compare(y.lower)
  }

  fun hash(): Int {
    this.lower.hash()
  }

  fun toString(): String {
    this.origName
  }
}

base class Stmt{pos: Int = 0} uses Equality, Show {
  children =
  | BeginTransaction{kind: TransactionKind}
  | EndTransaction{}
  | CreateView{
    reactive: Bool,
    name: Name,
    ifNotExists: Bool,
    query: ViewDefinition,
  }
  | CreateIndex{
    ifNotExists: Bool,
    name: Name,
    on: Name,
    columns: Array<IndexedColumn>,
    unique: Bool,
    where: ?Expr,
  }
  | DropTable{name: Name, ifExists: Bool}
  | DropView{name: Name, ifExists: Bool}
  | DropIndex{name: Name, ifExists: Bool}
  | Delete{name: Name, alias: ?Name, where: ?Expr, indexed: ?Name}
  | Insert{
    onConflict: ?OnConflict,
    name: Name,
    alias: ?Name,
    paramsOpt: ?Array<Name>,
    values: InsertValues,
  }
  | Update{
    onConflict: ?OnConflict,
    name: Name,
    alias: ?Name,
    indexed: ?Name,
    sets: Array<UpdateSet>,
    from: ?SelectFrom,
    where: ?Expr,
  }
  | Pragma{name: Name, value: ?Value}
}

base class ViewDefinition uses Equality, Show {
  children =
  | SQuery(Select)
  | SCall(Name, Array<Expr>)

  fun toString(): String
  | SQuery(select) -> select.toString()
  | SCall(f, args) -> Call(f, args, false).toString()
}

class UpdateSet(columns: Array<(Int, Name)>, value: Expr) uses Equality, Show

base class CreateTable{ifNotExists: Bool, name: Name} extends Stmt {
  children =
  | CreateTableSchema{schema: TableSchema}
  | CreateTableAs{select: Select}
}

class TableSchema{
  columns: Array<ColumnDefinition>,
  constraints: Array<TableConstraint>,
  withoutRowid: Bool,
  strict: Bool,
} uses Equality

class ColumnDefinition{
  name: Name,
  // TODO: SQLite allows unspecified type.
  ty: Type,
  primary: ?CCPrimaryKey = None(),
  notNull: ?CCNotNull = None(),
  unique: ?CCUnique = None(),
  default: ?CCDefault = None(),
  check: ?CCCheck = None(),
  collate: ?CCCollate = None(),
  foreignKey: ?CCForeignKey = None(),
  generated: ?CCGenerated = None(),
} uses Equality, Show

// TODO: Add `pos` for better error messages.
base class ColumnConstraint{
  constraintName: ?Name = None(),
} uses Equality, Show {
  children =
  | CCPrimaryKey{
    order: IKind,
    autoincrement: Bool,
    onConflict: ?OnConflict = None(),
  }
  | CCNotNull{onConflict: ?OnConflict = None()}
  | CCUnique{onConflict: ?OnConflict = None()}
  | CCCheck{expr: Expr}
  | CCDefault{expr: Expr}
  | CCCollate{name: String}
  | CCForeignKey{references: ForeignKeyClause}
  | CCGenerated{expr: Expr, stored: Bool, reactive: Bool}
}

base class TableConstraint{constraintName: ?String} uses Equality {
  children =
  | TCPrimaryKey{columns: Array<IndexedColumn>, onConflict: ?OnConflict}
  | TCUnique{columns: Array<IndexedColumn>, onConflict: ?OnConflict}
  | TCCheck{expr: Expr}
  | TCForeignKey{columns: Array<Name>, references: ?ForeignKeyClause}
}

class IndexedColumn{
  expr: Expr,
  collate: ?Name,
  order: IKind,
} uses Equality, Show

// TODO
class ForeignKeyClause{} uses Equality

base class OnConflict uses Equality, Show {
  children =
  | OCIgnore()
  | OCReplace()
  | OCUpdate(Update)
}

base class InsertValues uses Equality, Show {
  children =
  | IValues(Array<Array<Expr>>)
  | IQuery(Select)
  | IDefault()
}

base class IKind uses Orderable, Show {
  children =
  | INONE()
  | IASC()
  | IDESC()
}

class Select{
  core: SelectCore,
  orderBy: ?Array<(Expr, IKind)>,
  limit: ?Expr,
  rest: Array<(CompoundOperator, SelectCore)>,
} extends Stmt

base class SelectCore uses Equality, Show {
  children =
  | SelectCoreQuery{
    distinct: Bool,
    params: Array<SelectResult>,
    from: ?SelectFrom,
    where: ?Expr,
    groupBy: ?Array<Expr>,
    having: ?Expr,
  }
  | SelectCoreValues{values: Array<Array<Expr>>}
}

base class SelectResult uses Equality, Show {
  children =
  | SelectStar(table: ?Name)
  | SelectExpr(expr: Expr, alias: ?Name)
}

base class SelectFrom uses Equality, Show

base class SelectSource{asName: ?Name} extends SelectFrom {
  children =
  // TODO: Indexed should be an index name.
  | FromTable{name: Name, indexed: Bool = false}
  | FromQuery{select: Select}
}

class Join{
  kind: JoinKind,
  lhs: SelectFrom,
  rhs: SelectFrom,
  on: ?Expr,
  using: ?Array<Name>,
} extends SelectFrom

base class JoinKind uses Orderable, Hashable, Show {
  children =
  | JLeft(natural: Bool)
  | JRight(natural: Bool)
  | JFull(natural: Bool)
  | JInner(natural: Bool)
  | JCross()
  | JComma()
}

base class CompoundOperator uses Orderable, Show {
  children =
  | COUnion()
  | COUnionAll()
  | COIntersect()
  | COExcept()
}

base class Value extends Expr {
  children =
  | VNull()
  | VInt(Int)
  | VFloat(Float)
  | VString(String)
  | VSeqNum(Bool, ?String)
  | VId(?String)
  | VCurrentTime()
  | VCurrentDate()
  | VCurrentTimestamp()
  | VParam(String)
  | VPermission(Value)
  | VJSON(String)
}

base class Expr uses Equality, Show {
  children =
  | In(Expr, InValues, negated: Bool)
  | Between(Expr, Expr, Expr, negated: Bool)
  | Like(Expr, Expr, escape: ?Expr, negated: Bool)
  | On(JoinKind, Expr)
  | BinOp(BinaryOperator, Expr, Expr)
  | Subquery(Select)
  | Exists(Select, negated: Bool)
  | UnOp(UnaryOperator, Expr)
  | Tuple(Array<Expr>)
  | Case(condOpt: ?Expr, whenCases: Array<(Expr, Expr)>, elseCase: ?Expr)
  | Call(Name, Array<Expr>, distinct: Bool)
  | Cast(Expr, Type)
  | Collate(Expr, Name)
}

class Identifier(
  name: Name,
  table: ?Name = None(),
) extends Expr uses Hashable, Show

base class UnaryOperator uses Equality, Show {
  children =
  | UnaryNot()
  | UnaryPlus()
  | UnaryMinus()
  | UnaryBitNot()
  | UnaryIsNull(negated: Bool)
}

base class BinaryOperator uses Equality, Show {
  children =
  | OPlus()
  | OMinus()
  | OConcat()
  //  | OArrow() // (->)
  //  | OLongArrow() // (->>)
  | OMul()
  | ODiv()
  | OMod()
  | OBitAnd()
  | OBitOr()
  | OBitShiftLeft()
  | OBitShiftRight()
  | OAnd()
  | OOr()
  | OLt()
  | OLtEq()
  | OGt()
  | OGtEq()
  | OEq()
  | ONeq()
  | OIs(negated: Bool)
  | OGlob(negated: Bool)
  | ORegexp(negated: Bool)
  | OMatch(negated: Bool)

  static fun fromString(str: String): BinaryOperator {
    str match {
    | "+" -> OPlus()
    | "-" -> OMinus()
    | "||" -> OConcat()
    //  | OArrow() // (->)
    //  | OLongArrow() // (->>)
    | "*" -> OMul()
    | "/" -> ODiv()
    | "%" -> OMod()
    | "&" -> OBitAnd()
    | "|" -> OBitOr()
    | "<<" -> OBitShiftLeft()
    | ">>" -> OBitShiftRight()
    | "AND" -> OAnd()
    | "OR" -> OOr()
    | "<" -> OLt()
    | "<=" -> OLtEq()
    | ">" -> OGt()
    | ">=" -> OGtEq()
    | "=" | "==" -> OEq()
    | "!=" | "<>" -> ONeq()
    | "IS NOT" -> OIs(true)
    | "IS" -> OIs(false)
    | "NOT GLOB" -> OGlob(true)
    | "GLOB" -> OGlob(false)
    | "NOT REGEXP" -> ORegexp(true)
    | "REGEXP" -> ORegexp(false)
    | "NOT MATCH" -> OMatch(true)
    | "MATCH" -> OMatch(false)
    | _ -> invariant_violation("Unrecognized binary op: " + str)
    }
  }
}

base class InValues uses Equality, Show {
  children =
  | InList(Array<Expr>)
  | InSelect(Select)
}

base class Type uses Orderable, Show {
  children =
  | FLOAT()
  | INTEGER()
  | TEXT()
  | JSON()
  | SCHEMA()
}

base class TransactionKind uses Equality, Show {
  children =
  | TransactionDeferred()
  | TransactionImmediate()
  | TransactionExclusive()
}

/*****************************************************************************/
/* Looks for an aggregate function. */
/*****************************************************************************/

fun hasAggr(expr: Expr): Bool {
  expr match {
  | Value _ -> false
  | Identifier _ -> false
  | Between(e, _, _, _)
  | UnOp(_, e) ->
    hasAggr(e)
  | In(e, InList(arr), _) ->
    hasAggr(e) ||
      for (x in arr) {
        if (hasAggr(x)) break true;
      } else {
        false
      }
  | In(_, InSelect _, _) -> invariant_violation("IN SELECT not implemented")
  | BinOp(_, e1, e2)
  | Like(e1, e2, _, _) ->
    hasAggr(e1) || hasAggr(e2)
  | On(_, e) -> hasAggr(e)
  | Subquery(_)
  | Exists _ ->
    false
  | Case(condOpt, whenCases, elseCase) ->
    condOpt match {
    | Some(e) if (hasAggr(e)) -> return true
    | _ -> void
    };
    for (kv in whenCases) {
      (e1, e2) = kv;
      if (hasAggr(e1) || hasAggr(e2)) return true;
    };
    elseCase match {
    | Some(e) if (hasAggr(e)) -> true
    | _ -> false
    }
  | Call(fname, args, _) ->
    if (Array["min", "max", "sum", "avg", "count"].contains(fname.lower)) {
      return true
    };
    for (e in args) {
      if (hasAggr(e)) return true
    };
    false
  | Cast(e, _) -> hasAggr(e)
  | Tuple(values) -> values.any(hasAggr)
  | Collate(e, _) -> hasAggr(e)
  }
}

fun selectIsAggr(select: SelectCore): Bool {
  select match {
  | SelectCoreValues _ -> false
  | SelectCoreQuery{groupBy, params} ->
    groupBy is Some _ ||
      {
        for (param in params) {
          param match {
          | SelectExpr(e, _) if (hasAggr(e)) -> return true
          | _ -> void
          }
        };
        false
      }
  }
}

fun selectIsEmptyFrom(select: SelectCore): Bool {
  select match {
  | SelectCoreQuery{from => Some _} -> false
  | _ -> true
  }
}

fun selectOrRestIsAggrOrEmptyFrom(select: Select): Bool {
  selectIsAggr(select.core) ||
    selectIsEmptyFrom(select.core) ||
    select.rest.any(x -> selectIsAggr(x.i1) || selectIsEmptyFrom(x.i1))
}

module end;
