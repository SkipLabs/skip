module SkipRuntime;

base class Reducer<V1: frozen, V2: frozen>() {
  fun getType(): SKStore.File ~> V2;
  fun init(): V2;
  fun add(acc: V2, value: V1): V2;
  fun remove(acc: V2, value: V1): ?V2;
}

/**
 * The type of a reactive function mapping over an arbitrary collection.
 * For each key & values in the input collection (of type K1/V1 respectively),
 * produces some key/value pairs for the output collection (of type K2/V2 respectively)
 * @param key - a key found in the input collection
 * @param values - the values mapped to by `key` in the input collection
 * @returns an iterable of key/value pairs to output for the given input(s)
 */
base class Mapper {
  fun mapEntry(
    key: SKJSON.CJSON,
    values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
  ): mutable Iterator<(SKJSON.CJSON, SKJSON.CJSON)>;
}

base class LazyCompute {
  fun compute(self: LazyCollection, key: SKJSON.CJSON): Array<SKJSON.CJSON>;
}

base class Resource {
  fun instantiate(collections: Map<String, Collection>): Collection;
}

base class Service {
  fun inputs(): Array<String>;

  fun initialData(name: String): Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>;

  fun resources(): Array<String>;

  fun buildResource(name: String, parameters: SKJSON.CJSON): Resource;

  fun subscribe(
    external: String,
    instance: String,
    collection: CollectionWriter,
    resource: String,
    params: SKJSON.CJSON,
  ): void;

  fun unsubscribe(external: String, instance: String): void;

  fun shutdown(): Float;

  fun createGraph(
    inputCollections: Map<String, Collection>,
  ): Map<String, Collection>;
}

value class Values(
  values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
  watermark: String,
)

base class Executor {
  fun resolve(): void;
  fun reject(exc: .Exception): void;
}

base class IntExecutor {
  fun resolve(value: Int): void;
  fun reject(exc: .Exception): void;
}

base class Notifier {
  fun subscribed(): void;

  fun notify(
    values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
    watermark: String,
    updates: Bool,
  ): void;

  fun close(): void;
}

module end;
