module SkipRuntime;

@cpp_extern("SkipRuntime_getErrorHdl")
@debug
native fun getErrorHdl(exn: .Exception): Float;

/************  NonEmptyIterator ****************/

@export("SkipRuntime_NonEmptyIterator__next")
fun nextOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): ?SKJSON.CJSON {
  values.next()
}

/************  Mapper ****************/

@cpp_extern("SkipRuntime_Mapper__mapEntry")
@debug
native fun mapEntryOfMapper(
  mapper: UInt32,
  key: SKJSON.CJSON,
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): SKJSON.CJArray;

@cpp_extern("SkipRuntime_deleteMapper")
@debug
native fun deleteMapper(mapper: UInt32): void;

@export("SkipRuntime_createMapper")
fun createMapper(mapper: UInt32): ExternMapper {
  ExternMapper(SKStore.ExternalPointer::create(mapper, deleteMapper))
}

class ExternMapper(eptr: SKStore.ExternalPointer) extends Mapper {
  fun mapEntry(
    key: SKJSON.CJSON,
    values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
  ): mutable Iterator<(SKJSON.CJSON, SKJSON.CJSON)> {
    mapEntryOfMapper(this.eptr.value, key, values) match {
    | SKJSON.CJArray(vals) ->
      vals
        .map(e ->
          e match {
          | SKJSON.CJArray(av) ->
            optKey = av.maybeGet(0);
            optVal = av.maybeGet(1);
            (optKey, optVal) match {
            | (Some(rkey), Some(rval)) -> (rkey, rval)
            | _ -> invariant_violation("Invalid entry.")
            }
          | _ -> invariant_violation("Invalid entry.")
          }
        )
        .iterator()
    }
  }
}

/************  LazyCompute ****************/

@cpp_extern("SkipRuntime_LazyCompute__compute")
@debug
native fun computeOfLazyCompute(
  lazyCompute: UInt32,
  self: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern("SkipRuntime_deleteLazyCompute")
@debug
native fun deleteLazyCompute(lazyCompute: UInt32): void;

@export("SkipRuntime_createLazyCompute")
fun createLazyCompute(lazyCompute: UInt32): ExternLazyCompute {
  ExternLazyCompute(
    SKStore.ExternalPointer::create(lazyCompute, deleteLazyCompute),
  )
}

class ExternLazyCompute(eptr: SKStore.ExternalPointer) extends LazyCompute {
  fun compute(self: LazyCollection, key: SKJSON.CJSON): Array<SKJSON.CJSON> {
    computeOfLazyCompute(this.eptr.value, self.getId(), key) match {
    | SKJSON.CJArray(value) -> value
    | _ -> invariant_violation("Invalid computed value.")
    }
  }
}

/************  CollectionWriter ****************/

@export("SkipRuntime_CollectionWriter__update")
fun updateOfCollectionWriter(
  collection: String,
  values: SKJSON.CJArray,
  isInit: Int32,
  executor: Executor,
): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.update(
    values match {
    | SKJSON.CJArray(vs) ->
      vs.map(v -> {
        e = SKJSON.expectArray(v);
        (e[0], SKJSON.expectArray(e[1]))
      })
    },
    isInit != 0,
    executor,
  ) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_CollectionWriter__initialized")
fun initializedOfCollectionWriter(
  collection: String,
  error: SKJSON.CJSON,
): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.initialized(error) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_CollectionWriter__error")
fun errorOfCollectionWriter(collection: String, error: SKJSON.CJSON): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.error(error) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************  Resource ****************/

@cpp_extern("SkipRuntime_Resource__instantiate")
@debug
native fun instantiateOfResource(
  resource: UInt32,
  collections: SKJSON.CJObject,
): String;

@cpp_extern("SkipRuntime_deleteResource")
@debug
native fun deleteResource(resource: UInt32): void;

@export("SkipRuntime_createResource")
fun createResource(resource: UInt32): ExternResource {
  ExternResource(SKStore.ExternalPointer::create(resource, deleteResource))
}

class ExternResource(eptr: SKStore.ExternalPointer) extends Resource {
  fun instantiate(collections: Map<String, Collection>): Collection {
    collectionName = instantiateOfResource(
      this.eptr.value,
      collectionsByName(collections),
    );
    collectionForName(collectionName)
  }
}

/************  Executor ****************/

@cpp_extern("SkipRuntime_Executor__resolve")
@debug
native fun resolveOfExecutor(executor: UInt32): void;

@cpp_extern("SkipRuntime_Executor__reject")
@debug
native fun rejectOfExecutor(executor: UInt32, errorHandle: Float): void;

@cpp_extern("SkipRuntime_deleteExecutor")
@debug
native fun deleteExecutor(mapper: UInt32): void;

@export("SkipRuntime_createExecutor")
fun createExecutor(executor: UInt32): ExternExecutor {
  ExternExecutor(SKStore.ExternalPointer::create(executor, deleteExecutor))
}

class ExternExecutor(eptr: SKStore.ExternalPointer) extends Executor {
  fun resolve(): void {
    resolveOfExecutor(this.eptr.value)
  }

  fun reject(exc: .Exception): void {
    rejectOfExecutor(this.eptr.value, getErrorHdl(exc))
  }
}

@cpp_extern("SkipRuntime_IntExecutor__resolve")
@debug
native fun resolveOfIntExecutor(executor: UInt32, value: Int): void;

@export("SkipRuntime_createIntExecutor")
fun createIntExecutor(executor: UInt32): ExternIntExecutor {
  ExternIntExecutor(SKStore.ExternalPointer::create(executor, deleteExecutor))
}

class ExternIntExecutor(eptr: SKStore.ExternalPointer) extends IntExecutor {
  fun resolve(value: Int): void {
    resolveOfIntExecutor(this.eptr.value, value)
  }

  fun reject(exc: .Exception): void {
    rejectOfExecutor(this.eptr.value, getErrorHdl(exc))
  }
}

/************  Service ****************/

@export("SkipRuntime_createService")
fun createService(service: UInt32): ExternService {
  ExternService(SKStore.ExternalPointer::create(service, deleteService))
}

@cpp_extern("SkipRuntime_deleteService")
@debug
native fun deleteService(service: UInt32): void;

@cpp_extern("SkipRuntime_ServiceDefinition__createGraph")
@debug
native fun createGraphOfService(
  service: UInt32,
  collections: SKJSON.CJObject,
): SKJSON.CJObject;

@cpp_extern("SkipRuntime_ServiceDefinition__inputs")
@debug
native fun inputsOfService(service: UInt32): SKJSON.CJArray;

@cpp_extern("SkipRuntime_ServiceDefinition__initialData")
@debug
native fun initialDataOfService(service: UInt32, input: String): SKJSON.CJArray;

@cpp_extern("SkipRuntime_ServiceDefinition__resources")
@debug
native fun resourcesOfService(service: UInt32): SKJSON.CJArray;

@cpp_extern("SkipRuntime_ServiceDefinition__buildResource")
@debug
native fun buildResourceOfService(
  service: UInt32,
  resource: String,
  params: SKJSON.CJSON,
): Resource;

@cpp_extern("SkipRuntime_ServiceDefinition__subscribe")
@debug
native fun subscribeOfService(
  service: UInt32,
  supplier: String,
  collection: String,
  instance: String,
  resource: String,
  params: SKJSON.CJSON,
): void;

@cpp_extern("SkipRuntime_ServiceDefinition__unsubscribe")
@debug
native fun unsubscribeOfService(
  service: UInt32,
  supplier: String,
  instance: String,
): void;

@cpp_extern("SkipRuntime_ServiceDefinition__shutdown")
@debug
native fun shutdownOfService(service: UInt32): Float;

class ExternService(eptr: SKStore.ExternalPointer) extends Service {
  //
  fun inputs(): Array<String> {
    SKJSON.expectArray(inputsOfService(this.eptr.value)).map(SKJSON.asString)
  }

  fun initialData(name: String): Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)> {
    values = initialDataOfService(this.eptr.value, name);
    SKJSON.expectArray(values).map(v -> {
      e = SKJSON.expectArray(v);
      (e[0], SKJSON.expectArray(e[1]))
    })
  }

  fun resources(): Array<String> {
    SKJSON.expectArray(resourcesOfService(this.eptr.value)).map(SKJSON.asString)
  }

  fun buildResource(name: String, parameters: SKJSON.CJSON): Resource {
    buildResourceOfService(this.eptr.value, name, parameters)
  }

  fun createGraph(inputs: Map<String, Collection>): Map<String, Collection> {
    names = createGraphOfService(this.eptr.value, collectionsByName(inputs));
    map = mutable Map[];
    names match {
    | SKJSON.CJObject(nfields) ->
      for (fieldName => field in nfields) {
        map![fieldName] = collectionForName(SKJSON.asString(field));
      }
    };
    map.chill()
  }

  fun subscribe(
    supplier: String,
    instance: String,
    collection: CollectionWriter,
    resource: String,
    params: SKJSON.CJSON,
  ): void {
    subscribeOfService(
      this.eptr.value,
      supplier,
      collection.dirName.toString(),
      instance,
      resource,
      params,
    )
  }

  fun unsubscribe(supplier: String, instance: String): void {
    unsubscribeOfService(this.eptr.value, supplier, instance)
  }

  fun shutdown(): Float {
    shutdownOfService(this.eptr.value)
  }
}

/************  Collection ****************/

@export("SkipRuntime_Collection__getArray")
fun getArrayOfCollection(
  collection: String,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  SKJSON.CJArray(collectionForName(collection).getArray(key))
}

@export("SkipRuntime_Collection__map")
fun mapOfCollection(collection: String, mapper: Mapper): String {
  collectionForName(collection).map(mapper).getId()
}

@export("SkipRuntime_Collection__mapReduce")
fun mapReduceOfCollection(
  collection: String,
  mapper: Mapper,
  reducer: JSONReducer,
): String {
  collectionForName(collection).mapReduce(Some(mapper), reducer).getId()
}

@export("SkipRuntime_Collection__nativeMapReduce")
fun nativeMapReduce(
  collection: String,
  mapper: Mapper,
  reducer: String,
): String {
  collectionForName(collection).nativeMapReduce(Some(mapper), reducer).getId()
}

@export("SkipRuntime_Collection__reduce")
fun reduceOfCollection(collection: String, reducer: JSONReducer): String {
  collectionForName(collection).mapReduce(None(), reducer).getId()
}

@export("SkipRuntime_Collection__nativeReduce")
fun nativeReduceOfCollection(collection: String, reducer: String): String {
  collectionForName(collection).nativeMapReduce(None(), reducer).getId()
}

@export("SkipRuntime_Collection__slice")
fun sliceOfCollection(collection: String, ranges: SKJSON.CJArray): String {
  collectionForName(collection)
    .sliced(
      ranges match {
      | SKJSON.CJArray(values) ->
        values.map(v -> {
          e = SKJSON.expectArray(v);
          (e[0], e[1])
        })
      },
    )
    .getId()
}

@export("SkipRuntime_Collection__take")
fun takeOfCollection(collection: String, limit: Int): String {
  collectionForName(collection).take(limit).getId()
}

@export("SkipRuntime_Collection__merge")
fun mergeOfCollection(collection: String, others: SKJSON.CJArray): String {
  collectionForName(collection)
    .merge(
      others match {
      | SKJSON.CJArray(values) ->
        values.map(c -> collectionForName(SKJSON.asString(c)))
      },
    )
    .getId()
}

@export("SkipRuntime_Collection__size")
fun sizeOfCollection(collection: String): Int {
  collectionForName(collection).size()
}

/************  LazyCollection ****************/

@export("SkipRuntime_LazyCollection__getArray")
fun getArrayOfLazyCollection(lazy: String, key: SKJSON.CJSON): SKJSON.CJArray {
  SKJSON.CJArray(lazyForName(lazy).getArray(key))
}

/************  Notifier ****************/

@cpp_extern("SkipRuntime_Notifier__subscribed")
@debug
native fun subscribedOfNotifier(notifier: UInt32): void;

@cpp_extern("SkipRuntime_Notifier__notify")
@debug
native fun notifyOfNotifier(
  notifier: UInt32,
  values: SKJSON.CJArray,
  watermark: String,
  updates: Int32,
): void;

@cpp_extern("SkipRuntime_Notifier__close")
@debug
native fun closeOfNotifier(notifier: UInt32): void;

@cpp_extern("SkipRuntime_deleteNotifier")
@debug
native fun deleteNotifier(notifier: UInt32): void;

@export("SkipRuntime_createNotifier")
fun createNotifier(notifier: UInt32): Notifier {
  ExternNotifier(SKStore.ExternalPointer::create(notifier, deleteNotifier))
}

class ExternNotifier(eptr: SKStore.ExternalPointer) extends Notifier {
  fun subscribed(): void {
    subscribedOfNotifier(this.eptr.value)
  }

  fun notify(
    values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
    watermark: String,
    updates: Bool,
  ): void {
    notifyOfNotifier(
      this.eptr.value,
      SKJSON.CJArray(
        values.map(v -> SKJSON.CJArray(Array[v.i0, SKJSON.CJArray(v.i1)])),
      ),
      watermark,
      Int32::truncate(if (updates) 1 else 0),
    )
  }

  fun close(): void {
    closeOfNotifier(this.eptr.value)
  }
}

/************  Reducer ****************/

@cpp_extern("SkipRuntime_Reducer__add")
@debug
native fun addOfReducer(
  reducer: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern("SkipRuntime_Reducer__remove")
@debug
native fun removeOfReducer(
  reducer: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): ?SKJSON.CJSON;

@cpp_extern("SkipRuntime_Reducer__init")
@debug
native fun initOfReducer(reducer: UInt32): SKJSON.CJSON;

@cpp_extern("SkipRuntime_deleteReducer")
@debug
native fun deleteReducer(reducer: UInt32): void;

@export("SkipRuntime_createReducer")
fun createReducer(reducer: UInt32): JSONReducer {
  JSONReducer(SKStore.ExternalPointer::create(reducer, deleteReducer))
}

class JSONReducer(
  eptr: SKStore.ExternalPointer,
) extends Reducer<SKJSON.CJSON, SKJSON.CJSON> {
  fun getType(): SKStore.File ~> SKJSON.CJSON {
    f ~> JSONFile::type(f).json
  }

  fun init(): SKJSON.CJSON {
    initOfReducer(this.eptr.value)
  }

  fun add(acc: SKJSON.CJSON, value: SKJSON.CJSON): SKJSON.CJSON {
    addOfReducer(this.eptr.value, acc, value)
  }

  fun remove(acc: SKJSON.CJSON, value: SKJSON.CJSON): ?SKJSON.CJSON {
    removeOfReducer(this.eptr.value, acc, value)
  }
}

/************  Runtime ****************/

@export("SkipRuntime_Runtime__createResource")
fun createResourceOfRuntime(
  identifier: String,
  resource: String,
  params: SKJSON.CJSON,
  executor: Executor,
): Float {
  SKStore.runWithResult(context ~> {
    createReactiveResource(context, identifier, resource, params, executor)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__resourceInstances")
fun resourceInstancesOfRuntime(jsResources: SKJSON.CJSON): SKJSON.CJArray {
  SKStore.runWithResult(context ~> {
    resources = SKJSON.expectArray(jsResources).map(SKJSON.asString);
    instances = resourceInstances(
      context,
      SortedSet::createFromItems(resources),
    );
    SKJSON.CJArray(
      instances.map(def -> {
        SKJSON.CJObject(
          SKJSON.CJFields::create(
            Array<(String, SKJSON.CJSON)>[
              ("resource", SKJSON.CJString(def.name)),
              ("params", def.params),
            ],
            x -> x,
          ),
        )
      }),
    )
  }) match {
  | Success(arr) -> arr
  | Failure(err) -> throw err
  };
}

@export("SkipRuntime_Runtime__reloadResource")
fun reloadResourceOfRuntime(
  resource: String,
  params: SKJSON.CJSON,
  executor: IntExecutor,
): Float {
  SKStore.runWithResult(context ~> {
    reloadResource(context, resource, params, executor)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__replaceActiveResources")
fun replaceActiveResourcesOfRuntime(jsResources: SKJSON.CJSON): Float {
  SKStore.runWithResult(context ~> {
    resources = SKJSON.expectArray(jsResources).map(jsvalue -> {
      obj = SKJSON.asObject(jsvalue);
      ResourceDef(
        SKJSON.getString(obj, "resource").fromSome("resource must be defined."),
        SKJSON.getValue(obj, "params").fromSome("params must be defined."),
        SKJSON.getValue(obj, "instance")
          .map(v -> SKJSON.asNumber(v).toInt())
          .fromSome("instance must be defined."),
      )
    });
    replaceActiveResources(context, resources)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__destroyResources")
fun destroyResourcesOfRuntime(jsResources: SKJSON.CJSON): Float {
  SKStore.runWithResult(context ~> {
    resources = SKJSON.expectArray(jsResources).map(jsvalue -> {
      obj = SKJSON.asObject(jsvalue);
      ResourceDef(
        SKJSON.getString(obj, "resource").fromSome("resource must be defined."),
        SKJSON.getValue(obj, "params").fromSome("params must be defined."),
        SKJSON.getValue(obj, "instance")
          .map(v -> SKJSON.asNumber(v).toInt())
          .fromSome("instance must be defined."),
      )
    });
    destroyResources(context, resources)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__getAll")
fun getAllOfRuntime(resource: String, params: SKJSON.CJSON): SKJSON.CJSON {
  SKStore.runWithResult(context ~> {
    res = getAll(context, resource, params);
    /* Ensure all resources closed at right time */
    updateContext(context);
    res
  }) match {
  | Success(result) ->
    fields = mutable Vector<(String, SKJSON.CJSON)>[
      (
        "payload",
        SKJSON.CJArray(
          result.values.values.map(v ->
            SKJSON.CJArray(Array[v.i0, SKJSON.CJArray(v.i1)])
          ),
        ),
      ),
      ("errors", SKJSON.CJArray(result.errors)),
    ];
    SKJSON.CJObject(
      SKJSON.CJFields::create(fields.sortedBy(x ~> x.i0).toArray(), x -> x),
    )
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  }
}

@export("SkipRuntime_Runtime__getForKey")
fun getForKeyOfRuntime(
  resource: String,
  params: SKJSON.CJSON,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  SKStore.runWithResult(context ~> {
    res = getForKey(context, resource, params, key);
    /* Ensure all resources closed at right time */
    updateContext(context);
    res
  }) match {
  | Success(result) ->
    fields = mutable Vector<(String, SKJSON.CJSON)>[
      ("payload", SKJSON.CJArray(result.values)),
      ("errors", SKJSON.CJArray(result.errors)),
    ];
    SKJSON.CJObject(
      SKJSON.CJFields::create(fields.sortedBy(x ~> x.i0).toArray(), x -> x),
    )
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_Runtime__closeResource")
fun closeResourceOfRuntime(identifier: String): Float {
  SKStore.runWithResult(context ~> {
    closeReactiveResource(context, identifier)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__subscribe")
fun subscribeOfRuntime(
  reactiveId: String,
  notifier: Notifier,
  watermark: ?String,
): Int {
  SKStore.runWithResult(context ~> {
    subscribe(context, reactiveId, notifier, watermark)
  }) match {
  | Success(id) -> id
  | Failure(err) -> -getErrorHdl(err).toInt()
  };
}

@export("SkipRuntime_Runtime__unsubscribe")
fun unsubscribeOfRuntime(session: Int): Float {
  SKStore.runWithResult(context ~> {
    unsubscribe(context, session)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__update")
fun updateOfRuntime(
  input: String,
  values: SKJSON.CJArray,
  executor: Executor,
): Float {
  SKStore.runWithResult(context ~> {
    update(
      context,
      input,
      values match {
      | SKJSON.CJArray(vs) ->
        vs.map(v -> {
          e = SKJSON.expectArray(v);
          (e[0], SKJSON.expectArray(e[1]))
        })
      },
      executor,
    )
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************ Context ****************/

@export("SkipRuntime_Context__createLazyCollection")
fun lazyOfContext(compute: LazyCompute): String {
  createLazyCollection(compute).getId()
}

@export("SkipRuntime_Context__jsonExtract")
fun jsonExtractOfContext(
  from: SKJSON.CJObject,
  pattern: String,
): SKJSON.CJArray {
  SKJSON.CJArray(jsonExtract(from, pattern))
}

@export("SkipRuntime_Context__useExternalResource")
fun useExternalResource(
  service: String,
  identifier: String,
  params: SKJSON.CJSON,
): String {
  useExternalCollection(service, identifier, params).getId()
}

/************ initService ****************/

@export("SkipRuntime_initService")
fun initSkipRuntimeService(service: Service, executor: Executor): Float {
  initService(service, executor) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************ closeService ****************/

@export("SkipRuntime_closeService")
fun closeSkipRuntimeService(): Float {
  closeService() match {
  | Success(handle) -> handle
  | Failure(err) -> -getErrorHdl(err)
  };
}

/************ invalidateCollections ****************/

@export("SkipRuntime_invalidateCollections")
fun invalidateCollectionsOfSkipRuntime(collections: SKJSON.CJArray): Float {
  invalidateCollections(collections) match {
  | Success(_) -> 0.0
  | Failure(err) -> getErrorHdl(err)
  }
}

class ExternalException(
  type: String,
  message: String,
  stack: String,
) extends .Exception {
  fun getMessage(): String {
    this.message
  }
}

@export("SkipRuntime_throwExternalException")
fun throwExternalException(type: String, message: String, stack: String): void {
  throw ExternalException(type, message, stack)
}

@export("SkipRuntime_getExceptionStack")
fun getExceptionStack(exn: .Exception): ?String {
  exn match {
  | ExternalException(_, _, stack) -> Some(stack)
  | _ -> None()
  }
}

@export("SkipRuntime_getExceptionType")
fun getExceptionType(exn: .Exception): String {
  exn match {
  | ExternalException(type, _, _) -> type
  | _ -> exn.getClassName()
  }
}

module end;
