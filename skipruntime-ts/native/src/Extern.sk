module SkipRuntime;

@cpp_extern("SkipRuntime_getErrorHdl")
@debug
native fun getErrorHdl(exn: .Exception): Float;

@cpp_extern("SkipRuntime_pushContext")
native fun pushContext(context: mutable SKStore.Context): void;

@cpp_extern("SkipRuntime_popContext")
native fun popContext(): void;

@cpp_extern("SkipRuntime_getContext")
native fun getContext(): ?mutable SKStore.Context;

/************  NonEmptyIterator ****************/

@export("SkipRuntime_NonEmptyIterator__first")
fun firstOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): SKJSON.CJSON {
  if (values.isPastFirstValue) {
    throw SKStore.Error(
      "`first` can't be called after `next` on a NonEmptyIterator",
    )
  };
  values.first
}

@export("SkipRuntime_NonEmptyIterator__uniqueValue")
fun uniqueValueOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): ?SKJSON.CJSON {
  value = values.next();
  if (values.next().isSome()) None() else value
}

@export("SkipRuntime_NonEmptyIterator__next")
fun nextOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): ?SKJSON.CJSON {
  values.next()
}

@export("SkipRuntime_NonEmptyIterator__clone")
fun cloneOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): mutable SKStore.NonEmptyIterator<SKJSON.CJSON> {
  values.clone()
}

/************  Mapper ****************/

@cpp_extern("SkipRuntime_Mapper__mapEntry")
@debug
native fun mapEntryOfMapper(
  mapper: UInt32,
  key: SKJSON.CJSON,
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): SKJSON.CJArray;

@cpp_extern("SkipRuntime_deleteMapper")
@debug
native fun deleteMapper(mapper: UInt32): void;

@export("SkipRuntime_createMapper")
fun createMapper(mapper: UInt32): ExternMapper {
  ExternMapper(SKStore.ExternalPointer::create(mapper, deleteMapper))
}

class ExternMapper(eptr: SKStore.ExternalPointer) extends Mapper {
  fun getKeyConverter(): KeyConverter {
    JSONKeyConverter()
  }

  fun getFileConverter(): FileConverter {
    JSONFileConverter()
  }

  fun mapEntry(
    key: SKJSON.CJSON,
    values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
  ): mutable Iterator<(SKJSON.CJSON, SKJSON.CJSON)> {
    mapEntryOfMapper(this.eptr.value, key, values) match {
    | SKJSON.CJArray(vals) ->
      vals
        .map(e ->
          e match {
          | SKJSON.CJArray(av) ->
            optKey = av.maybeGet(0);
            optVal = av.maybeGet(1);
            (optKey, optVal) match {
            | (Some(rkey), Some(rval)) -> (rkey, rval)
            | _ -> invariant_violation("Invalid entry.")
            }
          | _ -> invariant_violation("Invalid entry.")
          }
        )
        .iterator()
    }
  }
}

/************  LazyCompute ****************/

@cpp_extern("SkipRuntime_LazyCompute__compute")
@debug
native fun computeOfLazyCompute(
  lazyCompute: UInt32,
  self: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern("SkipRuntime_deleteLazyCompute")
@debug
native fun deleteLazyCompute(lazyCompute: UInt32): void;

@export("SkipRuntime_createLazyCompute")
fun createLazyCompute(lazyCompute: UInt32): ExternLazyCompute {
  ExternLazyCompute(
    SKStore.ExternalPointer::create(lazyCompute, deleteLazyCompute),
  )
}

class ExternLazyCompute(eptr: SKStore.ExternalPointer) extends LazyCompute {
  fun getKeyConverter(): KeyConverter {
    JSONKeyConverter()
  }
  fun getFileConverter(): FileConverter {
    JSONFileConverter()
  }

  fun compute(self: LazyCollection, key: SKJSON.CJSON): Array<SKJSON.CJSON> {
    computeOfLazyCompute(this.eptr.value, self.getId(), key) match {
    | SKJSON.CJArray(value) -> value
    | _ -> invariant_violation("Invalid computed value.")
    }
  }
}

/************  ExternalService ****************/

@cpp_extern("SkipRuntime_ExternalService__subscribe")
@debug
native fun subscribeOfExternalService(
  externalSupplier: UInt32,
  collection: String,
  resource: String,
  params: SKJSON.CJObject,
): void;

@cpp_extern("SkipRuntime_ExternalService__unsubscribe")
@debug
native fun unsubscribeOfExternalService(
  externalSupplier: UInt32,
  resource: String,
  params: SKJSON.CJObject,
): void;

@cpp_extern("SkipRuntime_ExternalService__shutdown")
@debug
native fun shutdownOfExternalService(externalSupplier: UInt32): void;

@cpp_extern("SkipRuntime_deleteExternalService")
@debug
native fun deleteExternalService(externalSupplier: UInt32): void;

@export("SkipRuntime_createExternalService")
fun createExternalService(externalSupplier: UInt32): ExternExternalService {
  ExternExternalService(
    SKStore.ExternalPointer::create(externalSupplier, deleteExternalService),
  )
}

class ExternExternalService(
  eptr: SKStore.ExternalPointer,
) extends ExternalService {
  fun subscribe(
    collection: CollectionWriter,
    resource: String,
    params: Params,
  ): void {
    subscribeOfExternalService(
      this.eptr.value,
      collection.dirName.toString(),
      resource,
      jsonParams(params),
    )
  }

  fun unsubscribe(resource: String, params: Params): void {
    unsubscribeOfExternalService(this.eptr.value, resource, jsonParams(params))
  }

  fun shutdown(): void {
    shutdownOfExternalService(this.eptr.value)
  }
}

/************  CollectionWriter ****************/

@export("SkipRuntime_CollectionWriter__update")
fun updateOfCollectionWriter(
  collection: String,
  values: SKJSON.CJArray,
  isInit: Int32,
): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.update(
    values match {
    | SKJSON.CJArray(vs) ->
      vs.map(v -> {
        e = SKJSON.expectArray(v);
        (e[0], SKJSON.expectArray(e[1]))
      })
    },
    isInit != 0,
  ) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_CollectionWriter__loading")
fun loadingOfCollectionWriter(collection: String): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.loading() match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_CollectionWriter__error")
fun errorOfCollectionWriter(collection: String, error: SKJSON.CJSON): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.error(error) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************  Resource ****************/

@cpp_extern("SkipRuntime_Resource__instantiate")
@debug
native fun instantiateOfResource(
  resource: UInt32,
  collections: SKJSON.CJObject,
): String;

@cpp_extern("SkipRuntime_deleteResource")
@debug
native fun deleteResource(resource: UInt32): void;

@export("SkipRuntime_createResource")
fun createResource(resource: UInt32): ExternResource {
  ExternResource(SKStore.ExternalPointer::create(resource, deleteResource))
}

class ExternResource(eptr: SKStore.ExternalPointer) extends Resource {
  fun instantiate(collections: Map<String, Collection>): Collection {
    collectionName = instantiateOfResource(
      this.eptr.value,
      collectionsByName(collections),
    );
    collectionForName(collectionName)
  }
}

/************  ResourceBuilder ****************/

@cpp_extern("SkipRuntime_ResourceBuilder__build")
@debug
native fun buildOfResourceBuilder(
  builder: UInt32,
  params: SKJSON.CJObject,
): Resource;

@cpp_extern("SkipRuntime_deleteResourceBuilder")
@debug
native fun deleteResourceBuilder(resourceBuilder: UInt32): void;

@export("SkipRuntime_createResourceBuilder")
fun createResourceBuilder(resourceBuilder: UInt32): ExternResourceBuilder {
  ExternResourceBuilder(
    SKStore.ExternalPointer::create(resourceBuilder, deleteResourceBuilder),
  )
}

class ExternResourceBuilder(
  eptr: SKStore.ExternalPointer,
) extends ResourceBuilder {
  fun build(params: Params): Resource {
    buildOfResourceBuilder(this.eptr.value, jsonParams(params))
  }
}

/************  Checker ****************/

@cpp_extern("SkipRuntime_Checker__check")
@debug
native fun checkOfChecker(executor: UInt32, request: String): void;

@cpp_extern("SkipRuntime_deleteChecker")
@debug
native fun deleteChecker(mapper: UInt32): void;

@export("SkipRuntime_createChecker")
fun createChecker(executor: UInt32): ExternChecker {
  ExternChecker(SKStore.ExternalPointer::create(executor, deleteChecker))
}

@export("SkipRuntime_createIdentifier")
fun createIdentifier(request: String): Identifier {
  Identifier(request)
}

class ExternChecker(eptr: SKStore.ExternalPointer) extends Checker {
  fun check(request: String): void {
    checkOfChecker(this.eptr.value, request)
  }
}

/************  Service ****************/

@export("SkipRuntime_createService")
fun createService(
  service: UInt32,
  jsInputs: SKJSON.CJObject,
  resources: mutable Map<String, ResourceBuilder>,
  remotes: mutable Map<String, ExternalService>,
): ExternService {
  keyConverter = JSONKeyConverter();
  fileConverter = JSONFileConverter();
  inputs = mutable Vector[];
  jsInputs match {
  | SKJSON.CJObject(fields) ->
    for (fieldName => field in fields) {
      inputs.push(
        Input(
          fieldName,
          SKJSON.expectArray(field).map(v -> {
            e = SKJSON.expectArray(v);
            (e[0], SKJSON.expectArray(e[1]))
          }),
          keyConverter,
          fileConverter,
        ),
      )
    }
  };
  ExternService(
    SKStore.ExternalPointer::create(service, deleteService),
    inputs.toArray(),
    resources.chill(),
    remotes.chill(),
  )
}

@cpp_extern("SkipRuntime_deleteService")
@debug
native fun deleteService(service: UInt32): void;

@cpp_extern("SkipRuntime_Service__createGraph")
@debug
native fun createGraphOfService(
  resource: UInt32,
  collections: SKJSON.CJObject,
): SKJSON.CJObject;

class ExternService(eptr: SKStore.ExternalPointer) extends Service {
  //
  fun createGraph(inputs: Map<String, Collection>): Map<String, Collection> {
    names = createGraphOfService(this.eptr.value, collectionsByName(inputs));
    map = mutable Map[];
    names match {
    | SKJSON.CJObject(nfields) ->
      for (fieldName => field in nfields) {
        map![fieldName] = collectionForName(SKJSON.asString(field));
      }
    };
    map.chill()
  }
}

/************  ResourceBuilderMap ****************/

@export("SkipRuntime_ResourceBuilderMap__create")
fun createOfResourceBuilderMap(): mutable Map<String, ResourceBuilder> {
  mutable Map[]
}

@export("SkipRuntime_ResourceBuilderMap__add")
fun addOfResourceBuilderMap(
  builders: mutable Map<String, ResourceBuilder>,
  name: String,
  builder: ResourceBuilder,
): void {
  builders.add(name, builder)
}

/************  ExternalServiceMap ****************/

@export("SkipRuntime_ExternalServiceMap__create")
fun createOfExternalServiceMap(): mutable Map<String, ExternalService> {
  mutable Map[]
}

@export("SkipRuntime_ExternalServiceMap__add")
fun addOfExternalServiceMap(
  suppliers: mutable Map<String, ExternalService>,
  name: String,
  supplier: ExternalService,
): void {
  suppliers.add(name, supplier)
}

/************  Collection ****************/

@export("SkipRuntime_Collection__getArray")
fun getArrayOfCollection(
  collection: String,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  SKJSON.CJArray(collectionForName(collection).getArray(key))
}
@export("SkipRuntime_Collection__getUnique")
fun getUniqueOfCollection(
  collection: String,
  key: SKJSON.CJSON,
): ?SKJSON.CJSON {
  collectionForName(collection).getUnique(key)
}

@export("SkipRuntime_Collection__map")
fun mapOfCollection(collection: String, mapper: Mapper): String {
  collectionForName(collection).map(mapper).getId()
}

@export("SkipRuntime_Collection__mapReduce")
fun mapReduceOfCollection(
  collection: String,
  mapper: Mapper,
  reducer: JSONReducer,
): String {
  collectionForName(collection)
    .mapReduce(mapper, reducer, JSONFileConverter())
    .getId()
}

@export("SkipRuntime_Collection__reduce")
fun reduceOfCollection(collection: String, reducer: JSONReducer): String {
  collectionForName(collection)
    .mapReduce(
      IdentityMapper(JSONKeyConverter(), JSONFileConverter()),
      reducer,
      JSONFileConverter(),
    )
    .getId()
}
@export("SkipRuntime_Collection__slice")
fun sliceOfCollection(collection: String, ranges: SKJSON.CJArray): String {
  collectionForName(collection)
    .sliced(
      ranges match {
      | SKJSON.CJArray(values) ->
        values.map(v -> {
          e = SKJSON.expectArray(v);
          (e[0], e[1])
        })
      },
    )
    .getId()
}

@export("SkipRuntime_Collection__take")
fun takeOfCollection(collection: String, limit: Int): String {
  collectionForName(collection).take(limit).getId()
}

@export("SkipRuntime_Collection__merge")
fun mergeOfCollection(collection: String, others: SKJSON.CJArray): String {
  collectionForName(collection)
    .merge(
      others match {
      | SKJSON.CJArray(values) ->
        values.map(c -> collectionForName(SKJSON.asString(c)))
      },
    )
    .getId()
}

@export("SkipRuntime_Collection__size")
fun sizeOfCollection(collection: String): Int {
  collectionForName(collection).size()
}

/************  LazyCollection ****************/

@export("SkipRuntime_LazyCollection__getArray")
fun getArrayOfLazyCollection(lazy: String, key: SKJSON.CJSON): SKJSON.CJArray {
  SKJSON.CJArray(lazyForName(lazy).getArray(key))
}
@export("SkipRuntime_LazyCollection__getUnique")
fun getUniqueOfLazyCollection(lazy: String, key: SKJSON.CJSON): SKJSON.CJSON {
  lazyForName(lazy).getUnique(key)
}

/************  Notifier ****************/

@cpp_extern("SkipRuntime_Notifier__subscribed")
@debug
native fun subscribedOfNotifier(notifier: UInt32): void;

@cpp_extern("SkipRuntime_Notifier__notify")
@debug
native fun notifyOfNotifier(
  notifier: UInt32,
  values: SKJSON.CJArray,
  watermark: String,
  updates: Int32,
): void;

@cpp_extern("SkipRuntime_Notifier__close")
@debug
native fun closeOfNotifier(notifier: UInt32): void;

@cpp_extern("SkipRuntime_deleteNotifier")
@debug
native fun deleteNotifier(notifier: UInt32): void;

@export("SkipRuntime_createNotifier")
fun createNotifier(notifier: UInt32): Notifier {
  ExternNotifier(SKStore.ExternalPointer::create(notifier, deleteNotifier))
}

class ExternNotifier(eptr: SKStore.ExternalPointer) extends Notifier {
  fun subscribed(): void {
    subscribedOfNotifier(this.eptr.value)
  }

  fun notify(
    values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
    watermark: String,
    updates: Bool,
  ): void {
    notifyOfNotifier(
      this.eptr.value,
      SKJSON.CJArray(
        values.map(v -> SKJSON.CJArray(Array[v.i0, SKJSON.CJArray(v.i1)])),
      ),
      watermark,
      Int32::truncate(if (updates) 1 else 0),
    )
  }

  fun close(): void {
    closeOfNotifier(this.eptr.value)
  }
}

/************  Reducer ****************/

@cpp_extern("SkipRuntime_Reducer__add")
@debug
native fun addOfReducer(
  reducer: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern("SkipRuntime_Reducer__remove")
@debug
native fun removeOfReducer(
  reducer: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): ?SKJSON.CJSON;

@cpp_extern("SkipRuntime_deleteReducer")
@debug
native fun deleteReducer(reducer: UInt32): void;

@export("SkipRuntime_createReducer")
fun createReducer(reducer: UInt32, default: SKJSON.CJSON): JSONReducer {
  JSONReducer(SKStore.ExternalPointer::create(reducer, deleteReducer), default)
}

class JSONReducer(
  eptr: SKStore.ExternalPointer,
) extends Reducer<SKJSON.CJSON, SKJSON.CJSON> {
  fun getType(): SKStore.File ~> SKJSON.CJSON {
    f ~> JSONFile::type(f).value
  }

  fun add(acc: SKJSON.CJSON, value: SKJSON.CJSON): SKJSON.CJSON {
    addOfReducer(this.eptr.value, acc, value)
  }

  fun remove(acc: SKJSON.CJSON, value: SKJSON.CJSON): ?SKJSON.CJSON {
    removeOfReducer(this.eptr.value, acc, value)
  }
}

/************  Runtime ****************/

@export("SkipRuntime_Runtime__createResource")
fun createResourceOfRuntime(
  identifier: String,
  resource: String,
  jsonParams: SKJSON.CJObject,
): Float {
  SKStore.runWithResult(context ~> {
    createReactiveResource(context, identifier, resource, params(jsonParams))
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__getAll")
fun getAllOfRuntime(
  resource: String,
  jsonParams: SKJSON.CJObject,
  optRequest: ?Request,
): SKJSON.CJSON {
  (getContext() match {
  | Some(context) ->
    try {
      Success(getAll(context, resource, params(jsonParams), optRequest))
    } catch {
    | ex -> Failure(ex)
    }
  | _ ->
    SKStore.runWithResult(context ~> {
      getAll(context, resource, params(jsonParams), optRequest)
    })
  }) match {
  | Success(result) ->
    fields = mutable Vector<(String, SKJSON.CJSON)>[
      (
        "payload",
        SKJSON.CJArray(
          result.values.values.map(v ->
            SKJSON.CJArray(Array[v.i0, SKJSON.CJArray(v.i1)])
          ),
        ),
      ),
      ("errors", SKJSON.CJArray(result.errors)),
    ];
    result.request.each(request ->
      fields.push(("request", SKJSON.CJString(request)))
    );
    SKJSON.CJObject(
      SKJSON.CJFields::create(fields.sortedBy(x ~> x.i0).toArray(), x -> x),
    )
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  }
}

@export("SkipRuntime_Runtime__getForKey")
fun getForKeyOfRuntime(
  resource: String,
  jsonParams: SKJSON.CJObject,
  key: SKJSON.CJSON,
  optRequest: ?Request,
): SKJSON.CJSON {
  (getContext() match {
  | Some(context) ->
    try {
      Success(getForKey(context, resource, params(jsonParams), key, optRequest))
    } catch {
    | ex -> Failure(ex)
    }
  | _ ->
    SKStore.runWithResult(context ~> {
      getForKey(context, resource, params(jsonParams), key, optRequest)
    })
  }) match {
  | Success(result) ->
    fields = mutable Vector<(String, SKJSON.CJSON)>[
      ("payload", SKJSON.CJArray(result.values)),
      ("errors", SKJSON.CJArray(result.errors)),
    ];
    result.request.each(request ->
      fields.push(("request", SKJSON.CJString(request)))
    );
    SKJSON.CJObject(
      SKJSON.CJFields::create(fields.sortedBy(x ~> x.i0).toArray(), x -> x),
    )
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_Runtime__closeResource")
fun closeResourceOfRuntime(identifier: String): Float {
  SKStore.runWithResult(context ~> {
    closeReactiveResource(context, identifier)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__subscribe")
fun subscribeOfRuntime(
  reactiveId: String,
  notifier: Notifier,
  watermark: ?String,
): Int {
  SKStore.runWithResult(context ~> {
    subscribe(context, reactiveId, notifier, watermark)
  }) match {
  | Success(id) -> id
  | Failure(err) -> -getErrorHdl(err).toInt()
  };
}

@export("SkipRuntime_Runtime__unsubscribe")
fun unsubscribeOfRuntime(session: Int): Float {
  SKStore.runWithResult(context ~> {
    unsubscribe(context, session)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__update")
fun updateOfRuntime(input: String, values: SKJSON.CJArray): Float {
  SKStore.runWithResult(context ~> {
    update(
      context,
      input,
      values match {
      | SKJSON.CJArray(vs) ->
        vs.map(v -> {
          e = SKJSON.expectArray(v);
          (e[0], SKJSON.expectArray(e[1]))
        })
      },
    )
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************ Context ****************/

@export("SkipRuntime_Context__createLazyCollection")
fun lazyOfContext(compute: LazyCompute): String {
  createLazyCollection(compute).getId()
}

@export("SkipRuntime_Context__jsonExtract")
fun jsonExtractOfContext(
  from: SKJSON.CJObject,
  pattern: String,
): SKJSON.CJArray {
  SKJSON.CJArray(jsonExtract(from, pattern))
}

@export("SkipRuntime_Context__useExternalResource")
fun useExternalResource(
  service: String,
  identifier: String,
  jsonParams: SKJSON.CJObject,
): String {
  useExternalCollection(service, identifier, params(jsonParams)).getId()
}

/************ initService ****************/

@export("SkipRuntime_initService")
fun initSkipRuntimeService(service: Service): Float {
  initService(service) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************ closeService ****************/

@export("SkipRuntime_closeService")
fun closeSkipRuntimeService(): Float {
  closeService() match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

class ExternalException(
  type: String,
  message: String,
  stack: String,
) extends .Exception {
  fun getMessage(): String {
    this.message
  }
}

@export("SkipRuntime_throwExternalException")
fun throwExternalException(type: String, message: String, stack: String): void {
  throw ExternalException(type, message, stack)
}

@export("SkipRuntime_getExceptionStack")
fun getExceptionStack(exn: .Exception): ?String {
  exn match {
  | ExternalException(_, _, stack) -> Some(stack)
  | _ -> None()
  }
}

@export("SkipRuntime_getExceptionType")
fun getExceptionType(exn: .Exception): String {
  exn match {
  | ExternalException(type, _, _) -> type
  | _ -> exn.getClassName()
  }
}

module end;
