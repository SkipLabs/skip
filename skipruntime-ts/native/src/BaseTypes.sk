module SkipRuntime;

base class FileConverter {
  fun toJSON(value: SKStore.File): SKJSON.CJSON;
  fun fromJSON(json: SKJSON.CJSON): SKStore.File;
}

base class KeyConverter {
  fun toJSON(value: SKStore.Key): SKJSON.CJSON;
  fun fromJSON(json: SKJSON.CJSON): SKStore.Key;
}

base class Reducer<V1: frozen, V2: frozen>(default: V2) {
  fun getType(): SKStore.File ~> V2;
  fun add(acc: V2, value: V1): V2;
  fun remove(acc: V2, value: V1): ?V2;
}

/**
 * The type of a reactive function mapping over an arbitrary collection.
 * For each key & values in the input collection (of type K1/V1 respectively),
 * produces some key/value pairs for the output collection (of type K2/V2 respectively)
 * @param key - a key found in the input collection
 * @param values - the values mapped to by `key` in the input collection
 * @returns an iterable of key/value pairs to output for the given input(s)
 */
base class Mapper {
  fun getKeyConverter(): KeyConverter;
  fun getFileConverter(): FileConverter;

  fun mapEntry(
    key: SKJSON.CJSON,
    values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
  ): mutable Iterator<(SKJSON.CJSON, SKJSON.CJSON)>;
}

base class LazyCompute {
  fun getKeyConverter(): KeyConverter;
  fun getFileConverter(): FileConverter;

  fun compute(self: LazyCollection, key: SKJSON.CJSON): Array<SKJSON.CJSON>;
}

base class PValue uses Show, Orderable {
  children =
  | PInt(Int)
  | PFloat(Float)
  | PString(String)

  fun toString(): String
  | PInt(v) -> v.toString()
  | PFloat(v) -> v.toString()
  | PString(v) -> v
}

base class ExternalService {
  fun subscribe(
    collection: CollectionWriter,
    resource: String,
    params: Map<String, PValue>,
  ): void;

  fun unsubscribe(resource: String, params: Map<String, PValue>): void;

  fun shutdown(): void;
}

base class Resource {
  fun instantiate(collections: Map<String, Collection>): Collection;
}

base class ResourceBuilder {
  fun build(parameters: Map<String, PValue>): Resource;
}

base class Service(
  initialData: Array<Input>,
  resources: Map<String, ResourceBuilder>,
  remoteCollections: Map<String, ExternalService> = Map[],
) {
  fun createGraph(
    inputCollections: Map<String, Collection>,
  ): Map<String, Collection>;
}

value class Values(
  values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
  watermark: String,
)

base class Request {
  children =
  | Identifier(id: String)
}

base class Checker extends Request {
  fun check(request: String): void;
}

base class Notifier {
  fun subscribed(): void;

  fun notify(
    values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
    watermark: String,
    updates: Bool,
  ): void;

  fun close(): void;
}

module end;
