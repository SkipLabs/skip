module SkipRuntime;

const kKeyToKey: SKStore.Key ~> SKStore.Key = k ~> k;
const kFileToFile: SKStore.File ~> SKStore.File = f ~> f;
const kGarbageMillis: Int = 30000;

class ReadInCreatorException() extends Exception {
  fun getMessage(): String {
    "A collection cannot be read in it's creator."
  }
}

class ExistingResourceException() extends Exception {
  fun getMessage(): String {
    "A resource instance with specified identifier already exists."
  }
}

class ExistingSubscriptionException() extends Exception {
  fun getMessage(): String {
    "A resource instance with specified identifier already subscribed."
  }
}

class Params(json: SKJSON.CJSON) extends SKStore.File uses Orderable {
  fun compare(other: Params): Order {
    this.json.compare(other.json)
  }
  fun toString(): String {
    this.json.prettyPrint()
  }
}

class ResourceCollections(
  value: SKStore.EHandle<SKStore.SID, ResourceInfo>,
) extends SKStore.File

class ServiceDefinition(runId: String, service: Service) extends SKStore.File

class Handle(value: SKStore.EHandle<JSONID, JSONFile>) extends SKStore.File

class ConvReducer(
  private reducer: Reducer<SKJSON.CJSON, SKJSON.CJSON>,
) extends Reducer<JSONFile, JSONFile> {
  fun getType(): SKStore.File ~> JSONFile {
    JSONFile::type
  }

  fun add(acc: JSONFile, value: JSONFile): JSONFile {
    JSONFile(this.reducer.add(acc.json, value.json));
  }

  fun remove(acc: JSONFile, value: JSONFile): ?JSONFile {
    this.reducer.remove(acc.json, value.json).map(x -> JSONFile(x))
  }
}

class ResourceCollection(value: Collection) extends SKStore.File

class ResourceDef(
  name: String,
  params: SKJSON.CJSON,
) extends SKStore.File, SKStore.Key {
  //
  fun toString(): String {
    `${this.name}:${this.params.prettyPrint()}`
  }
}

class ResourceStatus(
  loadable: SKStore.DirName,
  status: Status,
) extends SKStore.File {}

class ServiceFile(
  value: Map<String, Collection>,
  inputs: Map<String, Collection>,
) extends SKStore.File

base class Status(created: Int, modified: Int) uses Show {
  children =
  | Loading()
  | Error(error: SKJSON.CJSON)
  | Ok()

  static fun create(): Status {
    time = Time.time_ms();
    Loading(time, time)
  }

  fun ok(): Status {
    Ok(this.created, Time.time_ms())
  }

  fun err(error: SKJSON.CJSON): Status {
    Error(error, this.created, Time.time_ms())
  }

  fun toString(): String
  | Loading(created, modified) ->
    `Loading{created: ${created}, modified: ${modified}}`
  | Error(error, created, modified) ->
    `Error{error: ${error.toJSON()}, created: ${created}, modified: ${modified}}`
  | Ok(created, modified) -> `Ok{created: ${created}, modified: ${modified}}`
}

class StatusFile(status: Status) extends SKStore.File

class RequestFile(
  timestamp: Int,
  resource: ResourceInfo,
  checker: ?Checker,
) extends SKStore.File

class RequestStatuses(statuses: Array<ResourceStatus>) extends SKStore.File {
  //
  fun getResult<T>(request: String, values: T): GetResult<T> {
    errors = mutable Vector[];
    loading: Bool = false;
    for (resourceStatus in this.statuses) {
      resourceStatus.status match {
      | Error(error, _, _) -> errors.push(error)
      | Loading _ -> !loading = true
      | Ok _ -> void
      }
    };
    GetResult(if (loading) Some(request) else None(), values, errors.toArray())
  }

  fun isLoading(): Bool {
    for (resourceStatus in this.statuses) {
      resourceStatus.status match {
      | Loading _ -> break true
      | Error _
      | Ok _ ->
        void
      }
    } else {
      false
    }
  }

  fun getErrors(): Array<SKJSON.CJSON> {
    errors = mutable Vector[];
    for (resourceStatus in this.statuses) {
      resourceStatus.status match {
      | Error(error, _, _) -> errors.push(error)
      | Loading _
      | Ok _ ->
        void
      }
    };
    errors.toArray()
  }
}

class RemoteSpecifiers(
  value: Map<String, ExternalService>,
) extends SKStore.File

class ResourceInfo(
  name: String,
  collection: Collection,
  statusRef: SKStore.DirName,
  session: String,
) extends SKStore.File {
  /**
   * Create a status request
   */
  fun createRequest(
    context: mutable SKStore.Context,
    optChecker: ?Checker,
  ): String {
    requestId = Ksuid::create().toString();
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestFile::type,
      this.statusRef.sub("requests"),
    ).writeArray(
      context,
      SKStore.SID(requestId),
      Array[RequestFile(Time.time_ms(), this, optChecker)],
    );
    updateContext(context);
    requestId;
  }

  fun getResult<T>(
    context: mutable SKStore.Context,
    request: String,
    values: T,
  ): GetResult<T> {
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestStatuses::type,
      this.statusRef.sub("all"),
    ).maybeGet(context, SKStore.SID(request)) match {
    | Some(statuses) -> statuses.getResult(request, values)
    | _ -> GetResult(None(), values, Array[])
    }
  }

  fun clearRequest(context: mutable SKStore.Context, requestId: String): void {
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestFile::type,
      this.statusRef.sub("requests"),
    ).writeArray(context, SKStore.SID(requestId), Array[]);
  }
}

fun initCtx(): SKStore.Context {
  SKStore.Context{}
}

class Input(name: String, values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>)

fun buildResourcesGraph(
  context: mutable SKStore.Context,
  definitionHdl: SKStore.EHandle<SKStore.IID, ServiceDefinition>,
  statusHdl: SKStore.EHandle<SKStore.IID, ResourceStatus>,
  servicesHdl: SKStore.EHandle<SKStore.SID, ServiceFile>,
): void {
  dirname = kResourceSessionDir;
  dDirname = dirname.sub("data");
  resourcesHdl = context.mkdir(
    SKStore.SID::keyType,
    ResourceDef::type,
    dirname,
    Array[],
  );
  _ = context.mkdir(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
    Array[],
  );
  idbyresourceHdl = resourcesHdl.map(
    ResourceDef::keyType,
    SKStore.StringFile::type,
    context,
    dirname.sub("idbyresource"),
    (_c, writer, key, it) ~> {
      writer.set(it.first, SKStore.StringFile(key.value));
    },
  );
  availablesHdl = idbyresourceHdl.map(
    ResourceDef::keyType,
    SKStore.IntFile::type,
    context,
    dirname.sub("availables"),
    (_c, writer, key, _it) ~> {
      // map to ignore array changes
      // to prevent recompute on each add/remove session
      writer.set(key, SKStore.IntFile(1))
    },
  );
  _ = availablesHdl.map(
    ResourceDef::keyType,
    ResourceInfo::type,
    context,
    kResourceCollectionsDir,
    (context, writer, key, _it) ~> {
      (runId, resources) = definitionHdl.maybeGet(
        context,
        SKStore.IID(0),
      ) match {
      | Some(definition) -> (definition.runId, definition.service.resources)
      | _ -> return void
      };
      pushContext(context);
      try {
        resourceId = toResourceId(key.name, key.params);
        statusRef = dirname.sub(resourceId);
        // Status graph
        sStatusHdl = context
          .mkdir(
            SKStore.DirName::keyType,
            StatusFile::type,
            statusRef.sub("status"),
            Array[],
            true,
          )
          .map(
            SKStore.IID::keyType,
            ResourceStatus::type,
            context,
            statusRef.sub("statuses"),
            (_ctx, writer, key, it) ~> {
              writer.set(SKStore.IID(0), ResourceStatus(key, it.first.status));
            },
          );
        _sRequestsHdl = context
          .mkdir(
            SKStore.SID::keyType,
            RequestFile::type,
            statusRef.sub("requests"),
            Array[],
            true,
          )
          .map(
            SKStore.SID::keyType,
            RequestStatuses::type,
            context,
            statusRef.sub("all"),
            (ctx, writer, key, it) ~> {
              rf = it.first;
              timestamp = rf.timestamp;
              statuses = statusHdl
                .getArray(ctx, SKStore.IID(0))
                .concat(sStatusHdl.getArray(ctx, SKStore.IID(0)))
                .filter(rs -> rs.status.created <= timestamp);
              requestStatuses = RequestStatuses(statuses);
              writer.set(key, requestStatuses);
              rf.checker match {
              | Some(checker) if (!requestStatuses.isLoading()) ->
                ctx.postpone(CheckRequest(statusRef, key, checker))
              | _ -> void
              }
            },
          );
        resourceBuilder = resources.get(key.name);
        resource = resourceBuilder.build(key.params);
        collections = servicesHdl.get(context, SKStore.SID(runId)).value;
        collection = resource.instantiate(collections);
        // Ensure the name of the resource result
        resourceData = collection.hdl.map(
          JSONID::keyType,
          JSONFile::type,
          context,
          dDirname.sub(resourceId),
          (_ctx, writer, key, it) ~> {
            writer.setArray(key, it.collect(Array));
          },
        );
        writer.set(
          key,
          ResourceInfo(
            resourceId,
            collection with {hdl => resourceData},
            statusRef,
            runId,
          ),
        );
        popContext()
      } catch {
      | ex ->
        popContext();
        throw ex
      }
    },
  );
}

fun initService(service: Service): Result<void, .Exception> {
  if (SKStore.gHasContext() == 0) {
    SKStore.gContextInit(initCtx());
  };
  runId = Ksuid::create().toString();
  SKStore.runWithResult(context ~> {
    if (context.unsafeMaybeGetEagerDir(kSessionDir) is None()) {
      sessionHdl = context.mkdir(
        SKStore.IID::keyType,
        ServiceDefinition::type,
        kSessionDir,
        Array[(SKStore.IID(0), ServiceDefinition(runId, service))],
      );
      servicesHdl = sessionHdl.map(
        SKStore.SID::keyType,
        ServiceFile::type,
        context,
        kGraphDir,
        (ctx, writer, _key, it) ~> {
          serviceDef = it.first;
          pushContext(ctx);
          mInputs = mutable Map<String, Collection>[];
          serviceDef.service.initialData.each(input -> {
            iDirName = SKStore.DirName::create(`/${input.name}/`);
            ctx.mkdirMulti(
              iDirName,
              input.values.map(v -> (JSONID(v.i0), v.i1.map(x -> JSONFile(x)))),
            );
            iHdl = SKStore.EHandle<JSONID, JSONFile>(
              JSONID::keyType,
              JSONFile::type,
              iDirName,
            );
            mInputs.add(input.name, Collection(iHdl))
          });
          inputCollections = mInputs.chill();
          try {
            writer.set(
              SKStore.SID(serviceDef.runId),
              ServiceFile(
                serviceDef.service.createGraph(inputCollections),
                inputCollections,
              ),
            );
            popContext()
          } catch {
          | ex ->
            popContext();
            throw ex
          }
        },
      );
      // Service status
      statusHdl = context
        .mkdir(
          SKStore.DirName::keyType,
          StatusFile::type,
          kSessionDir.sub("status"),
          Array[],
        )
        .map(
          SKStore.IID::keyType,
          ResourceStatus::type,
          context,
          kSessionDir.sub("statuses"),
          (_ctx, writer, key, it) ~> {
            writer.set(SKStore.IID(0), ResourceStatus(key, it.first.status));
          },
        );
      buildResourcesGraph(context, sessionHdl, statusHdl, servicesHdl)
    } else {
      closeService_(context);
      sessionHdl = SKStore.EHandle(
        SKStore.IID::keyType,
        ServiceDefinition::type,
        kSessionDir,
      );
      sessionHdl.writeArray(context, SKStore.IID(0), Array[]);
      context.update();
      sessionHdl.writeArray(
        context,
        SKStore.IID(0),
        Array[ServiceDefinition(runId, service)],
      );
    };
    updateContext(context);
  })
}

fun closeService_(context: mutable SKStore.Context): void {
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  todestroy = mutable Vector[];
  resourceHdl.items(context).each(kf -> {
    kf.i1.next().each(_f -> todestroy.push(SKStore.SID::keyType(kf.i0)))
  });
  todestroy.each(key -> destroyReactiveResource(context, key));
  sessionHdl = SKStore.EHandle(
    SKStore.IID::keyType,
    ServiceDefinition::type,
    kSessionDir,
  );
  sessionHdl.maybeGet(context, SKStore.IID(0)).each(def -> {
    def.service.remoteCollections.each((_k, es) -> es.shutdown());
  });
  context.update();
}

fun closeService(): Result<void, .Exception> {
  SKStore.runWithResult(closeService_)
}

class CheckRequest(
  statusRef: SKStore.DirName,
  request: SKStore.SID,
  checker: Checker,
) extends SKStore.Postponable {
  //
  fun perform(context: mutable SKStore.Context): void {
    pushContext(context);
    this.checker.check(this.request.value);
    popContext();
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestFile::type,
      this.statusRef.sub("requests"),
    ).writeArray(context, this.request, Array[]);
  }
}

class LinkToResource(
  supplier: ExternalService,
  writer: CollectionWriter,
  name: String,
  params: SKJSON.CJSON,
) extends SKStore.Postponable {
  //
  fun perform(context: mutable SKStore.Context): void {
    this.writer.status(context, Status::create());
    pushContext(context);
    this.supplier.subscribe(this.writer, this.name, this.params);
    popContext();
  }
}

class CloseResource(
  supplier: ExternalService,
  name: String,
  params: SKJSON.CJSON,
) extends SKStore.Postponable {
  fun perform(context: mutable SKStore.Context): void {
    pushContext(context);
    this.supplier.unsubscribe(this.name, this.params);
    popContext();
  }
}

/**
 * Creates a lazy reactive collection.
 * @param compute - the function to compute entries of the lazy collection
 * @param params - any additional parameters to the computation
 * @returns The resulting lazy collection
 */
fun createLazyCollection(compute: LazyCompute): LazyCollection {
  getContext() match {
  | Some(context) ->
    collectionId = `collection_${SKStore.genSym(0)}`;
    dirName = subDirName(context, collectionId);
    lhdl = SKStore.LHandle::create(
      JSONID::keyType,
      JSONFile::type,
      context,
      dirName,
      (ctx, self, key) ~> {
        pushContext(ctx);
        try {
          res = compute.compute(LazyCollection(self), key.json).map(json ->
            JSONFile(json)
          );
          popContext();
          res
        } catch {
        | ex ->
          popContext();
          throw ex
        }
      },
    );
    LazyCollection(lhdl)

  | _ -> invariant_violation("Store context must be specified.")
  }
}

fun jsonExtract(from: SKJSON.CJObject, pattern: String): Array<SKJSON.CJSON> {
  fieldsList = SKJSON.PatternParser::mcreate(pattern)
    .toplevelPattern()
    .pmatch(from)
    .collect(Array);
  values = mutable Vector[];
  fieldsList.each(fields -> {
    array = fields.collect(Array).map(field -> {
      cjfields = SKJSON.CJFields::create(Array[field], x -> x);
      SKJSON.CJObject(cjfields)
    });
    values.push(SKJSON.CJArray(array));
  });
  values.toArray()
}

fun useExternalCollection(
  supplier: String,
  resource: String,
  params: SKJSON.CJSON,
): Collection {
  getContext() match {
  | Some(context) ->
    sessionHdl = SKStore.EHandle(
      SKStore.IID::keyType,
      ServiceDefinition::type,
      kSessionDir,
    );
    remoteCollections = sessionHdl.get(
      context,
      SKStore.IID(0),
    ).service.remoteCollections;
    externalSupplier = remoteCollections.get(supplier);
    collectionId = toSuppliedResourceId(supplier, resource, params);
    dirName = subDirName(context, collectionId);
    paramsDir = dirName.sub("params");
    dataDir = dirName.sub("data");
    hdl = context.mkdir(
      SKStore.IID::keyType,
      Params::type,
      paramsDir,
      Array[(SKStore.IID(0), Params(params))],
    );
    collectionHdl = hdl.map(
      SKStore.IID::keyType,
      Handle::type,
      context,
      dirName,
      (context, writer, key, it) ~> {
        storeDir = dirName.sub(base64(it.first.toString()));
        store = context.mkdir(
          JSONID::keyType,
          JSONFile::type,
          storeDir,
          Array[],
          true,
          Some(
            LinkToResource(
              externalSupplier,
              CollectionWriter(storeDir),
              resource,
              it.first.json,
            ),
          ),
          Some(CloseResource(externalSupplier, resource, it.first.json)),
        );
        writer.set(key, Handle(store));
      },
    );
    Collection(
      hdl.map(
        JSONID::keyType,
        JSONFile::type,
        context,
        dataDir,
        (context, writer, key, _it) ~> {
          remote = collectionHdl.get(context, key).value;
          remote.items(context).each(kv -> {
            writer.setArray(kv.i0, kv.i1.collect(Array))
          });
        },
      ),
    )
  | _ -> invariant_violation("Store context must be specified.")
  }
}

class Collection(hdl: SKStore.EHandle<JSONID, JSONFile>) {
  //
  static fun forName(name: String): Collection {
    hdl = SKStore.EHandle<JSONID, JSONFile>(
      JSONID::keyType,
      JSONFile::type,
      SKStore.DirName::create(name),
    );
    Collection(hdl)
  }

  fun getId(): String {
    this.hdl.getDirName().toString();
  }

  /**
   * Get (and potentially compute) all values mapped to by some key of a lazy reactive
   * collection.
   */
  fun getArray(key: SKJSON.CJSON): Array<SKJSON.CJSON> {
    getContext() match {
    | Some(context) ->
      dir = context.unsafeGetEagerDir(this.hdl.dirName);
      if (dir.creator == context.currentArrow()) {
        throw ReadInCreatorException()
      };
      dir.getArray(context, JSONID(key)).map(x ~> JSONFile::type(x).json)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Get a value of an eager reactive collection, if one exists.
   * If multiple values are mapped to by the key, any of them can be returned.
   * @returns the value for this `key`, or null if no such value exists
   */
  fun getUnique(key: SKJSON.CJSON): ?SKJSON.CJSON {
    value = this.getArray(key);
    if (value.size() == 1) Some(value[0]) else None();
  }

  /**
   * Create a new eager collection by mapping some computation over this one
   * @param mapper - function to apply to each element of this collection
   * @returns The resulting (eager) output collection
   */
  fun map(mapper: Mapper): Collection {
    this.map_(Some(mapper), None())
  }

  /**
   * Create a new eager reactive collection by mapping some computation `mapper` over this
   * one and then reducing the results with `reducer`
   * @param mapper - function to apply to each element of this collection
   * @param reducer - function to combine results of the `mapper`
   * @returns An eager collection containing the output of the reducer
   */
  fun mapReduce(
    mapperOpt: ?Mapper,
    reducer: Reducer<SKJSON.CJSON, SKJSON.CJSON>,
  ): Collection {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      mapper = mapperOpt match {
      | None() -> identityMap
      | Some(mapper) ->
        (ctx, writer, key, values) ~> {
          pushContext(ctx);
          try {
            for (entry in mapper.mapEntry(key.json, values.map(x -> x.json))) {
              writer.append(JSONID(entry.i0), JSONFile(entry.i1))
            };
            popContext();
          } catch {
          | ex ->
            popContext();
            throw ex
          }
        }
      };
      hdl = this.hdl.mapReduce(
        JSONID::keyType,
        JSONFile::type,
        context,
        dirName,
        mapper,
        accReducer(ConvReducer(reducer, JSONFile(reducer.initial))),
      );
      Collection(hdl)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  fun nativeMapReduceImpl<V_elt: SKStore.File, V_acc: SKStore.File>(
    mapperOpt: ?Mapper,
    reducer: SKStore.EReducer<V_elt, V_acc>,
    eltType: SKStore.File ~> V_elt,
    inputConv: SKJSON.CJSON ~> V_elt,
    outputConv: V_acc ~> SKJSON.CJSON,
  ): Collection {
    mapper = (ctx, writer, key, values) ~> {
      mapperOpt match {
      | None() ->
        writer.setArray(key, values.map(x -> inputConv(x.json)).collect(Array))
      | Some(mapper) ->
        pushContext(ctx);
        try {
          for (entry in mapper.mapEntry(key.json, values.map(x -> x.json))) {
            writer.append(JSONID(entry.i0), inputConv(entry.i1))
          };
          popContext();
        } catch {
        | ex ->
          popContext();
          throw ex
        }
      }
    };
    getContext() match {
    | Some(context) ->
      hdl = this.hdl.mapReduce(
        JSONID::keyType,
        eltType,
        context,
        this.hdl.dirName.sub(`collection_${SKStore.genSym(0)}`),
        mapper,
        reducer,
      );
      Collection(
        hdl.map(
          JSONID::keyType,
          JSONFile::type,
          context,
          this.hdl.dirName.sub(`collection_${SKStore.genSym(1)}`),
          (_ctx, writer, key, values) ~> {
            writer.setArray(
              key,
              values.map(x -> JSONFile(outputConv(x))).collect(Array),
            )
          },
        ),
      )
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  fun nativeMapReduce(mapperOpt: ?Mapper, reducer: String): Collection {
    jsonToIntFile = json ~>
      json match {
      | SKJSON.CJInt(x) -> SKStore.IntFile(x)
      | _ -> throw SKStore.Error("Non-number JSON input to native reducer")
      };
    reducer match {
    | "sum" ->
      this.nativeMapReduceImpl(
        mapperOpt,
        SKStore.sumReducer(),
        SKStore.IntFile::type,
        jsonToIntFile,
        file ~> SKJSON.CJInt(file.value),
      )
    | "min" ->
      this.nativeMapReduceImpl(
        mapperOpt,
        SKStore.minReducer(),
        SKStore.IntFile::type,
        jsonToIntFile,
        file ~> SKJSON.CJInt(file.value),
      )
    | "max" ->
      this.nativeMapReduceImpl(
        mapperOpt,
        SKStore.maxReducer(),
        SKStore.IntFile::type,
        jsonToIntFile,
        file ~> SKJSON.CJInt(file.value),
      )
    | "count" ->
      this.nativeMapReduceImpl(
        mapperOpt,
        SKStore.countReducer(),
        JSONFile::type,
        json ~> JSONFile(json),
        file ~> SKJSON.CJInt(file.value),
      )
    | _ -> throw SKStore.Error("Unrecognized native reducer: " + reducer)
    }
  }

  /**
   * Create a new eager collection by keeping only the elements whose keys are in
   * the given ranges.
   */
  fun sliced(ranges: Array<(SKJSON.CJSON, SKJSON.CJSON)>): Collection {
    this.map_(None(), Some(ranges))
  }

  /**
   * Create a new eager collection by keeping the given number of the first elements.
   */
  fun take(limit: Int): Collection {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      resHdl = this.hdl.filter(
        context,
        dirName,
        limit,
        noFilter,
        countElementAsOne,
        removeElementAsOne,
        None(),
      );
      Collection(resHdl)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Combine some eager collections into one, associating with each key _all_ values
   * associated with that key in any of the input collections.
   * @param others - some other eager collections of compatible type
   * @returns The resulting combination of all input key/value pairs
   */
  fun merge(others: Array<Collection>): Collection {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      hdl = SKStore.EHandle::multiMap(
        JSONID::keyType,
        JSONFile::type,
        context,
        Array[this].concat(others).map(c ->
          c match {
          | ci @ Collection _ -> (ci.hdl, (identityMap, None()))
          }
        ),
        dirName,
      );
      Collection(hdl)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Get the current number of elements in the collection
   * @returns The current number of elements in the collection
   */
  fun size(): Int {
    getContext() match {
    | Some(context) ->
      dir = context.unsafeGetEagerDir(this.hdl.dirName);
      if (dir.creator == context.currentArrow()) {
        throw ReadInCreatorException()
      };
      dir.size(context)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  fun getAll(
    context: mutable SKStore.Context,
  ): Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)> {
    values = mutable Vector<(SKJSON.CJSON, Array<SKJSON.CJSON>)>[];
    dir = context.unsafeGetEagerDir(this.hdl.getDirName());
    for (kv in dir.unsafeGetFileIter()) {
      (key, files) = kv;
      values.push(
        (
          JSONID::keyType(key).json,
          files.collect(Array).map(x -> JSONFile::type(x).json),
        ),
      );
    };
    values.toArray();
  }

  fun items(
    context: mutable SKStore.Context,
  ): mutable Iterator<(JSONID, mutable Iterator<JSONFile>)> {
    this.hdl.items(context)
  }

  fun subscribe(
    context: mutable SKStore.Context,
    identifier: String,
    session: Int,
    from: SKStore.Tick,
    notify: (
      Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
      SKStore.Tick,
      Bool,
    ) ~> void,
    close: () ~> void,
  ): void {
    context.subscribe(
      session,
      SKStore.NWatch(
        identifier,
        from,
        (_dirName, values, tick, update) ~> {
          notify(
            values.map(v ->
              (
                JSONID::keyType(v.i0).json,
                v.i1.map(x -> JSONFile::type(x).json),
              )
            ),
            tick,
            update,
          )
        },
        close,
        true,
      ),
      None(),
      Array[
        SKStore.DirSub(
          this.hdl.getDirName(),
          "",
          SKStore.OJSON(Array[]),
          (__) ~> None(),
        ),
      ],
      Some(from),
    )
  }

  private fun map_(
    mapperOpt: ?Mapper,
    rangeOpt: ?Array<(SKJSON.CJSON, SKJSON.CJSON)> = None(),
  ): Collection {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      mapper = mapperOpt match {
      | None() -> identityMap
      | Some(mapper) ->
        (ctx, writer, key, values) ~> {
          pushContext(ctx);
          try {
            for (entry in mapper.mapEntry(key.json, values.map(x -> x.json))) {
              writer.append(JSONID(entry.i0), JSONFile(entry.i1))
            };
            popContext();
          } catch {
          | ex ->
            popContext();
            throw ex
          }
        }
      };
      hdl = this.hdl.map(
        JSONID::keyType,
        JSONFile::type,
        context,
        dirName,
        mapper,
        rangeOpt.map(v ->
          v.map(r -> SKStore.KeyRange(JSONID(r.i0), JSONID(r.i1)))
        ),
      );
      Collection(hdl)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }
}

class LazyCollection(private hdl: SKStore.LHandle<JSONID, JSONFile>) {
  //
  static fun forName(name: String): LazyCollection {
    hdl = SKStore.LHandle(
      JSONID::keyType,
      JSONFile::type,
      SKStore.DirName::create(name),
    );
    LazyCollection(hdl)
  }

  fun getId(): String {
    this.hdl.getDirName().toString();
  }

  /**
   * Get (and potentially compute) all values mapped to by some key of a lazy reactive
   * collection.
   */
  fun getArray(key: SKJSON.CJSON): Array<SKJSON.CJSON> {
    getContext() match {
    | Some(context) ->
      this.hdl.getArray(context, JSONID(key)).map(file -> file.json)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Get (and potentially compute) a value of a lazy reactive collection.
   * @throws {Error} when either zero or multiple such values exist
   */
  fun getUnique(key: SKJSON.CJSON): SKJSON.CJSON {
    getContext() match {
    | Some(context) -> this.hdl.get(context, JSONID(key)).json
    | _ -> invariant_violation("Store context must be specified.")
    }
  }
}

class CollectionWriter(dirName: SKStore.DirName) {
  //
  fun update(
    values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
    isInit: Bool,
  ): Result<void, .Exception> {
    getContext() match {
    | Some(context) ->
      try {
        this.update_(context, values, isInit);
        this.updateStatus(context, status ~> status.ok());
        Success(void)
      } catch {
      | ex -> Failure(ex)
      }
    | _ ->
      SKStore.runWithResult(context ~> {
        this.update_(context, values, isInit);
        this.updateStatus(context, status ~> status.ok());
        updateContext(context);
      })
    }
  }

  fun error(error: SKJSON.CJSON): Result<void, .Exception> {
    getContext() match {
    | Some(context) ->
      try {
        this.updateStatus(context, status ~> status.err(error));
        Success(void)
      } catch {
      | ex -> Failure(ex)
      }
    | _ ->
      SKStore.runWithResult(context ~> {
        this.updateStatus(context, status ~> status.err(error));
        updateContext(context);
      })
    }
  }

  fun loading(): Result<void, .Exception> {
    getContext() match {
    | Some(context) ->
      try {
        this.status(context, Status::create());
        Success(void)
      } catch {
      | ex -> Failure(ex)
      }
    | _ ->
      SKStore.runWithResult(context ~> {
        this.status(context, Status::create());
        updateContext(context);
      })
    }
  }

  fun status(context: mutable SKStore.Context, status: Status): void {
    context.maybeGetEagerDir(this.dirName) match {
    | Some(dir) ->
      dirname = this.sessionId(context, dir) match {
      | Some(sessionId) -> kResourceSessionDir.sub(sessionId).sub("status")
      | _ -> kSessionDir.sub("status")
      };
      shdl = SKStore.EHandle(
        SKStore.DirName::keyType,
        StatusFile::type,
        dirname,
      );
      shdl.writeArray(context, this.dirName, Array[StatusFile(status)])
    | _ -> void
    };
  }

  fun updateStatus(
    context: mutable SKStore.Context,
    update: Status ~> Status,
  ): void {
    context.maybeGetEagerDir(this.dirName) match {
    | Some(dir) ->
      dirname = this.sessionId(context, dir) match {
      | Some(sessionId) -> kResourceSessionDir.sub(sessionId).sub("status")
      | _ -> kSessionDir.sub("status")
      };
      shdl = SKStore.EHandle(
        SKStore.DirName::keyType,
        StatusFile::type,
        dirname,
      );
      status = update(shdl.get(context, this.dirName).status);
      shdl.writeArray(context, this.dirName, Array[StatusFile(status)])
    | _ -> void
    };
  }

  private fun update_(
    context: mutable SKStore.Context,
    values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
    isInit: Bool,
  ): void {
    dir = context.maybeGetEagerDir(this.dirName) match {
    | Some(dir) -> dir
    | _ -> return void
    };
    keys = if (isInit) {
      dir.keys().map(JSONID::keyType)
    } else {
      SortedSet<JSONID>[]
    };
    chdl = SKStore.EHandle(JSONID::keyType, JSONFile::type, this.dirName);
    values.each(e -> {
      key = JSONID(e.i0);
      fvalues = e.i1.map(v -> JSONFile(v));
      chdl.writeArray(context, key, fvalues);
      !keys = keys.remove(key);
    });
    keys.each(key -> chdl.writeArray(context, key, Array[]));
  }

  private fun sessionId(
    context: mutable SKStore.Context,
    dir: SKStore.EagerDir,
  ): ?String {
    dir.creator match {
    | Some(arrow) ->
      if (this.isResourceDir(arrow.parentName)) {
        Some(base64(SKStore.SID::keyType(arrow.key).value))
      } else {
        context.maybeGetEagerDir(arrow.parentName) match {
        | Some(sdir) -> this.sessionId(context, sdir)
        | _ -> None()
        }
      }
    | _ -> None()
    }
  }

  private fun isResourceDir(dirName: SKStore.DirName): Bool {
    dirName == kResourceSessionDir
  }
}

value class GetResult<T>(
  request: ?String,
  values: T,
  errors: Array<SKJSON.CJSON>,
) {
  fun loading(): Bool {
    this.request.isSome()
  }
}

fun getAll(
  context: mutable SKStore.Context,
  resourceName: String,
  params: SKJSON.CJSON,
  optRequest: ?Request,
): GetResult<Values> {
  resourceInstanceId = Ksuid::create().toString();
  resource = createReactiveResource(
    context,
    resourceInstanceId,
    resourceName,
    params,
  );
  // create requests
  request = optRequest match {
  | Some(checker @ Checker _) -> resource.createRequest(context, Some(checker))
  | Some(Identifier(req)) -> req
  | _ -> resource.createRequest(context, None())
  };
  values = Values(
    resource.collection.getAll(context),
    `${resource.session}/${context.tick}`,
  );
  // return result type
  res = resource.getResult(context, request, values);
  if (!res.loading()) {
    optRequest match {
    | Some(Identifier _)
    | None() ->
      resource.clearRequest(context, request);
      closeReactiveResource(context, resourceInstanceId, false)
    | Some(Checker _) -> void
    };
  };
  res;
}

fun getForKey(
  context: mutable SKStore.Context,
  resourceName: String,
  params: SKJSON.CJSON,
  key: SKJSON.CJSON,
  optRequest: ?Request,
): GetResult<Array<SKJSON.CJSON>> {
  resourceInstanceId = Ksuid::create().toString();
  resource = createReactiveResource(
    context,
    resourceInstanceId,
    resourceName,
    params,
  );
  // create requests
  request = optRequest match {
  | Some(checker @ Checker _) -> resource.createRequest(context, Some(checker))
  | Some(Identifier(req)) -> req
  | _ -> resource.createRequest(context, None())
  };
  pushContext(context);
  values = resource.collection.getArray(key);
  popContext();
  // return result type
  res = resource.getResult(context, request, values);
  if (!res.loading()) {
    optRequest match {
    | Some(Identifier _)
    | None() ->
      resource.clearRequest(context, request);
      closeReactiveResource(context, resourceInstanceId, false)
    | Some(Checker _) -> void
    };
  };
  res;
}

fun destroyReactiveResource(
  context: mutable SKStore.Context,
  sid: SKStore.SID,
): void {
  context
    .getPersistent(`subscription.${sid}`)
    .map(SKStore.IntFile::type) match {
  | Some(subId) ->
    session = subId.value;
    context.sessions.maybeGet(session).each(sub -> {
      close = sub.cmd match {
      | SKStore.NWatch(_, _, _, close, _) -> close
      | _ -> invariant_violation("Not manage session kind")
      };
      context.removePersistent(`subscription.${sid}`);
      close();
      context.unsubscribe(session);
    })
  | _ -> void
  };
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  resourceHdl.writeArray(context, sid, Array[]);
}

fun closeReactiveResource(
  context: mutable SKStore.Context,
  identifier: String,
  update: Bool = true,
): void {
  context
    .getPersistent(`subscription.${identifier}`)
    .map(SKStore.IntFile::type) match {
  | Some(subId) -> unsubscribe(context, subId.value, update)
  | _ ->
    garbageHdl = SKStore.EHandle(
      SKStore.SID::keyType,
      SKStore.IntFile::type,
      kResourceGarbageDir,
    );
    sid = SKStore.SID(identifier);
    if (garbageHdl.maybeGet(context, sid).isSome()) return void;
    time = Time.time_ms();
    garbageHdl.writeArray(context, sid, Array[SKStore.IntFile(time)]);
    if (update) updateContext(context)
  };
}

fun subscribe(
  context: mutable SKStore.Context,
  identifier: String,
  notifier: Notifier,
  optWatermark: ?String,
): Int {
  garbageHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
  );
  sid = SKStore.SID(identifier);
  session = SKStore.genSym(0);
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  resourcesCollectionsHdl = SKStore.EHandle(
    ResourceDef::keyType,
    ResourceInfo::type,
    kResourceCollectionsDir,
  );
  subId = `subscription.${identifier}`;
  if (context.getPersistent(subId).isSome()) {
    throw ExistingSubscriptionException()
  };
  resourceHdl.maybeGet(context, sid) match {
  | Some(definition) ->
    info = resourcesCollectionsHdl.get(context, definition);
    start = `${info.session}/`;
    from = optWatermark match {
    | Some(watermark) if (watermark.startsWith(start)) ->
      watermark.stripPrefix(start).toInt()
    | _ -> 0
    };
    notifier.subscribed();
    info.collection.subscribe(
      context,
      identifier,
      session,
      SKStore.Tick(from),
      (values, tick, update) ~> {
        notifier.notify(values, `${info.session}/${tick}`, update)
      },
      notifier.close,
    );
    context.setPersistent(subId, SKStore.IntFile(session));
    if (garbageHdl.maybeGet(context, sid).isSome()) {
      garbageHdl.writeArray(context, sid, Array[]);
      context.update();
    };
    checkGarbage(context);
    session
  | _ -> -1
  }
}

fun unsubscribe(
  context: mutable SKStore.Context,
  session: Int,
  update: Bool = true,
): void {
  context.sessions.maybeGet(session).each(sub -> {
    (identifier, close) = sub.cmd match {
    | SKStore.NWatch(identifier, _, _, close, _) -> (identifier, close)
    | _ -> invariant_violation("Not manage session kind")
    };
    context.removePersistent(`subscription.${identifier}`);
    close();
    context.unsubscribe(session);
    closeReactiveResource(context, identifier, update);
  });
}

// WRITES

fun put(
  context: mutable SKStore.Context,
  collection: String,
  key: SKJSON.CJSON,
  value: Array<SKJSON.CJSON>,
): void {
  chdl = SKStore.EHandle(
    JSONID::keyType,
    JSONFile::type,
    SKStore.DirName::create(`/${collection}/`),
  );
  chdl.writeArray(context, JSONID(key), value.map(v -> JSONFile(v)));
  updateContext(context);
}

fun update(
  context: mutable SKStore.Context,
  collection: String,
  values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
): void {
  chdl = SKStore.EHandle(
    JSONID::keyType,
    JSONFile::type,
    SKStore.DirName::create(`/${collection}/`),
  );
  values.each(keyValue ->
    chdl.writeArray(
      context,
      JSONID(keyValue.i0),
      keyValue.i1.map(v -> JSONFile(v)),
    )
  );
  updateContext(context);
}

fun delete(
  context: mutable SKStore.Context,
  collection: String,
  key: SKJSON.CJSON,
): void {
  chdl = SKStore.EHandle(
    JSONID::keyType,
    JSONFile::type,
    SKStore.DirName::create(`/${collection}/`),
  );
  chdl.writeArray(context, JSONID(key), Array[]);
  updateContext(context);
}

fun createReactiveResource(
  context: mutable SKStore.Context,
  identifier: String,
  resource: String,
  params: SKJSON.CJSON,
): ResourceInfo {
  definition = ResourceDef(resource, params);
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  key = SKStore.SID(identifier);
  resourceHdl.maybeGet(context, key) match {
  | Some _ -> throw ExistingResourceException()
  | _ -> void
  };
  resourceHdl.writeArray(context, key, Array[definition]);
  updateContext(context);
  graphHdl = SKStore.EHandle(
    ResourceDef::keyType,
    ResourceInfo::type,
    kResourceCollectionsDir,
  );
  graphHdl.get(context, definition);
}

fun checkGarbage(context: mutable SKStore.Context): void {
  garbageHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
  );
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  time = Time.time_ms();
  destroyed = mutable Vector[];
  garbageHdl.items(context).each(kf -> {
    kf.i1.next().each(f -> {
      suppressed = SKStore.IntFile::type(f).value;
      if (time - suppressed > kGarbageMillis) {
        key = SKStore.SID::keyType(kf.i0);
        destroyed.push(key);
        resourceHdl.writeArray(context, key, Array[]);
      }
    })
  });
  destroyed.each(key -> garbageHdl.writeArray(context, key, Array[]));
  if (!destroyed.isEmpty()) context.update();
}

fun updateContext(context: mutable SKStore.Context): void {
  context.update();
  checkGarbage(context);
}

module end;
