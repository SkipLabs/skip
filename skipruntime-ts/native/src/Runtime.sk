module SkipRuntime;

const kKeyToKey: SKStore.Key ~> SKStore.Key = k ~> k;
const kFileToFile: SKStore.File ~> SKStore.File = f ~> f;
const kGarbageMillis: Int = 30000;

class ReadInCreatorException() extends Exception {
  fun getMessage(): String {
    "A collection cannot be read in it's creator."
  }
}

class ExistingResourceException() extends Exception {
  fun getMessage(): String {
    "A resource instance with specified identifier already exists."
  }
}

class Params(value: Map<String, PValue>) extends SKStore.File uses Orderable {
  fun compare(other: Params): Order {
    keys = this.value.keys().collect(Array).sorted();
    okeys = other.value.keys().collect(Array).sorted();
    kcomp = keys.compare(okeys);
    if (kcomp == EQ()) {
      for (key in keys) {
        vcomp = this.value.get(key).compare(other.value.get(key));
        if (vcomp != EQ()) {
          break vcomp
        }
      } else {
        EQ()
      }
    } else {
      kcomp
    }
  }
}

class ResourceCollections(
  value: SKStore.EHandle<SKStore.SID, ResourceInfo>,
) extends SKStore.File

class Handle(
  value: SKStore.EHandle<SKStore.Key, SKStore.File>,
) extends SKStore.File

class ConvReducer(
  private fileConverter: FileConverter,
  private accConverter: FileConverter,
  private reducer: Reducer<SKJSON.CJSON, SKJSON.CJSON>,
) extends Reducer<SKStore.File, SKStore.File> {
  fun getType(): SKStore.File ~> SKStore.File {
    f ~> f
  }

  fun add(acc: SKStore.File, value: SKStore.File): SKStore.File {
    this.accConverter.fromJSON(
      this.reducer.add(
        this.accConverter.toJSON(acc),
        this.fileConverter.toJSON(value),
      ),
    );
  }

  fun remove(acc: SKStore.File, value: SKStore.File): ?SKStore.File {
    this.reducer.remove(
      this.accConverter.toJSON(acc),
      this.fileConverter.toJSON(value),
    ).map(this.accConverter.fromJSON)
  }
}

class ResourceCollection(value: Collection) extends SKStore.File

class ResourceDef(
  name: String,
  params: Params,
) extends SKStore.File, SKStore.Key {
  //
  fun toString(): String {
    `${this.name}:${paramsToString(this.params.value)}`
  }
}

class ResourceStatus(
  loadable: SKStore.DirName,
  status: Status,
) extends SKStore.File {}

class ServiceFile(value: Map<String, Collection>) extends SKStore.File

base class Status(created: Int, modified: Int) uses Show {
  children =
  | Loading()
  | Error(error: SKJSON.CJSON)
  | Ok()

  static fun create(): Status {
    time = Time.time_ms();
    Loading(time, time)
  }

  fun ok(): Status {
    Ok(this.created, Time.time_ms())
  }

  fun err(error: SKJSON.CJSON): Status {
    Error(error, this.created, Time.time_ms())
  }

  fun toString(): String
  | Loading(created, modified) ->
    `Loading{created: ${created}, modified: ${modified}}`
  | Error(error, created, modified) ->
    `Error{error: ${error.toJSON()}, created: ${created}, modified: ${modified}}`
  | Ok(created, modified) -> `Ok{created: ${created}, modified: ${modified}}`
}

class StatusFile(status: Status) extends SKStore.File

class RequestFile(
  timestamp: Int,
  resource: ResourceInfo,
  checker: ?Checker,
) extends SKStore.File

class RequestStatuses(statuses: Array<ResourceStatus>) extends SKStore.File {
  //
  fun getResult<T>(request: String, values: T): GetResult<T> {
    errors = mutable Vector[];
    loading: Bool = false;
    for (resourceStatus in this.statuses) {
      resourceStatus.status match {
      | Error(error, _, _) -> errors.push(error)
      | Loading _ -> !loading = true
      | Ok _ -> void
      }
    };
    GetResult(if (loading) Some(request) else None(), values, errors.toArray())
  }

  fun isLoading(): Bool {
    for (resourceStatus in this.statuses) {
      resourceStatus.status match {
      | Loading _ -> break true
      | Error _
      | Ok _ ->
        void
      }
    } else {
      false
    }
  }

  fun getErrors(): Array<SKJSON.CJSON> {
    errors = mutable Vector[];
    for (resourceStatus in this.statuses) {
      resourceStatus.status match {
      | Error(error, _, _) -> errors.push(error)
      | Loading _
      | Ok _ ->
        void
      }
    };
    errors.toArray()
  }
}

class RemoteSpecifiers(
  value: Map<String, ExternalService>,
) extends SKStore.File

class ResourceInfo(
  name: String,
  collection: Collection,
  statusRef: SKStore.DirName,
  session: String,
) extends SKStore.File {
  /**
   * Create a status request
   */
  fun createRequest(
    context: mutable SKStore.Context,
    optChecker: ?Checker,
  ): String {
    requestId = Ksuid::create().toString();
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestFile::type,
      this.statusRef.sub("requests"),
    ).writeArray(
      context,
      SKStore.SID(requestId),
      Array[RequestFile(Time.time_ms(), this, optChecker)],
    );
    updateContext(context);
    requestId;
  }

  fun getResult<T>(
    context: mutable SKStore.Context,
    request: String,
    values: T,
  ): GetResult<T> {
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestStatuses::type,
      this.statusRef.sub("all"),
    ).maybeGet(context, SKStore.SID(request)) match {
    | Some(statuses) -> statuses.getResult(request, values)
    | _ -> GetResult(None(), values, Array[])
    }
  }

  fun clearRequest(context: mutable SKStore.Context, requestId: String): void {
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestFile::type,
      this.statusRef.sub("requests"),
    ).writeArray(context, SKStore.SID(requestId), Array[]);
  }
}

fun initCtx(): SKStore.Context {
  SKStore.Context{}
}

class Input(
  name: String,
  values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
  keyConverter: KeyConverter,
  fileConverter: FileConverter,
)

fun buildResourcesGraph(
  context: mutable SKStore.Context,
  session: String,
  statusHdl: SKStore.EHandle<SKStore.IID, ResourceStatus>,
  servicesHdl: SKStore.EHandle<SKStore.SID, ServiceFile>,
  inputCollections: Map<String, Collection>,
  resources: Map<String, ResourceBuilder>,
): void {
  dirname = kResourceSessionDir;
  dDirname = dirname.sub("data");
  resourcesHdl = context.mkdir(
    SKStore.SID::keyType,
    ResourceDef::type,
    dirname,
    Array[],
  );
  _ = context.mkdir(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
    Array[],
  );
  idbyresourceHdl = resourcesHdl.map(
    ResourceDef::keyType,
    SKStore.StringFile::type,
    context,
    dirname.sub("idbyresource"),
    (_c, writer, key, it) ~> {
      writer.set(it.first, SKStore.StringFile(key.value));
    },
  );
  availablesHdl = idbyresourceHdl.map(
    ResourceDef::keyType,
    SKStore.IntFile::type,
    context,
    dirname.sub("availables"),
    (_c, writer, key, _it) ~> {
      // map to ignore array changes
      // to prevent recompute on each add/remove session
      writer.set(key, SKStore.IntFile(1))
    },
  );
  _ = availablesHdl.map(
    ResourceDef::keyType,
    ResourceInfo::type,
    context,
    kResourceCollectionsDir,
    (context, writer, key, _it) ~> {
      pushContext(context);
      try {
        resourceId = toResourceId(key.name, key.params.value);
        statusRef = dirname.sub(resourceId);
        // Status graph
        sStatusHdl = context
          .mkdir(
            SKStore.DirName::keyType,
            StatusFile::type,
            statusRef.sub("status"),
            Array[],
            true,
          )
          .map(
            SKStore.IID::keyType,
            ResourceStatus::type,
            context,
            statusRef.sub("statuses"),
            (_ctx, writer, key, it) ~> {
              writer.set(SKStore.IID(0), ResourceStatus(key, it.first.status));
            },
          );
        _sRequestsHdl = context
          .mkdir(
            SKStore.SID::keyType,
            RequestFile::type,
            statusRef.sub("requests"),
            Array[],
            true,
          )
          .map(
            SKStore.SID::keyType,
            RequestStatuses::type,
            context,
            statusRef.sub("all"),
            (ctx, writer, key, it) ~> {
              rf = it.first;
              timestamp = rf.timestamp;
              statuses = statusHdl
                .getArray(ctx, SKStore.IID(0))
                .concat(sStatusHdl.getArray(ctx, SKStore.IID(0)))
                .filter(rs -> rs.status.created <= timestamp);
              requestStatuses = RequestStatuses(statuses);
              writer.set(key, requestStatuses);
              rf.checker match {
              | Some(checker) if (!requestStatuses.isLoading()) ->
                ctx.postpone(CheckRequest(statusRef, key, checker))
              | _ -> void
              }
            },
          );
        resourceBuilder = resources.get(key.name);
        resource = resourceBuilder.build(key.params.value);
        allCollections = mutable Map[];
        inputCollections.each((k, c) -> allCollections.add(k, c));
        servicesHdl.get(context, SKStore.SID(session)).value.each((k, c) ->
          allCollections.set(k, c)
        );
        collection = resource.instantiate(allCollections.chill());
        // Ensure the name of the resource result
        resourceData = collection.hdl.map(
          kKeyToKey,
          kFileToFile,
          context,
          dDirname.sub(resourceId),
          (_ctx, writer, key, it) ~> {
            writer.setArray(key, it.collect(Array));
          },
        );
        writer.set(
          key,
          ResourceInfo(
            resourceId,
            collection with {hdl => resourceData},
            statusRef,
            session,
          ),
        );
        popContext()
      } catch {
      | ex ->
        popContext();
        throw ex
      }
    },
  );
}

fun initService(service: Service): Result<void, .Exception> {
  if (SKStore.gHasContext() == 0) {
    SKStore.gContextInit(initCtx());
  };
  session = Ksuid::create().toString();
  SKStore.runWithResult(context ~> {
    context.setPersistent(
      kRemoteSpecifiers,
      RemoteSpecifiers(service.remoteCollections),
    );
    if (context.unsafeMaybeGetEagerDir(kSessionDir) is None()) {
      sessionHdl = context.mkdir(
        SKStore.IID::keyType,
        SKStore.StringFile::type,
        kSessionDir,
        Array[(SKStore.IID(0), SKStore.StringFile(session))],
      );
      mInputs = mutable Map<String, Collection>[];
      service.initialData.each(input -> {
        iDirName = SKStore.DirName::create(`/${input.name}/`);
        context.mkdirMulti(
          iDirName,
          input.values.map(v ->
            (
              input.keyConverter.fromJSON(v.i0),
              v.i1.map(input.fileConverter.fromJSON),
            )
          ),
        );
        iHdl = SKStore.EHandle<SKStore.Key, SKStore.File>(
          kKeyToKey,
          kFileToFile,
          iDirName,
        );
        mInputs.add(
          input.name,
          Collection(iHdl, input.keyConverter, input.fileConverter),
        )
      });
      inputCollections = mInputs.chill();
      servicesHdl = sessionHdl.map(
        SKStore.SID::keyType,
        ServiceFile::type,
        context,
        kGraphDir,
        (ctx, writer, _key, it) ~> {
          pushContext(ctx);
          try {
            writer.set(
              SKStore.SID(it.first.value),
              ServiceFile(service.createGraph(inputCollections)),
            );
            popContext()
          } catch {
          | ex ->
            popContext();
            throw ex
          }
        },
      );
      // Service status
      statusHdl = context
        .mkdir(
          SKStore.DirName::keyType,
          StatusFile::type,
          kSessionDir.sub("status"),
          Array[],
        )
        .map(
          SKStore.IID::keyType,
          ResourceStatus::type,
          context,
          kSessionDir.sub("statuses"),
          (_ctx, writer, key, it) ~> {
            writer.set(SKStore.IID(0), ResourceStatus(key, it.first.status));
          },
        );
      buildResourcesGraph(
        context,
        session,
        statusHdl,
        servicesHdl,
        inputCollections,
        service.resources,
      )
    } else {
      SKStore.EHandle(
        SKStore.IID::keyType,
        SKStore.StringFile::type,
        kSessionDir,
      ).writeArray(context, SKStore.IID(0), Array[SKStore.StringFile(session)]);
    };
    updateContext(context);
  })
}

fun closeService(): Result<void, .Exception> {
  SKStore.runWithResult(context ~> {
    resourceHdl = SKStore.EHandle(
      SKStore.SID::keyType,
      ResourceDef::type,
      kResourceSessionDir,
    );
    todestroy = mutable Vector[];
    resourceHdl.items(context).each(kf -> {
      kf.i1.next().each(_f -> todestroy.push(SKStore.SID::keyType(kf.i0)))
    });
    todestroy.each(key -> {
      resourceHdl.writeArray(context, key, Array[]);
    });
    context
      .getPersistent(kRemoteSpecifiers)
      .map(RemoteSpecifiers::type)
      .map(v -> v.value)
      .each(remoteCollections -> {
        remoteCollections.each((_k, es) -> es.shutdown());
      });
    context.removePersistent(kRemoteSpecifiers);
    context.update();
  })
}

class CheckRequest(
  statusRef: SKStore.DirName,
  request: SKStore.SID,
  checker: Checker,
) extends SKStore.Postponable {
  //
  fun perform(context: mutable SKStore.Context): void {
    pushContext(context);
    this.checker.check(this.request.value);
    popContext();
    SKStore.EHandle(
      SKStore.SID::keyType,
      RequestFile::type,
      this.statusRef.sub("requests"),
    ).writeArray(context, this.request, Array[]);
  }
}

class LinkToResource(
  supplier: ExternalService,
  writer: CollectionWriter,
  name: String,
  params: Map<String, PValue>,
) extends SKStore.Postponable {
  //
  fun perform(context: mutable SKStore.Context): void {
    this.writer.status(context, Status::create());
    pushContext(context);
    this.supplier.subscribe(this.writer, this.name, this.params);
    popContext();
  }
}

class CloseResource(
  supplier: ExternalService,
  name: String,
  params: Map<String, PValue>,
) extends SKStore.Postponable {
  fun perform(context: mutable SKStore.Context): void {
    pushContext(context);
    this.supplier.unsubscribe(this.name, this.params);
    popContext();
  }
}

/**
 * Creates a lazy reactive collection.
 * @param compute - the function to compute entries of the lazy collection
 * @param params - any additional parameters to the computation
 * @returns The resulting lazy collection
 */
fun createLazyCollection(compute: LazyCompute): LazyCollection {
  getContext() match {
  | Some(context) ->
    collectionId = `collection_${SKStore.genSym(0)}`;
    dirName = subDirName(context, collectionId);
    keyConverter = compute.getKeyConverter();
    fileConverter = compute.getFileConverter();
    lhdl = SKStore.LHandle::create(
      kKeyToKey,
      kFileToFile,
      context,
      dirName,
      (ctx, self, key) ~> {
        pushContext(ctx);
        try {
          lazyCollection = LazyCollection(self, keyConverter, fileConverter);
          res = compute
            .compute(lazyCollection, keyConverter.toJSON(key))
            .map(fileConverter.fromJSON);
          popContext();
          res
        } catch {
        | ex ->
          popContext();
          throw ex
        }
      },
    );
    LazyCollection(lhdl, keyConverter, fileConverter)

  | _ -> invariant_violation("Store context must be specified.")
  }
}

fun jsonExtract(from: SKJSON.CJObject, pattern: String): Array<SKJSON.CJSON> {
  fieldsList = SKJSON.PatternParser::mcreate(pattern)
    .toplevelPattern()
    .pmatch(from)
    .collect(Array);
  values = mutable Vector[];
  fieldsList.each(fields -> {
    array = fields.collect(Array).map(field -> {
      cjfields = SKJSON.CJFields::create(Array[field], x -> x);
      SKJSON.CJObject(cjfields)
    });
    values.push(SKJSON.CJArray(array));
  });
  values.toArray()
}

fun useExternalCollection(
  supplier: String,
  resource: String,
  params: Map<String, PValue>,
): Collection {
  getContext() match {
  | Some(context) ->
    remoteCollections = context
      .getPersistent(kRemoteSpecifiers)
      .map(RemoteSpecifiers::type)
      .map(v -> v.value)
      .fromSome();

    externalSupplier = remoteCollections.get(supplier);
    collectionId = toSuppliedResourceId(supplier, resource, params);
    dirName = subDirName(context, collectionId);
    paramsDir = dirName.sub("params");
    dataDir = dirName.sub("data");
    hdl = context.mkdir(
      SKStore.IID::keyType,
      Params::type,
      paramsDir,
      Array[(SKStore.IID(0), Params(params))],
    );
    collectionHdl = hdl.map(
      SKStore.IID::keyType,
      Handle::type,
      context,
      dirName,
      (context, writer, key, it) ~> {
        name = mutable Vector<String>[];
        it.first.value.each((k, v) -> name.push(`${k}:${v}`));
        storeDir = dirName.sub(base64(name.join("|")));
        store = context.mkdir(
          kKeyToKey,
          kFileToFile,
          storeDir,
          Array[],
          true,
          Some(
            LinkToResource(
              externalSupplier,
              CollectionWriter(storeDir),
              resource,
              it.first.value,
            ),
          ),
          Some(CloseResource(externalSupplier, resource, it.first.value)),
        );
        writer.set(key, Handle(store));
      },
    );
    Collection(
      hdl.map(
        kKeyToKey,
        kFileToFile,
        context,
        dataDir,
        (context, writer, key, _it) ~> {
          remote = collectionHdl.get(context, key).value;
          remote.items(context).each(kv -> {
            writer.setArray(kv.i0, kv.i1.collect(Array))
          });
        },
      ),
      JSONKeyConverter(),
      JSONFileConverter(),
    )
  | _ -> invariant_violation("Store context must be specified.")
  }
}

class Collection(
  hdl: SKStore.EHandle<SKStore.Key, SKStore.File>,
  keyConverter: KeyConverter,
  fileConverter: FileConverter,
) {
  //
  static fun forName(
    name: String,
    keyConverter: KeyConverter,
    fileConverter: FileConverter,
  ): Collection {
    hdl = SKStore.EHandle(
      kKeyToKey,
      kFileToFile,
      SKStore.DirName::create(name),
    );
    Collection(hdl, keyConverter, fileConverter)
  }

  fun getId(): String {
    this.hdl.getDirName().toString();
  }

  /**
   * Get (and potentially compute) all values mapped to by some key of a lazy reactive
   * collection.
   */
  fun getArray(key: SKJSON.CJSON): Array<SKJSON.CJSON> {
    getContext() match {
    | Some(context) ->
      dir = context.unsafeGetEagerDir(this.hdl.dirName);
      if (dir.creator == context.currentArrow()) {
        throw ReadInCreatorException()
      };
      dir
        .getArray(context, this.keyConverter.fromJSON(key))
        .map(this.fileConverter.toJSON)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Get a value of an eager reactive collection, if one exists.
   * If multiple values are mapped to by the key, any of them can be returned.
   * @returns the value for this `key`, or null if no such value exists
   */
  fun getUnique(key: SKJSON.CJSON): ?SKJSON.CJSON {
    value = this.getArray(key);
    if (value.size() == 1) Some(value[0]) else None();
  }

  /**
   * Create a new eager collection by mapping some computation over this one
   * @param mapper - function to apply to each element of this collection
   * @returns The resulting (eager) output collection
   */
  fun map(mapper: Mapper): Collection {
    this.map_(mapper, None())
  }

  /**
   * Create a new eager reactive collection by mapping some computation `mapper` over this
   * one and then reducing the results with `reducer`
   * @param mapper - function to apply to each element of this collection
   * @param reducer - function to combine results of the `mapper`
   * @returns An eager collection containing the output of the reducer
   */
  fun mapReduce(
    mapper: Mapper,
    reducer: Reducer<SKJSON.CJSON, SKJSON.CJSON>,
    accConverter: FileConverter,
  ): Collection {
    getContext() match {
    | Some(context) ->
      keyConverter = this.keyConverter;
      fileConverter = this.fileConverter;
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      hdl = this.hdl.mapReduce(
        kKeyToKey,
        kFileToFile,
        context,
        dirName,
        (ctx, writer, key, values) ~> {
          pushContext(ctx);
          try {
            for (entry in mapper.mapEntry(
              keyConverter.toJSON(key),
              values.map(fileConverter.toJSON),
            )) {
              writer.append(
                keyConverter.fromJSON(entry.i0),
                fileConverter.fromJSON(entry.i1),
              )
            };
            popContext();
          } catch {
          | ex ->
            popContext();
            throw ex
          }
        },
        accReducer(
          ConvReducer(
            fileConverter,
            accConverter,
            reducer,
            accConverter.fromJSON(reducer.default),
          ),
        ),
      );
      Collection(hdl, mapper.getKeyConverter(), mapper.getFileConverter())
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Create a new eager collection by keeping only the elements whose keys are in
   * the given ranges.
   */
  fun sliced(ranges: Array<(SKJSON.CJSON, SKJSON.CJSON)>): Collection {
    this.map_(
      IdentityMapper(this.keyConverter, this.fileConverter),
      Some(ranges),
    )
  }

  /**
   * Create a new eager collection by keeping the given number of the first elements.
   */
  fun take(limit: Int): Collection {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      resHdl = this.hdl.filter(
        context,
        dirName,
        limit,
        noFilter,
        countElementAsOne,
        removeElementAsOne,
        None(),
      );
      Collection(resHdl, this.keyConverter, this.fileConverter)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Combine some eager collections into one, associating with each key _all_ values
   * associated with that key in any of the input collections.
   * @param others - some other eager collections of compatible type
   * @returns The resulting combination of all input key/value pairs
   */
  fun merge(others: Array<Collection>): Collection {
    getContext() match {
    | Some(context) ->
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      hdl = SKStore.EHandle::multiMap(
        kKeyToKey,
        kFileToFile,
        context,
        Array[this].concat(others).map(c ->
          c match {
          | ci @ Collection _ -> (ci.hdl, (identityMap, None()))
          }
        ),
        dirName,
      );
      Collection(hdl, this.keyConverter, this.fileConverter)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Get the current number of elements in the collection
   * @returns The current number of elements in the collection
   */
  fun size(): Int {
    getContext() match {
    | Some(context) ->
      dir = context.unsafeGetEagerDir(this.hdl.dirName);
      if (dir.creator == context.currentArrow()) {
        throw ReadInCreatorException()
      };
      dir.size(context)
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  fun getAll(
    context: mutable SKStore.Context,
  ): Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)> {
    values = mutable Vector<(SKJSON.CJSON, Array<SKJSON.CJSON>)>[];
    dir = context.unsafeGetEagerDir(this.hdl.getDirName());
    for (kv in dir.unsafeGetFileIter()) {
      (key, files) = kv;
      values.push(
        (
          this.keyConverter.toJSON(key),
          files.collect(Array).map(this.fileConverter.toJSON),
        ),
      );
    };
    values.toArray();
  }

  fun items(
    context: mutable SKStore.Context,
  ): mutable Iterator<(SKStore.Key, mutable Iterator<SKStore.File>)> {
    this.hdl.items(context)
  }

  fun subscribe(
    context: mutable SKStore.Context,
    session: Int,
    from: SKStore.Tick,
    notify: (
      Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
      SKStore.Tick,
      Bool,
    ) ~> void,
  ): void {
    keyConverter = this.keyConverter;
    fileConverter = this.fileConverter;
    context.subscribe(
      session,
      SKStore.NWatch(
        from,
        (_dirName, values, tick, update) ~> {
          notify(
            values.map(v ->
              (keyConverter.toJSON(v.i0), v.i1.map(fileConverter.toJSON))
            ),
            tick,
            update,
          )
        },
        true,
      ),
      None(),
      Array[
        SKStore.DirSub(
          this.hdl.getDirName(),
          "",
          SKStore.OJSON(Array[]),
          (__) ~> None(),
        ),
      ],
      Some(from),
    )
  }

  private fun map_(
    mapper: Mapper,
    rangeOpt: ?Array<(SKJSON.CJSON, SKJSON.CJSON)> = None(),
  ): Collection {
    getContext() match {
    | Some(context) ->
      keyConverter = this.keyConverter;
      fileConverter = this.fileConverter;
      collectionId = `collection_${SKStore.genSym(0)}`;
      dirName = this.hdl.dirName.sub(collectionId);
      hdl = this.hdl.map(
        kKeyToKey,
        kFileToFile,
        context,
        dirName,
        (ctx, writer, key, values) ~> {
          pushContext(ctx);
          try {
            for (entry in mapper.mapEntry(
              keyConverter.toJSON(key),
              values.map(fileConverter.toJSON),
            )) {
              writer.append(
                keyConverter.fromJSON(entry.i0),
                fileConverter.fromJSON(entry.i1),
              )
            };
            popContext();
          } catch {
          | ex ->
            popContext();
            throw ex
          }
        },
        rangeOpt.map(v ->
          v.map(r ->
            SKStore.KeyRange(
              keyConverter.fromJSON(r.i0),
              keyConverter.fromJSON(r.i1),
            )
          )
        ),
      );
      Collection(hdl, mapper.getKeyConverter(), mapper.getFileConverter())
    | _ -> invariant_violation("Store context must be specified.")
    }
  }
}

class LazyCollection(
  private hdl: SKStore.LHandle<SKStore.Key, SKStore.File>,
  private keyConverter: KeyConverter,
  private fileConverter: FileConverter,
) {
  //
  static fun forName(
    name: String,
    keyConverter: KeyConverter,
    fileConverter: FileConverter,
  ): LazyCollection {
    hdl = SKStore.LHandle(k ~> k, f ~> f, SKStore.DirName::create(name));
    LazyCollection(hdl, keyConverter, fileConverter)
  }

  fun getId(): String {
    this.hdl.getDirName().toString();
  }

  /**
   * Get (and potentially compute) all values mapped to by some key of a lazy reactive
   * collection.
   */
  fun getArray(key: SKJSON.CJSON): Array<SKJSON.CJSON> {
    getContext() match {
    | Some(context) ->
      this.hdl.getArray(context, this.keyConverter.fromJSON(key)).map(
        this.fileConverter.toJSON,
      )
    | _ -> invariant_violation("Store context must be specified.")
    }
  }

  /**
   * Get (and potentially compute) a value of a lazy reactive collection.
   * @throws {Error} when either zero or multiple such values exist
   */
  fun getUnique(key: SKJSON.CJSON): SKJSON.CJSON {
    getContext() match {
    | Some(context) ->
      this.fileConverter.toJSON(
        this.hdl.get(context, this.keyConverter.fromJSON(key)),
      )
    | _ -> invariant_violation("Store context must be specified.")
    }
  }
}

class CollectionWriter(dirName: SKStore.DirName) {
  //
  fun update(
    values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
    isInit: Bool,
  ): Result<void, .Exception> {
    getContext() match {
    | Some(context) ->
      try {
        this.update_(context, values, isInit);
        this.updateStatus(context, status ~> status.ok());
        Success(void)
      } catch {
      | ex -> Failure(ex)
      }
    | _ ->
      SKStore.runWithResult(context ~> {
        this.update_(context, values, isInit);
        this.updateStatus(context, status ~> status.ok());
        updateContext(context);
      })
    }
  }

  fun error(error: SKJSON.CJSON): Result<void, .Exception> {
    getContext() match {
    | Some(context) ->
      try {
        this.updateStatus(context, status ~> status.err(error));
        Success(void)
      } catch {
      | ex -> Failure(ex)
      }
    | _ ->
      SKStore.runWithResult(context ~> {
        this.updateStatus(context, status ~> status.err(error));
        updateContext(context);
      })
    }
  }

  fun loading(): Result<void, .Exception> {
    getContext() match {
    | Some(context) ->
      try {
        this.status(context, Status::create());
        Success(void)
      } catch {
      | ex -> Failure(ex)
      }
    | _ ->
      SKStore.runWithResult(context ~> {
        this.status(context, Status::create());
        updateContext(context);
      })
    }
  }

  fun status(context: mutable SKStore.Context, status: Status): void {
    context.maybeGetEagerDir(this.dirName) match {
    | Some(dir) ->
      dirname = this.sessionId(context, dir) match {
      | Some(sessionId) -> kResourceSessionDir.sub(sessionId).sub("status")
      | _ -> kSessionDir.sub("status")
      };
      shdl = SKStore.EHandle(
        SKStore.DirName::keyType,
        StatusFile::type,
        dirname,
      );
      shdl.writeArray(context, this.dirName, Array[StatusFile(status)])
    | _ -> void
    };
  }

  fun updateStatus(
    context: mutable SKStore.Context,
    update: Status ~> Status,
  ): void {
    context.maybeGetEagerDir(this.dirName) match {
    | Some(dir) ->
      dirname = this.sessionId(context, dir) match {
      | Some(sessionId) -> kResourceSessionDir.sub(sessionId).sub("status")
      | _ -> kSessionDir.sub("status")
      };
      shdl = SKStore.EHandle(
        SKStore.DirName::keyType,
        StatusFile::type,
        dirname,
      );
      status = update(shdl.get(context, this.dirName).status);
      shdl.writeArray(context, this.dirName, Array[StatusFile(status)])
    | _ -> void
    };
  }

  private fun update_(
    context: mutable SKStore.Context,
    values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
    isInit: Bool,
  ): void {
    dir = context.maybeGetEagerDir(this.dirName) match {
    | Some(dir) -> dir
    | _ -> return void
    };
    keys = if (isInit) {
      dir.keys().map(JSONID::keyType)
    } else {
      SortedSet<JSONID>[]
    };
    chdl = SKStore.EHandle(JSONID::keyType, JSONFile::type, this.dirName);
    values.each(e -> {
      key = JSONID(e.i0);
      fvalues = e.i1.map(v -> JSONFile(v));
      chdl.writeArray(context, key, fvalues);
      !keys = keys.remove(key);
    });
    keys.each(key -> chdl.writeArray(context, key, Array[]));
  }

  private fun sessionId(
    context: mutable SKStore.Context,
    dir: SKStore.EagerDir,
  ): ?String {
    dir.creator match {
    | Some(arrow) ->
      if (this.isResourceDir(arrow.parentName)) {
        Some(base64(SKStore.SID::keyType(arrow.key).value))
      } else {
        context.maybeGetEagerDir(arrow.parentName) match {
        | Some(sdir) -> this.sessionId(context, sdir)
        | _ -> None()
        }
      }
    | _ -> None()
    }
  }

  private fun isResourceDir(dirName: SKStore.DirName): Bool {
    dirName == kResourceSessionDir
  }
}

value class GetResult<T>(
  request: ?String,
  values: T,
  errors: Array<SKJSON.CJSON>,
) {
  fun loading(): Bool {
    this.request.isSome()
  }
}

fun createReactiveResource(
  context: mutable SKStore.Context,
  identifier: String,
  resource: String,
  params: Map<String, PValue>,
): void {
  _ = createResource_(context, identifier, resource, params);
}

fun getAll(
  context: mutable SKStore.Context,
  resourceName: String,
  params: Map<String, PValue>,
  optRequest: ?Request,
): GetResult<Values> {
  resourceInstanceId = Ksuid::create().toString();
  resource = createResource_(context, resourceInstanceId, resourceName, params);
  // create requests
  request = optRequest match {
  | Some(checker @ Checker _) -> resource.createRequest(context, Some(checker))
  | Some(Identifier(req)) -> req
  | _ -> resource.createRequest(context, None())
  };
  values = Values(
    resource.collection.getAll(context),
    `${resource.session}/${context.tick}`,
  );
  // return result type
  res = resource.getResult(context, request, values);
  if (!res.loading()) {
    optRequest match {
    | Some(Identifier _)
    | None() ->
      resource.clearRequest(context, request);
      closeReactiveResource(context, resourceInstanceId, false)
    | Some(Checker _) -> void
    };
  };
  res;
}

fun getForKey(
  context: mutable SKStore.Context,
  resourceName: String,
  params: Map<String, PValue>,
  key: SKJSON.CJSON,
  optRequest: ?Request,
): GetResult<Array<SKJSON.CJSON>> {
  resourceInstanceId = Ksuid::create().toString();
  resource = createResource_(context, resourceInstanceId, resourceName, params);
  // create requests
  request = optRequest match {
  | Some(checker @ Checker _) -> resource.createRequest(context, Some(checker))
  | Some(Identifier(req)) -> req
  | _ -> resource.createRequest(context, None())
  };
  pushContext(context);
  values = resource.collection.getArray(key);
  popContext();
  // return result type
  res = resource.getResult(context, request, values);
  if (!res.loading()) {
    optRequest match {
    | Some(Identifier _)
    | None() ->
      resource.clearRequest(context, request);
      closeReactiveResource(context, resourceInstanceId, false)
    | Some(Checker _) -> void
    };
  };
  res;
}

fun closeReactiveResource(
  context: mutable SKStore.Context,
  identifier: String,
  update: Bool = true,
): void {
  garbageHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
  );
  sid = SKStore.SID(identifier);
  if (garbageHdl.maybeGet(context, sid).isSome()) return void;
  time = Time.time_ms();
  garbageHdl.writeArray(context, sid, Array[SKStore.IntFile(time)]);
  if (update) updateContext(context);
}

fun subscribe(
  context: mutable SKStore.Context,
  identifier: String,
  notify: (Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>, String, Bool) ~> void,
  optWatermark: ?String,
): Int {
  garbageHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
  );
  sid = SKStore.SID(identifier);
  session = SKStore.genSym(0);
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  resourcesCollectionsHdl = SKStore.EHandle(
    ResourceDef::keyType,
    ResourceInfo::type,
    kResourceCollectionsDir,
  );
  resourceHdl.maybeGet(context, sid) match {
  | Some(definition) ->
    info = resourcesCollectionsHdl.get(context, definition);
    start = `${info.session}/`;
    from = optWatermark match {
    | Some(watermark) if (watermark.startsWith(start)) ->
      watermark.stripPrefix(start).toInt()
    | _ -> 0
    };
    info.collection.subscribe(
      context,
      session,
      SKStore.Tick(from),
      (values, tick, update) ~> {
        notify(values, `${info.session}/${tick}`, update)
      },
    );
    if (garbageHdl.maybeGet(context, sid).isSome()) {
      garbageHdl.writeArray(context, sid, Array[]);
      context.update();
    };
    checkGarbage(context);
    session
  | _ -> -1
  }
}

fun unsubscribe(context: mutable SKStore.Context, session: Int): void {
  context.unsubscribe(session)
}

// WRITES

fun put(
  context: mutable SKStore.Context,
  collection: String,
  key: SKJSON.CJSON,
  value: Array<SKJSON.CJSON>,
): void {
  chdl = SKStore.EHandle(
    JSONID::keyType,
    JSONFile::type,
    SKStore.DirName::create(`/${collection}/`),
  );
  chdl.writeArray(context, JSONID(key), value.map(v -> JSONFile(v)));
  updateContext(context);
}

fun update(
  context: mutable SKStore.Context,
  collection: String,
  values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
): void {
  chdl = SKStore.EHandle(
    JSONID::keyType,
    JSONFile::type,
    SKStore.DirName::create(`/${collection}/`),
  );
  values.each(keyValue ->
    chdl.writeArray(
      context,
      JSONID(keyValue.i0),
      keyValue.i1.map(v -> JSONFile(v)),
    )
  );
  updateContext(context);
}

fun delete(
  context: mutable SKStore.Context,
  collection: String,
  key: SKJSON.CJSON,
): void {
  chdl = SKStore.EHandle(
    JSONID::keyType,
    JSONFile::type,
    SKStore.DirName::create(`/${collection}/`),
  );
  chdl.writeArray(context, JSONID(key), Array[]);
  updateContext(context);
}

private fun createResource_(
  context: mutable SKStore.Context,
  identifier: String,
  resource: String,
  params: Map<String, PValue>,
): ResourceInfo {
  definition = ResourceDef(resource, Params(params));
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  key = SKStore.SID(identifier);
  resourceHdl.maybeGet(context, key) match {
  | Some _ -> throw ExistingResourceException()
  | _ -> void
  };
  resourceHdl.writeArray(context, key, Array[definition]);
  updateContext(context);
  graphHdl = SKStore.EHandle(
    ResourceDef::keyType,
    ResourceInfo::type,
    kResourceCollectionsDir,
  );
  graphHdl.get(context, definition);
}

fun checkGarbage(context: mutable SKStore.Context): void {
  garbageHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    SKStore.IntFile::type,
    kResourceGarbageDir,
  );
  resourceHdl = SKStore.EHandle(
    SKStore.SID::keyType,
    ResourceDef::type,
    kResourceSessionDir,
  );
  time = Time.time_ms();
  destroyed = mutable Vector[];
  garbageHdl.items(context).each(kf -> {
    kf.i1.next().each(f -> {
      suppressed = SKStore.IntFile::type(f).value;
      if (time - suppressed > kGarbageMillis) {
        key = SKStore.SID::keyType(kf.i0);
        destroyed.push(key);
        resourceHdl.writeArray(context, key, Array[]);
      }
    })
  });
  destroyed.each(key -> garbageHdl.writeArray(context, key, Array[]));
  if (!destroyed.isEmpty()) context.update();
}

fun updateContext(context: mutable SKStore.Context): void {
  context.update();
  checkGarbage(context);
}

module end;
