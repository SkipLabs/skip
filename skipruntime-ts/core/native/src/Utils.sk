module SkipRuntime;

const kSessionDir: SKStore.DirName = SKStore.DirName::create(
  "/sk_prv/sessions/",
);
const kTokenDir: SKStore.DirName = SKStore.DirName::create("/sk_prv/tokens/");
const kGraphDir: SKStore.DirName = SKStore.DirName::create("/sk_prv/graph/");
const kResourceSessionDir: SKStore.DirName = SKStore.DirName::create(
  "/sk_prv/resources/sessions/",
);
const kResourceGraphDir: SKStore.DirName = SKStore.DirName::create(
  "/sk_prv/resources/graph/",
);
const kResourceCollectionsDir: SKStore.DirName = SKStore.DirName::create(
  "/sk_prv/resources/collections/",
);

const kRemoteSpecifiers: String = "SkipRuntime.RemoteSpecifiers";

class JSONKeyConverter() extends KeyConverter {
  fun toJSON(value: SKStore.Key): SKJSON.CJSON {
    JSONID::keyType(value).value
  }

  fun fromJSON(json: SKJSON.CJSON): SKStore.Key {
    JSONID(json)
  }
}

class JSONFileConverter() extends FileConverter {
  fun toJSON(value: SKStore.File): SKJSON.CJSON {
    JSONFile::type(value).value
  }

  fun fromJSON(json: SKJSON.CJSON): SKStore.File {
    JSONFile(json)
  }
}

class JSONID(value: SKJSON.CJSON) extends SKStore.Key {
  //
  fun toString(): String {
    this.value.prettyPrint()
  }
}

class JSONFile(value: SKJSON.CJSON) extends SKStore.File

fun accReducer<V1: SKStore.File, V2: SKStore.File>(
  accumulator: Accumulator<V1, V2>,
): SKStore.EReducer<V1, V2> {
  SKStore.EReducer{
    type => accumulator.getType(),
    canReset => true,
    init => iter ~> {
      acc = accumulator.default;
      for (x in iter) {
        !acc = accumulator.accumulate(acc, x)
      };
      Array[acc]
    },
    update => (state, old, new) ~> {
      acc = state[0];
      for (x in old) {
        accumulator.dismiss(acc, x) match {
        | Some(v) -> !acc = v
        | _ -> return None()
        }
      };
      for (x in new) {
        !acc = accumulator.accumulate(acc, x)
      };
      Some(Array[acc])
    },
  }
}

fun identityMap<K: SKStore.Key, V: SKStore.File>(
  _context: mutable SKStore.Context,
  writer: mutable SKStore.TWriter<K, V>,
  key: K,
  it: mutable SKStore.NonEmptyIterator<V>,
): void {
  writer.setArray(key, it.collect(Array));
}

class IdentityMapper(
  private keyConverter: KeyConverter,
  private fileConverter: FileConverter,
) extends Mapper {
  //
  fun getKeyConverter(): KeyConverter {
    this.keyConverter
  }

  fun getFileConverter(): FileConverter {
    this.fileConverter
  }

  fun mapElement(
    key: SKJSON.CJSON,
    it: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
  ): mutable Iterator<(SKJSON.CJSON, SKJSON.CJSON)> {
    it.collect(Array).map(v -> (key, v)).iterator()
  }
}

fun noFilter<K: SKStore.Key, V: SKStore.File>(
  _context: readonly SKStore.Context,
  _key: K,
  _value: V,
): Bool {
  true
}

fun countElementAsOne<V: SKStore.File>(_value: SKStore.File): Int {
  1
}

fun removeElementAsOne<V: SKStore.File>(
  _value: V,
  _toRemove: Int,
): SKStore.File {
  invariant_violation("removeElementAsOne called on singleton value");
}

fun subDirName(
  context: mutable SKStore.Context,
  name: String,
): SKStore.DirName {
  path = context.currentArrow() match {
  | Some(arrow) ->
    b64 = base64(arrow.key);
    `${arrow.childName}${b64}/${name}/`
  | None() -> `/sk/${name}/`
  };
  SKStore.DirName::create(path)
}

fun base64<T: Show>(toEncode: T): String {
  encoded = `b64_${Base64.encodeString(toEncode.toString(), true)}`;
  encoded.searchRight(ch ~> ch != '=') match {
  | Some(i) ->
    _ = i.next();
    encoded.getIter().substring(i)
  | None() -> ""
  }
}

fun toSessionName(reactiveAuth: Array<UInt8>): String {
  encoded = `b64_${Base64.encodeBytes(reactiveAuth, true)}`;
  encoded.searchRight(ch ~> ch != '=') match {
  | Some(i) ->
    _ = i.next();
    encoded.getIter().substring(i)
  | None() -> ""
  }
}

fun paramsToString(params: Map<String, PValue>): String {
  vec = mutable Vector[];
  params.each((k, v) -> vec.push(`${k}:${v}`));
  `{${vec.join(",")}}`
}

fun toResoureId(
  resource: String,
  params: Map<String, PValue>,
  reactiveAuth: ?Array<UInt8>,
): String {
  strParams = base64(paramsToString(params));
  `${resource}_${strParams}_${reactiveAuth.map(toSessionName).default("")}`;
}

fun toSuppliedResoureId(
  supplier: String,
  resource: String,
  params: Map<String, PValue>,
  reactiveAuth: ?Array<UInt8>,
): String {
  `${supplier}_${toResoureId(resource, params, reactiveAuth)}`;
}

fun collectionForName(name: String): Collection {
  Collection::forName(name, JSONKeyConverter(), JSONFileConverter())
}

fun lazyForName(name: String): LazyCollection {
  LazyCollection::forName(name, JSONKeyConverter(), JSONFileConverter())
}

fun collectionsByName(collections: Map<String, Collection>): SKJSON.CJObject {
  fields = mutable Vector[];
  collections.each((k, c) -> fields.push((k, SKJSON.CJString(c.getId()))));
  SKJSON.CJObject(SKJSON.CJFields::create(fields.toArray(), x -> x));
}

fun params(params: SKJSON.CJObject): Map<String, PValue> {
  map = mutable Map[];
  params match {
  | SKJSON.CJObject(fields) ->
    for (fieldName => field in fields) {
      map![fieldName] = field match {
      | SKJSON.CJString(v) -> PString(v)
      | SKJSON.CJInt(v) -> PInt(v)
      | SKJSON.CJFloat(v) -> PFloat(v)
      | _ -> invariant_violation("Invalid parameter value.")
      }
    }
  };
  map.chill()
}

fun jsonParams(params: Map<String, PValue>): SKJSON.CJObject {
  fields = mutable Vector[];
  params.each((k, v) ->
    fields.push(
      (
        k,
        v match {
        | PString(sv) -> SKJSON.CJString(sv)
        | PInt(iv) -> SKJSON.CJInt(iv)
        | PFloat(fv) -> SKJSON.CJFloat(fv)
        },
      ),
    )
  );
  SKJSON.CJObject(SKJSON.CJFields::create(fields.toArray(), x -> x))
}

module end;
