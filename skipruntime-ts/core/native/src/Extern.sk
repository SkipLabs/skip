module SkipRuntime;

@cpp_extern("SkipRuntime_getErrorHdl")
@debug
native fun getErrorHdl(exn: .Exception): Float;

@cpp_extern("SkipRuntime_pushContext")
native fun pushContext(context: mutable SKStore.Context): void;

@cpp_extern("SkipRuntime_popContext")
native fun popContext(): void;

@cpp_extern("SkipRuntime_getContext")
native fun getContext(): ?mutable SKStore.Context;

/************  NonEmptyIterator ****************/

@export("SkipRuntime_NonEmptyIterator__first")
fun firstOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): SKJSON.CJSON {
  if (values.isPastFirstValue) {
    throw SKStore.Error(
      "`first` can't be called after `next` on a NonEmptyIterator",
    )
  };
  values.first
}

@export("SkipRuntime_NonEmptyIterator__uniqueValue")
fun uniqueValueOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): ?SKJSON.CJSON {
  value = values.next();
  if (values.next().isSome()) None() else value
}

@export("SkipRuntime_NonEmptyIterator__next")
fun nextOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): ?SKJSON.CJSON {
  values.next()
}

@export("SkipRuntime_NonEmptyIterator__clone")
fun cloneOfNonEmptyIterator(
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): mutable SKStore.NonEmptyIterator<SKJSON.CJSON> {
  values.clone()
}

/************  Mapper ****************/

@cpp_extern("SkipRuntime_Mapper__mapElement")
@debug
native fun mapElementOfMapper(
  mapper: UInt32,
  key: SKJSON.CJSON,
  values: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
): SKJSON.CJArray;

@cpp_extern("SkipRuntime_deleteMapper")
@debug
native fun deleteMapper(mapper: UInt32): void;

@export("SkipRuntime_createMapper")
fun createMapper(mapper: UInt32): ExternMapper {
  ExternMapper(SKStore.ExternalPointer::create(mapper, deleteMapper))
}

class ExternMapper(eptr: SKStore.ExternalPointer) extends Mapper {
  fun getKeyConverter(): KeyConverter {
    JSONKeyConverter()
  }

  fun getFileConverter(): FileConverter {
    JSONFileConverter()
  }

  fun mapElement(
    key: SKJSON.CJSON,
    it: mutable SKStore.NonEmptyIterator<SKJSON.CJSON>,
  ): mutable Iterator<(SKJSON.CJSON, SKJSON.CJSON)> {
    mapElementOfMapper(this.eptr.value, key, it) match {
    | SKJSON.CJArray(values) ->
      values
        .map(e ->
          e match {
          | SKJSON.CJArray(av) ->
            optKey = av.maybeGet(0);
            optVal = av.maybeGet(1);
            (optKey, optVal) match {
            | (Some(rkey), Some(rval)) -> (rkey, rval)
            | _ -> invariant_violation("Invalid entry.")
            }
          | _ -> invariant_violation("Invalid entry.")
          }
        )
        .iterator()
    }
  }
}

/************  LazyCompute ****************/

@cpp_extern("SkipRuntime_LazyCompute__compute")
@debug
native fun computeOfLazyCompute(
  lazyCompute: UInt32,
  self: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern("SkipRuntime_deleteLazyCompute")
@debug
native fun deleteLazyCompute(lazyCompute: UInt32): void;

@export("SkipRuntime_createLazyCompute")
fun createLazyCompute(lazyCompute: UInt32): ExternLazyCompute {
  ExternLazyCompute(
    SKStore.ExternalPointer::create(lazyCompute, deleteLazyCompute),
  )
}

class ExternLazyCompute(eptr: SKStore.ExternalPointer) extends LazyCompute {
  fun getKeyConverter(): KeyConverter {
    JSONKeyConverter()
  }
  fun getFileConverter(): FileConverter {
    JSONFileConverter()
  }

  fun compute(self: LazyCollection, key: SKJSON.CJSON): Array<SKJSON.CJSON> {
    computeOfLazyCompute(this.eptr.value, self.getId(), key) match {
    | SKJSON.CJArray(value) -> value
    | _ -> invariant_violation("Invalid computed value.")
    }
  }
}

/************  ExternalSupplier ****************/

@cpp_extern("SkipRuntime_ExternalSupplier__link")
@debug
native fun linkOfExternalSupplier(
  externalSupplier: UInt32,
  collection: String,
  resource: String,
  params: SKJSON.CJObject,
  reactiveAuth: ?Array<UInt8>,
): void;

@cpp_extern("SkipRuntime_ExternalSupplier__close")
@debug
native fun closeOfExternalSupplier(
  externalSupplier: UInt32,
  resource: String,
  params: SKJSON.CJObject,
  reactiveAuth: ?Array<UInt8>,
): void;

@cpp_extern("SkipRuntime_ExternalSupplier__shutdown")
@debug
native fun shutdownOfExternalSupplier(externalSupplier: UInt32): void;

@cpp_extern("SkipRuntime_deleteExternalSupplier")
@debug
native fun deleteExternalSupplier(externalSupplier: UInt32): void;

@export("SkipRuntime_createExternalSupplier")
fun createExternalSupplier(externalSupplier: UInt32): ExternExternalSupplier {
  ExternExternalSupplier(
    SKStore.ExternalPointer::create(externalSupplier, deleteExternalSupplier),
  )
}

class ExternExternalSupplier(
  eptr: SKStore.ExternalPointer,
) extends ExternalSupplier {
  fun link(
    collection: CollectionWriter,
    resource: String,
    params: Map<String, PValue>,
    reactiveAuth: ?Array<UInt8>,
  ): void {
    linkOfExternalSupplier(
      this.eptr.value,
      collection.dirName.toString(),
      resource,
      jsonParams(params),
      reactiveAuth,
    )
  }

  fun close(
    resource: String,
    params: Map<String, PValue>,
    reactiveAuth: ?Array<UInt8>,
  ): void {
    closeOfExternalSupplier(
      this.eptr.value,
      resource,
      jsonParams(params),
      reactiveAuth,
    )
  }

  fun shutdown(): void {
    shutdownOfExternalSupplier(this.eptr.value)
  }
}

/************  CollectionWriter ****************/

@export("SkipRuntime_CollectionWriter__update")
fun updateOfCollectionWriter(
  collection: String,
  values: SKJSON.CJArray,
  isInit: Int32,
): Float {
  writer = CollectionWriter(SKStore.DirName::create(collection));
  writer.update(
    values match {
    | SKJSON.CJArray(vs) ->
      vs.map(v -> {
        e = SKJSON.expectArray(v);
        (e[0], SKJSON.expectArray(e[1]))
      })
    },
    isInit != 0,
  ) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************  Resource ****************/

@cpp_extern("SkipRuntime_Resource__reactiveCompute")
@debug
native fun reactiveComputeOfResource(
  resource: UInt32,
  collections: SKJSON.CJObject,
  reactiveAuth: ?Array<UInt8>,
): String;

@cpp_extern("SkipRuntime_deleteResource")
@debug
native fun deleteResource(resource: UInt32): void;

@export("SkipRuntime_createResource")
fun createResource(resource: UInt32): ExternResource {
  ExternResource(SKStore.ExternalPointer::create(resource, deleteResource))
}

class ExternResource(eptr: SKStore.ExternalPointer) extends Resource {
  fun reactiveCompute(
    collections: Map<String, Collection>,
    reactiveAuth: ?Array<UInt8>,
  ): Collection {
    collectionName = reactiveComputeOfResource(
      this.eptr.value,
      collectionsByName(collections),
      reactiveAuth,
    );
    collectionForName(collectionName)
  }
}

/************  ResourceBuilder ****************/

@cpp_extern("SkipRuntime_ResourceBuilder__build")
@debug
native fun buildOfResourceBuilder(
  builder: UInt32,
  params: SKJSON.CJObject,
): Resource;

@cpp_extern("SkipRuntime_deleteResourceBuilder")
@debug
native fun deleteResourceBuilder(resourceBuilder: UInt32): void;

@export("SkipRuntime_createResourceBuilder")
fun createResourceBuilder(resourceBuilder: UInt32): ExternResourceBuilder {
  ExternResourceBuilder(
    SKStore.ExternalPointer::create(resourceBuilder, deleteResourceBuilder),
  )
}

class ExternResourceBuilder(
  eptr: SKStore.ExternalPointer,
) extends ResourceBuilder {
  fun build(params: Map<String, PValue>): Resource {
    buildOfResourceBuilder(this.eptr.value, jsonParams(params))
  }
}

/************  Service ****************/

@export("SkipRuntime_createService")
fun createService(
  service: UInt32,
  jsInputs: SKJSON.CJObject,
  resources: mutable Map<String, ResourceBuilder>,
  remotes: mutable Map<String, ExternalSupplier>,
): ExternService {
  keyConverter = JSONKeyConverter();
  fileConverter = JSONFileConverter();
  inputs = mutable Vector[];
  jsInputs match {
  | SKJSON.CJObject(fields) ->
    for (fieldName => field in fields) {
      inputs.push(
        Input(
          fieldName,
          SKJSON.expectArray(field).map(v -> {
            e = SKJSON.expectArray(v);
            (e[0], e[1])
          }),
          keyConverter,
          fileConverter,
        ),
      )
    }
  };
  ExternService(
    SKStore.ExternalPointer::create(service, deleteService),
    inputs.toArray(),
    resources.chill(),
    remotes.chill(),
  )
}

@cpp_extern("SkipRuntime_deleteService")
@debug
native fun deleteService(service: UInt32): void;

@cpp_extern("SkipRuntime_Service__reactiveCompute")
@debug
native fun reactiveComputeOfService(
  resource: UInt32,
  collections: SKJSON.CJObject,
): SKJSON.CJObject;

class ExternService(eptr: SKStore.ExternalPointer) extends Service {
  //
  fun reactiveCompute(
    inputs: Map<String, Collection>,
  ): Map<String, Collection> {
    names = reactiveComputeOfService(
      this.eptr.value,
      collectionsByName(inputs),
    );
    map = mutable Map[];
    names match {
    | SKJSON.CJObject(nfields) ->
      for (fieldName => field in nfields) {
        map![fieldName] = collectionForName(SKJSON.asString(field));
      }
    };
    map.chill()
  }
}

/************  ResourceBuilderMap ****************/

@export("SkipRuntime_ResourceBuilderMap__create")
fun createOfResourceBuilderMap(): mutable Map<String, ResourceBuilder> {
  mutable Map[]
}

@export("SkipRuntime_ResourceBuilderMap__add")
fun addOfResourceBuilderMap(
  builders: mutable Map<String, ResourceBuilder>,
  name: String,
  builder: ResourceBuilder,
): void {
  builders.add(name, builder)
}

/************  ExternalSupplierMap ****************/

@export("SkipRuntime_ExternalSupplierMap__create")
fun createOfExternalSupplierMap(): mutable Map<String, ExternalSupplier> {
  mutable Map[]
}

@export("SkipRuntime_ExternalSupplierMap__add")
fun addOfExternalSupplierMap(
  suppliers: mutable Map<String, ExternalSupplier>,
  name: String,
  supplier: ExternalSupplier,
): void {
  suppliers.add(name, supplier)
}

/************  Collection ****************/

@export("SkipRuntime_Collection__getArray")
fun getArrayOfCollection(
  collection: String,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  SKJSON.CJArray(collectionForName(collection).getArray(key))
}

@export("SkipRuntime_Collection__maybeGetOne")
fun maybeGetOneOfCollection(
  collection: String,
  key: SKJSON.CJSON,
): ?SKJSON.CJSON {
  collectionForName(collection).maybeGetOne(key)
}

@export("SkipRuntime_Collection__map")
fun mapOfCollection(collection: String, mapper: Mapper): String {
  collectionForName(collection).map(mapper).getId()
}

@export("SkipRuntime_Collection__mapReduce")
fun mapReduceOfCollection(
  collection: String,
  mapper: Mapper,
  accumulator: JSONAccumulator,
): String {
  collectionForName(collection)
    .mapReduce(mapper, accumulator, JSONFileConverter())
    .getId()
}

@export("SkipRuntime_Collection__slice")
fun sliceOfCollection(collection: String, ranges: SKJSON.CJArray): String {
  collectionForName(collection)
    .sliced(
      ranges match {
      | SKJSON.CJArray(values) ->
        values.map(v -> {
          e = SKJSON.expectArray(v);
          (e[0], e[1])
        })
      },
    )
    .getId()
}

@export("SkipRuntime_Collection__take")
fun takeOfCollection(collection: String, limit: Int): String {
  collectionForName(collection).take(limit).getId()
}

@export("SkipRuntime_Collection__merge")
fun mergeOfCollection(collection: String, others: SKJSON.CJArray): String {
  collectionForName(collection)
    .merge(
      others match {
      | SKJSON.CJArray(values) ->
        values.map(c -> collectionForName(SKJSON.asString(c)))
      },
    )
    .getId()
}

@export("SkipRuntime_Collection__size")
fun sizeOfCollection(collection: String): Int {
  collectionForName(collection).size()
}

/************  LazyCollection ****************/

@export("SkipRuntime_LazyCollection__getArray")
fun getArrayOfLazyCollection(lazy: String, key: SKJSON.CJSON): SKJSON.CJArray {
  SKJSON.CJArray(lazyForName(lazy).getArray(key))
}

@export("SkipRuntime_LazyCollection__maybeGetOne")
fun maybeGetOneOfLazyCollection(
  lazy: String,
  key: SKJSON.CJSON,
): ?SKJSON.CJSON {
  lazyForName(lazy).maybeGetOne(key)
}

@export("SkipRuntime_LazyCollection__getOne")
fun getOneOfLazyCollection(lazy: String, key: SKJSON.CJSON): SKJSON.CJSON {
  lazyForName(lazy).getOne(key)
}

/************  Notifier ****************/

@cpp_extern("SkipRuntime_Notifier__notify")
@debug
native fun notifyOfNotifier(
  notifier: UInt32,
  values: SKJSON.CJArray,
  tick: Int,
  updates: Int32,
): void;

@cpp_extern("SkipRuntime_deleteNotifier")
@debug
native fun deleteNotifier(notifier: UInt32): void;

@export("SkipRuntime_createNotifier")
fun createNotifier(notifier: UInt32): Notifier {
  Notifier(SKStore.ExternalPointer::create(notifier, deleteNotifier))
}

class Notifier(eptr: SKStore.ExternalPointer) {
  fun notify(
    values: Array<(SKJSON.CJSON, Array<SKJSON.CJSON>)>,
    tick: SKStore.Tick,
    updates: Bool,
  ): void {
    notifyOfNotifier(
      this.eptr.value,
      SKJSON.CJArray(
        values.map(v -> SKJSON.CJArray(Array[v.i0, SKJSON.CJArray(v.i1)])),
      ),
      tick.value,
      Int32::truncate(if (updates) 1 else 0),
    )
  }
}

/************  Accumulator ****************/

@cpp_extern("SkipRuntime_Accumulator__accumulate")
@debug
native fun accumulateOfAccumulator(
  accumulator: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern("SkipRuntime_Accumulator__dismiss")
@debug
native fun dismissOfAccumulator(
  accumulator: UInt32,
  cumul: SKJSON.CJSON,
  value: SKJSON.CJSON,
): ?SKJSON.CJSON;

@cpp_extern("SkipRuntime_deleteAccumulator")
@debug
native fun deleteAccumulator(accumulator: UInt32): void;

@export("SkipRuntime_createAccumulator")
fun createAccumulator(
  accumulator: UInt32,
  default: SKJSON.CJSON,
): JSONAccumulator {
  JSONAccumulator(
    SKStore.ExternalPointer::create(accumulator, deleteAccumulator),
    default,
  )
}

class JSONAccumulator(
  eptr: SKStore.ExternalPointer,
) extends Accumulator<SKJSON.CJSON, SKJSON.CJSON> {
  fun getType(): SKStore.File ~> SKJSON.CJSON {
    f ~> JSONFile::type(f).value
  }

  fun accumulate(acc: SKJSON.CJSON, value: SKJSON.CJSON): SKJSON.CJSON {
    accumulateOfAccumulator(this.eptr.value, acc, value)
  }

  fun dismiss(cumul: SKJSON.CJSON, value: SKJSON.CJSON): ?SKJSON.CJSON {
    dismissOfAccumulator(this.eptr.value, cumul, value)
  }
}

/************  Runtime ****************/

@export("SkipRuntime_Runtime__createResource")
fun createResourceOfRuntime(
  resource: String,
  jsonParams: SKJSON.CJObject,
  reactiveAuth: ?Array<UInt8>,
): SKJSON.CJSON {
  SKStore.runWithResult(context ~> {
    createReactiveResource(context, resource, params(jsonParams), reactiveAuth)
  }) match {
  | Success(reactive) ->
    SKJSON.CJArray(
      Array[
        SKJSON.CJString(reactive.id),
        SKJSON.CJString(reactive.watermark.value.toString()),
      ],
    )
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_Runtime__getAll")
fun getAllOfRuntime(
  resource: String,
  jsonParams: SKJSON.CJObject,
  reactiveAuth: ?Array<UInt8>,
): SKJSON.CJSON {
  SKStore.runWithResult(context ~> {
    getAll(context, resource, params(jsonParams), reactiveAuth)
  }) match {
  | Success(values) ->
    SKJSON.CJArray(
      Array[
        SKJSON.CJArray(
          values.values.map(v ->
            SKJSON.CJArray(Array[v.i0, SKJSON.CJArray(v.i1)])
          ),
        ),
        SKJSON.CJArray(
          Array[
            SKJSON.CJString(values.reactive.id),
            SKJSON.CJString(values.reactive.watermark.value.toString()),
          ],
        ),
      ],
    )
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_Runtime__getForKey")
fun getForKeyOfRuntime(
  resource: String,
  jsonParams: SKJSON.CJObject,
  key: SKJSON.CJSON,
  reactiveAuth: ?Array<UInt8>,
): SKJSON.CJSON {
  SKStore.runWithResult(context ~> {
    getForKey(context, resource, params(jsonParams), key, reactiveAuth)
  }) match {
  | Success(value) -> SKJSON.CJArray(value)
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_Runtime__closeResource")
fun closeResourceOfRuntime(
  resource: String,
  jsonParams: SKJSON.CJObject,
  reactiveAuth: ?Array<UInt8>,
): Float {
  SKStore.runWithResult(context ~> {
    closeReactiveResource(context, resource, params(jsonParams), reactiveAuth)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__closeSession")
fun closeSessionOfRuntime(reactiveAuth: ?Array<UInt8>): Float {
  SKStore.runWithResult(context ~> {
    closeSession(context, reactiveAuth)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__subscribe")
fun subscribeOfRuntime(
  reactiveId: String,
  from: Int,
  notifier: Notifier,
  reactiveAuth: ?Array<UInt8>,
): SKJSON.CJSON {
  SKStore.runWithResult(context ~> {
    subscribe(
      context,
      reactiveId,
      SKStore.Tick(from),
      notifier.notify,
      reactiveAuth,
    )
  }) match {
  | Success(id) -> SKJSON.CJString(id.toString())
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_Runtime__unsubscribe")
fun unsubscribeOfRuntime(session: Int): Float {
  SKStore.runWithResult(context ~> {
    unsubscribe(context, session)
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_Runtime__update")
fun updateOfRuntime(input: String, values: SKJSON.CJArray): Float {
  SKStore.runWithResult(context ~> {
    update(
      context,
      input,
      values match {
      | SKJSON.CJArray(vs) ->
        vs.map(v -> {
          e = SKJSON.expectArray(v);
          (e[0], SKJSON.expectArray(e[1]))
        })
      },
    )
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************ Context ****************/

@export("SkipRuntime_Context__lazy")
fun lazyOfContext(compute: LazyCompute): String {
  lazy(compute).getId()
}

@export("SkipRuntime_Context__jsonExtract")
fun jsonExtractOfContext(
  from: SKJSON.CJObject,
  pattern: String,
): SKJSON.CJArray {
  SKJSON.CJArray(jsonExtract(from, pattern))
}

@export("SkipRuntime_Context__useExternalResource")
fun useExternalResource(
  supplier: String,
  resource: String,
  jsonparams: SKJSON.CJObject,
  reactiveAuth: ?Array<UInt8>,
): String {
  useExternalCollection(
    supplier,
    resource,
    params(jsonparams),
    reactiveAuth,
  ).getId()
}

/************ initService ****************/

@export("SkipRuntime_initService")
fun initSkipRuntimeService(service: Service): Float {
  initService(service) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

/************ closeService ****************/

@export("SkipRuntime_closeService")
fun closeSkipRuntimeService(): Float {
  closeService() match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

module end;
