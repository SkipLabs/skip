module alias DBUtils = SKDBToFromSKStore;

module SKStore;

@cpp_extern
@debug
native fun applyMapFun(
  fn: UInt32,
  context: mutable Context,
  writer: mutable TWriter<JSONID, JSONFile>,
  key: SKJSON.CJSON,
  values: mutable NonEmptyIterator<JSONFile>,
): void;

@cpp_extern
@debug
native fun applyConvertToRowFun(
  fn: UInt32,
  key: SKJSON.CJSON,
  values: mutable NonEmptyIterator<JSONFile>,
): SKJSON.CJArray;

@cpp_extern
@debug
native fun applyMapTableFun(
  fn: UInt32,
  context: mutable Context,
  writer: mutable TWriter<JSONID, JSONFile>,
  key: SKJSON.CJArray,
  occ: Float,
): void;

@cpp_extern
@debug
native fun init(context: mutable Context): void;

@cpp_extern
@debug
native fun applyLazyFun(
  fn: UInt32,
  context: mutable Context,
  self: LHandle<JSONID, JSONFile>,
  key: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern
@debug
native fun applyParamsFun(
  fn: UInt32,
  context: mutable Context,
  key: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern
@debug
native fun applyLazyAsyncFun(
  fn: UInt32,
  callId: String,
  name: String,
  key: SKJSON.CJSON,
  param: SKJSON.CJSON,
): void;

@cpp_extern
@debug
native fun detachHandle(fn: UInt32): void;

@cpp_extern
@debug
native fun applyAccumulate(
  fn: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern
@debug
native fun applyDismiss(
  fn: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): ?SKJSON.CJSON;

@cpp_extern
@debug
native fun getErrorHdl(exn: .Exception): Float;

// Exports

@export("SkipRuntime_writerSet")
fun writerSet(
  writer: mutable TWriter<JSONID, JSONFile>,
  key: SKJSON.CJSON,
  value: SKJSON.CJSON,
): void {
  writer.set(JSONID(key), JSONFile(value))
}

@export("SkipRuntime_writerSetArray")
fun writerSetArray(
  writer: mutable TWriter<JSONID, JSONFile>,
  key: SKJSON.CJSON,
  values: SKJSON.CJArray,
): void {
  files = values match {
  | SKJSON.CJArray(xs) -> xs.map(x -> JSONFile(x))
  };
  writer.setArray(JSONID(key), files)
}

@export("SkipRuntime_iteratorFirst")
fun iteratorFirst(values: mutable NonEmptyIterator<JSONFile>): SKJSON.CJSON {
  if (values.isPastFirstValue) {
    throw Error("`first` can't be called after `next` on a NonEmptyIterator")
  };
  values.first.value
}

@export("SkipRuntime_iteratorUniqueValue")
fun iteratorUniqueValue(
  values: mutable NonEmptyIterator<JSONFile>,
): ?SKJSON.CJSON {
  value = values.next().map(v -> v.value);
  if (values.next().isSome()) None() else value
}

@export("SkipRuntime_iteratorNext")
fun iteratorNext(values: mutable NonEmptyIterator<JSONFile>): ?SKJSON.CJSON {
  values.next().map(v -> v.value)
}

@export("SkipRuntime_cloneIterator")
fun cloneIterator(
  values: mutable NonEmptyIterator<JSONFile>,
): mutable NonEmptyIterator<JSONFile> {
  values.clone()
}

class FnHandle private (eptr: SKStore.ExternalPointer) extends File {
  static fun make(id: UInt32): this {
    static(SKStore.ExternalPointer::create(id, detachHandle))
  }

  fun getId(): UInt32 {
    this.eptr.value
  }

  fun map(
    context: mutable Context,
    writer: mutable TWriter<JSONID, JSONFile>,
    key: JSONID,
    values: mutable NonEmptyIterator<JSONFile>,
  ): void {
    applyMapFun(this.getId(), context, writer, key.value, values)
  }

  fun lazy(
    context: mutable Context,
    self: LHandle<JSONID, JSONFile>,
    key: JSONID,
  ): Array<JSONFile> {
    Array[JSONFile(applyLazyFun(this.getId(), context, self, key.value))]
  }

  fun params(context: mutable Context, key: JSONID): SKJSON.CJSON {
    applyParamsFun(this.getId(), context, key.value)
  }

  fun callAsync(
    name: String,
    call: String,
    key: JSONID,
    params: SKJSON.CJSON,
  ): void {
    applyLazyAsyncFun(this.getId(), call, name, key.value, params)
  }

  fun mapTable(
    context: mutable Context,
    writer: mutable TWriter<JSONID, JSONFile>,
    row: SKDB.RowValues,
  ): void {
    applyMapTableFun(
      this.getId(),
      context,
      writer,
      DBUtils.toCJArray(row),
      row.repeat.toFloat(),
    )
  }

  fun toRow(
    key: JSONID,
    values: mutable NonEmptyIterator<JSONFile>,
  ): SKJSON.CJArray {
    applyConvertToRowFun(this.getId(), key.value, values)
  }
}

class ExternAccumulator(
  accumulator: FnHandle,
) extends Accumulator<JSONFile, JSONFile> {
  //
  fun getType(): File ~> JSONFile {
    JSONFile::type
  }

  fun accumulate(acc: JSONFile, value: JSONFile): JSONFile {
    JSONFile(applyAccumulate(this.accumulator.getId(), acc.value, value.value))
  }

  fun dismiss(cumul: JSONFile, value: JSONFile): ?JSONFile {
    applyDismiss(this.accumulator.getId(), cumul.value, value.value).map(v ->
      JSONFile(v)
    )
  }
}

fun asKeyRangesOpt(jsonRanges: SKJSON.CJSON): ?Array<KeyRange> {
  if (jsonRanges is SKJSON.CJNull()) return None();
  ranges = SKJSON.expectArray(jsonRanges);
  Some(
    ranges.map((jsonRange) -> {
      range = SKJSON.expectArray(jsonRange);
      KeyRange(JSONID(range[0]), JSONID(range[1]))
    }),
  )
}

@export("SkipRuntime_map")
fun map(
  context: mutable Context,
  handleId: String,
  name: String,
  fnPtr: UInt32,
  rangeOpt: SKJSON.CJSON,
): String {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  mapHandle = FnHandle::make(fnPtr);
  eagerMap(
    eager,
    JSONID::keyType,
    JSONFile::type,
    name,
    context,
    mapHandle.map,
    asKeyRangesOpt(rangeOpt),
  )
    .getDirName()
    .toString()
}

@export("SkipRuntime_mapReduce")
fun mapReduce(
  context: mutable Context,
  handleId: String,
  name: String,
  fnPtr: UInt32,
  accumulator: UInt32,
  default: SKJSON.CJSON,
  rangeOpt: SKJSON.CJSON,
): String {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  mapHandle = FnHandle::make(fnPtr);
  accumulatorHandle = FnHandle::make(accumulator);
  eagerMapReduce(
    eager,
    JSONID::keyType,
    JSONFile::type,
    name,
    context,
    mapHandle.map,
    ExternAccumulator(accumulatorHandle, JSONFile(default)),
    asKeyRangesOpt(rangeOpt),
  )
    .getDirName()
    .toString()
}

@export("SkipRuntime_multimap")
fun multimap(
  context: mutable Context,
  name: String,
  mappings: SKJSON.CJArray,
): String {
  skmappings = mappings match {
  | SKJSON.CJArray(v) ->
    v.map(e -> {
      mapping = SKJSON.expectArray(e);
      handleId = SKJSON.asString(mapping[0]);
      eager = EHandle(
        JSONID::keyType,
        JSONFile::type,
        DirName::create(handleId),
      );
      mapHandle = FnHandle::make(
        UInt32::truncate(SKJSON.asFloat(mapping[1]).toInt()),
      );
      return (eager, mapHandle.map)
    })
  };
  eagerMultiMap(JSONID::keyType, JSONFile::type, name, context, skmappings)
    .getDirName()
    .toString()
}

@export("SkipRuntime_multimapReduce")
fun multimapReduce(
  context: mutable Context,
  name: String,
  mappings: SKJSON.CJArray,
  accumulator: UInt32,
  default: SKJSON.CJSON,
): String {
  accumulatorHandle = FnHandle::make(accumulator);
  skmappings = mappings match {
  | SKJSON.CJArray(v) ->
    v.map(e -> {
      mapping = SKJSON.expectArray(e);
      handleId = SKJSON.asString(mapping[0]);
      eager = EHandle(
        JSONID::keyType,
        JSONFile::type,
        DirName::create(handleId),
      );
      mapHandle = FnHandle::make(
        UInt32::truncate(SKJSON.asFloat(mapping[1]).toInt()),
      );
      return (eager, mapHandle.map)
    })
  };
  eagerMultiMapReduce(
    JSONID::keyType,
    JSONFile::type,
    name,
    context,
    skmappings,
    ExternAccumulator(accumulatorHandle, JSONFile(default)),
  )
    .getDirName()
    .toString()
}

class AsyncValueSaveError(
  key: SKJSON.CJSON,
  params: SKJSON.CJSON,
  reason: String,
) extends .Exception {
  fun getMessage(): String {
    `Unable to save async result for key '${this.key.toJSON()}' and params '${this.params.toJSON()}: ${
      this.reason
    }'.`
  }
}

@export("SkipRuntime_asyncResult")
fun asyncResult(
  callId: String,
  lazyName: String,
  key: SKJSON.CJSON,
  params: SKJSON.CJSON,
  value: SKJSON.CJObject,
): Float {
  SKStore.runWithResult(context ~> {
    resultsDirs = DirName::create(lazyName + "sk_prv/results/");
    context.unsafeMaybeGetEagerDir(resultsDirs) match {
    | Some(dir) ->
      if (!dir.isInput()) {
        throw AsyncValueSaveError(key, params, "Invalid async handle")
      };
      keyId = JSONID(key);
      current = dir.getArray(context, keyId).map(JSONFile::type);
      if (current.isEmpty()) {
        throw AsyncValueSaveError(key, params, "Query info not found")
      };
      cvalue = current[0].value match {
      | x @ SKJSON.CJObject _ -> x
      | _ -> throw AsyncValueSaveError(key, params, "Invalid query info")
      };
      ksuid = SKJSON.getString(cvalue, "ksuid");
      if (!ksuid.map(v -> callId == v).default(false)) {
        // The received response is deprecated
        return void;
      };
      status = SKJSON.getString(value, "status") match {
      | Some(s) -> s
      | _ -> throw AsyncValueSaveError(key, params, "Invalid async result")
      };
      toAdd = status match {
      | "success" -> Array[("params", params)]
      | "failure" ->
        previous(cvalue) match {
        | Some(p) -> Array[("params", params), ("previous", p)]
        | _ -> Array[("params", params)]
        }
      | "unchanged" ->
        previous(cvalue) match {
        | Some(p) -> Array[("params", params), ("previous", p)]
        | _ -> Array[("params", params)]
        }
      | _ ->
        throw AsyncValueSaveError(key, params, `Unknown status '${status}'`)
      };
      toRegister = SKJSON.add(value, toAdd);
      dir.writeArray(context, keyId, Array[JSONFile(toRegister)])
    | None() ->
      throw AsyncValueSaveError(key, params, "Async handle not exist.")
    };
    context.update();
  }) match {
  | Success _ -> 1.0
  | Failure(err) -> -getErrorHdl(err)
  };
}

@export("SkipRuntime_fromSkdb")
fun mapTable(
  context: mutable Context,
  table: String,
  name: String,
  fnPtr: UInt32,
  rangeOpt: SKJSON.CJSON,
): String {
  mapHandle = FnHandle::make(fnPtr);
  DBUtils.mapTable(
    table,
    name,
    context,
    mapHandle.mapTable,
    asKeyRangesOpt(rangeOpt),
  )
}

@export("SkipRuntime_toSkdb")
fun toSkdb(
  context: mutable Context,
  handleId: String,
  table: String,
  convPtr: UInt32,
  connected: Int32,
  rangeOpt: SKJSON.CJSON,
): void {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  mapHandle = FnHandle::make(convPtr);
  DBUtils.toTable(
    eager,
    table,
    context,
    mapHandle.toRow,
    connected != 0,
    asKeyRangesOpt(rangeOpt),
  )
}

@export("SkipRuntime_getFromTable")
fun getFromTable(
  _context: mutable Context,
  _table: String,
  _key: SKJSON.CJSON,
  _index: SKJSON.CJSON,
): SKJSON.CJSON {
  invariant_violation("TODO")
}

@export("SkipRuntime_getArray")
fun getArray(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  SKJSON.CJArray(eager.getArray(context, JSONID(key)).map(v -> v.value))
}

@export("SkipRuntime_get")
fun get(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  eager.get(context, JSONID(key)).value
}

@export("SkipRuntime_maybeGet")
fun maybeGet(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  eager.maybeGet(context, JSONID(key)) match {
  | Some(v) -> v.value
  | None() -> SKJSON.CJNull()
  }
}

@export("SkipRuntime_getToken")
fun getToken(context: mutable Context, key: String): Float {
  eager = EHandle(SID::keyType, IntFile::type, kTokenDir);
  eager.get(context, SID(key)).value.toFloat()
}

@export("SkipRuntime_updateTokens")
fun updateTokens(tokens: SKJSON.CJArray, time: Float): Float {
  SKStore.runWithResult(context ~> {
    dir = context.unsafeGetEagerDir(kTokenDir);
    tokens match {
    | SKJSON.CJArray(values) ->
      values.each(t -> {
        token = SKJSON.asString(t);
        dir.writeArray(context, SID(token), Array[IntFile(time.toInt())]);
      })
    };
    context.update();
  }) match {
  | Success _ -> 1.0
  | Failure(err) -> -getErrorHdl(err)
  };
}

@export("SkipRuntime_getArrayLazy")
fun getArrayLazy(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  lazy = LHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  getArraySelf(context, lazy, key)
}

@export("SkipRuntime_getLazy")
fun getLazy(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  lazy = LHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  getSelf(context, lazy, key)
}
@export("SkipRuntime_maybeGetLazy")
fun maybeGetLazy(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  lazy = LHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  maybeGetSelf(context, lazy, key)
}

@export("SkipRuntime_getArraySelf")
fun getArraySelf(
  context: mutable Context,
  handle: LHandle<JSONID, JSONFile>,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  SKJSON.CJArray(handle.getArray(context, JSONID(key)).map(v -> v.value))
}
@export("SkipRuntime_getSelf")
fun getSelf(
  context: mutable Context,
  handle: LHandle<JSONID, JSONFile>,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  handle.get(context, JSONID(key)).value
}
@export("SkipRuntime_maybeGetSelf")
fun maybeGetSelf(
  context: mutable Context,
  handle: LHandle<JSONID, JSONFile>,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  handle.maybeGet(context, JSONID(key)) match {
  | Some(v) -> v.value
  | None() -> SKJSON.CJNull()
  }
}
@export("SkipRuntime_size")
fun size(context: mutable Context, handleId: String): Float {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  eager.size(context).toFloat()
}

@export("SkipRuntime_input")
fun input(
  context: mutable Context,
  name: String,
  values: SKJSON.CJArray,
): String {
  makeInput(
    JSONID::keyType,
    JSONFile::type,
    context,
    name,
    SKJSON.expectArray(values).map(v -> {
      a = SKJSON.expectArray(v);
      (JSONID(a[0]), JSONFile(a[1]))
    }),
  )
}

@export("SkipRuntime_lazy")
fun lazy(context: mutable Context, name: String, lazyFunPtr: UInt32): String {
  lazyHandle = FnHandle::make(lazyFunPtr);
  makeLazy(JSONID::keyType, JSONFile::type, context, name, lazyHandle.lazy)
}

@export("SkipRuntime_asyncLazy")
fun asyncLazy(
  context: mutable Context,
  name: String,
  getFunPtr: UInt32,
  lazyFunPtr: UInt32,
): String {
  getHandle = FnHandle::make(getFunPtr);
  lazyHandle = FnHandle::make(lazyFunPtr);
  fieldFilter = f ~> f != "params" && f != "ksuid";
  check: (JSONFile, SKJSON.CJSON) ~> Check<JSONFile> = (v, params) ~> {
    v.value match {
    | obj @ SKJSON.CJObject _ ->
      if (
        SKJSON.getValue(obj, "params").map(ps -> ps == params).default(false)
      ) {
        Check(true, Some(JSONFile(SKJSON.filter(obj, fieldFilter))))
      } else {
        Check(false, previous(obj).map(e -> JSONFile(e)))
      }
    | _ -> Check(false, None())
    }
  };
  loading: (String, SKJSON.CJSON, ?JSONFile) ~> Loading<JSONFile> = (
    ksuid,
    params,
    optPrevious,
  ) ~> {
    fields: Array<(String, SKJSON.CJSON)> = optPrevious.map(v ->
      v.value
    ) match {
    | Some(p) ->
      Array[
        ("ksuid", SKJSON.CJString(ksuid)),
        ("params", params),
        ("previous", p),
        ("status", SKJSON.CJString("loading")),
      ]
    | _ ->
      Array[
        ("ksuid", SKJSON.CJString(ksuid)),
        ("params", params),
        ("status", SKJSON.CJString("loading")),
      ]
    };
    internal = SKJSON.CJObject(SKJSON.CJFields::create(fields, x -> x));
    Loading(JSONFile(internal), JSONFile(SKJSON.filter(internal, fieldFilter)))
  };
  makeAsyncLazy<JSONID, JSONFile, SKJSON.CJSON>(
    JSONID::keyType,
    JSONFile::type,
    context,
    name,
    getHandle.params,
    lazyHandle.callAsync,
    check,
    loading,
  )
}

fun initCtx(): Context {
  Context{}
}

@export("SkipRuntime_createFor")
fun tsCreateFor(session: String, tokens: SKJSON.CJArray, time: Float): Float {
  createFor(session, tokens, time)
}

fun previous(value: SKJSON.CJObject): ?SKJSON.CJSON {
  if (SKJSON.getString(value, "status") == Some("success")) {
    Some(SKJSON.filter(value, f ~> f == "payload" || f == "metadata"))
  } else {
    SKJSON.getValue(value, "previous")
  }
}

@export("SKIP_SKStore_jsonExtract")
fun jsonExtract(from: SKJSON.CJSON, pattern: String): SKJSON.CJArray {
  fieldsList = SKJSON.PatternParser::mcreate(pattern)
    .toplevelPattern()
    .pmatch(from)
    .collect(Array);
  values = mutable Vector[];
  fieldsList.each(fields -> {
    array = fields.collect(Array).map(field -> {
      cjfields = SKJSON.CJFields::create(Array[field], x -> x);
      SKJSON.CJObject(cjfields)
    });
    values.push(SKJSON.CJArray(array));
  });
  SKJSON.CJArray(values.toArray())
}

module end; /* SKStore */
