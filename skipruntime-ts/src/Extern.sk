module SKStore;

@cpp_extern
@debug
native fun applyMapFun(
  fn: UInt32,
  context: mutable Context,
  writer: mutable TWriter<JSONID, JSONFile>,
  key: SKJSON.CJSON,
  values: mutable NonEmptyIterator<JSONFile>,
): void;

@cpp_extern
@debug
native fun applyConvertToRowFun(
  fn: UInt32,
  key: SKJSON.CJSON,
  values: mutable NonEmptyIterator<JSONFile>,
): SKJSON.CJArray;

@cpp_extern
@debug
native fun applyMapTableFun(
  fn: UInt32,
  context: mutable Context,
  writer: mutable TWriter<JSONID, JSONFile>,
  key: SKJSON.CJArray,
  occ: Float,
): void;

@cpp_extern
@debug
native fun init(context: mutable Context, handles: SKJSON.CJObject): void;

@cpp_extern
@debug
native fun applyLazyFun(
  fn: UInt32,
  context: mutable Context,
  self: LHandle<JSONID, JSONFile>,
  key: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern
@debug
native fun applyParamsFun(
  fn: UInt32,
  context: mutable Context,
  key: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern
@debug
native fun applyLazyAsyncFun(
  fn: UInt32,
  callId: String,
  name: String,
  key: SKJSON.CJSON,
  param: SKJSON.CJSON,
): void;

@cpp_extern("SkipRuntime_callResourceCompute")
@debug
native fun callResourceCompute(
  context: mutable Context,
  name: String,
  params: SKJSON.CJObject,
): String;

@cpp_extern
@debug
native fun detachHandle(fn: UInt32): void;

@cpp_extern
@debug
native fun applyAccumulate(
  fn: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): SKJSON.CJSON;

@cpp_extern
@debug
native fun applyDismiss(
  fn: UInt32,
  acc: SKJSON.CJSON,
  value: SKJSON.CJSON,
): ?SKJSON.CJSON;

@cpp_extern
@debug
native fun getErrorHdl(exn: .Exception): Float;

@cpp_extern("SkipRuntime_applyNotify")
@debug
native fun applyNotify(
  fn: UInt32,
  values: SKJSON.CJArray,
  watermark: Int,
  update: Int32,
): void;

// Exports

@export("SkipRuntime_writerSet")
fun writerSet(
  writer: mutable TWriter<JSONID, JSONFile>,
  key: SKJSON.CJSON,
  value: SKJSON.CJSON,
): void {
  writer.set(JSONID(key), JSONFile(value))
}

@export("SkipRuntime_writerSetArray")
fun writerSetArray(
  writer: mutable TWriter<JSONID, JSONFile>,
  key: SKJSON.CJSON,
  values: SKJSON.CJArray,
): void {
  files = values match {
  | SKJSON.CJArray(xs) -> xs.map(x -> JSONFile(x))
  };
  writer.setArray(JSONID(key), files)
}

@export("SkipRuntime_iteratorFirst")
fun iteratorFirst(values: mutable NonEmptyIterator<JSONFile>): SKJSON.CJSON {
  if (values.isPastFirstValue) {
    throw Error("`first` can't be called after `next` on a NonEmptyIterator")
  };
  values.first.value
}

@export("SkipRuntime_iteratorUniqueValue")
fun iteratorUniqueValue(
  values: mutable NonEmptyIterator<JSONFile>,
): ?SKJSON.CJSON {
  value = values.next().map(v -> v.value);
  if (values.next().isSome()) None() else value
}

@export("SkipRuntime_iteratorNext")
fun iteratorNext(values: mutable NonEmptyIterator<JSONFile>): ?SKJSON.CJSON {
  values.next().map(v -> v.value)
}

@export("SkipRuntime_cloneIterator")
fun cloneIterator(
  values: mutable NonEmptyIterator<JSONFile>,
): mutable NonEmptyIterator<JSONFile> {
  values.clone()
}

class FnHandle private (eptr: SKStore.ExternalPointer) extends File {
  static fun make(id: UInt32): this {
    static(SKStore.ExternalPointer::create(id, detachHandle))
  }

  fun getId(): UInt32 {
    this.eptr.value
  }

  fun map(
    context: mutable Context,
    writer: mutable TWriter<JSONID, JSONFile>,
    key: JSONID,
    values: mutable NonEmptyIterator<JSONFile>,
  ): void {
    applyMapFun(this.getId(), context, writer, key.value, values)
  }

  fun lazy(
    context: mutable Context,
    self: LHandle<JSONID, JSONFile>,
    key: JSONID,
  ): Array<JSONFile> {
    Array[JSONFile(applyLazyFun(this.getId(), context, self, key.value))]
  }

  fun params(context: mutable Context, key: JSONID): SKJSON.CJSON {
    applyParamsFun(this.getId(), context, key.value)
  }

  fun callAsync(
    name: String,
    call: String,
    key: JSONID,
    params: SKJSON.CJSON,
  ): void {
    applyLazyAsyncFun(this.getId(), call, name, key.value, params)
  }

  fun notify(
    _dirname: DirName,
    values: Array<(Key, Array<File>)>,
    tick: Tick,
    update: Bool,
  ): void {
    jsValues = values.map(v -> toEntry(v.i0, v.i1));
    applyNotify(
      this.getId(),
      SKJSON.CJArray(jsValues),
      tick.value,
      Int32::truncate(if (update) 1 else 0),
    )
  }
}

class ExternAccumulator(
  accumulator: FnHandle,
) extends Accumulator<JSONFile, JSONFile> {
  //
  fun getType(): File ~> JSONFile {
    JSONFile::type
  }

  fun accumulate(acc: JSONFile, value: JSONFile): JSONFile {
    JSONFile(applyAccumulate(this.accumulator.getId(), acc.value, value.value))
  }

  fun dismiss(cumul: JSONFile, value: JSONFile): ?JSONFile {
    applyDismiss(this.accumulator.getId(), cumul.value, value.value).map(v ->
      JSONFile(v)
    )
  }
}

fun asKeyRanges(ranges: Array<SKJSON.CJSON>): Array<KeyRange> {
  ranges.map((jsonRange) -> {
    range = SKJSON.expectArray(jsonRange);
    KeyRange(JSONID(range[0]), JSONID(range[1]))
  })
}

fun asKeyRangesOpt(jsonRanges: SKJSON.CJSON): ?Array<KeyRange> {
  if (jsonRanges is SKJSON.CJNull()) return None();
  ranges = SKJSON.expectArray(jsonRanges);
  Some(asKeyRanges(ranges))
}

@export("SkipRuntime_map")
fun map(
  context: mutable Context,
  handleId: String,
  name: String,
  fnPtr: UInt32,
  rangeOpt: SKJSON.CJSON,
): String {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  mapHandle = FnHandle::make(fnPtr);
  eagerMap(
    eager,
    JSONID::keyType,
    JSONFile::type,
    name,
    context,
    mapHandle.map,
    asKeyRangesOpt(rangeOpt),
  )
    .getDirName()
    .toString()
}

@export("SkipRuntime_mapReduce")
fun mapReduce(
  context: mutable Context,
  handleId: String,
  name: String,
  fnPtr: UInt32,
  accumulator: UInt32,
  default: SKJSON.CJSON,
  rangeOpt: SKJSON.CJSON,
): String {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  mapHandle = FnHandle::make(fnPtr);
  accumulatorHandle = FnHandle::make(accumulator);
  eagerMapReduce(
    eager,
    JSONID::keyType,
    JSONFile::type,
    name,
    context,
    mapHandle.map,
    ExternAccumulator(accumulatorHandle, JSONFile(default)),
    asKeyRangesOpt(rangeOpt),
  )
    .getDirName()
    .toString()
}

@export("SkipRuntime_merge")
fun merge(context: mutable Context, collections: SKJSON.CJArray): String {
  name = "merge"; // to be concatenated with the names of inputs within the loop
  mappings = collections match {
  | SKJSON.CJArray(v) ->
    v.map(handleID_json -> {
      handleID = SKJSON.asString(handleID_json);

      invariant(handleID.endsWith("/"));
      !name = name + handleID.splitLast("/").i0;

      ehandle = EHandle(
        JSONID::keyType,
        JSONFile::type,
        DirName::create(handleID),
      );
      (ehandle, identityMap)
    })
  };
  eagerMultiMap(JSONID::keyType, JSONFile::type, name, context, mappings)
    .getDirName()
    .toString()
}

@export("SkipRuntime_multimap")
fun multimap(
  context: mutable Context,
  name: String,
  mappings: SKJSON.CJArray,
): String {
  skmappings = mappings match {
  | SKJSON.CJArray(v) ->
    v.map(e -> {
      mapping = SKJSON.expectArray(e);
      handleId = SKJSON.asString(mapping[0]);
      eager = EHandle(
        JSONID::keyType,
        JSONFile::type,
        DirName::create(handleId),
      );
      mapHandle = FnHandle::make(
        UInt32::truncate(SKJSON.asFloat(mapping[1]).toInt()),
      );
      return (eager, mapHandle.map)
    })
  };
  eagerMultiMap(JSONID::keyType, JSONFile::type, name, context, skmappings)
    .getDirName()
    .toString()
}

@export("SkipRuntime_multimapReduce")
fun multimapReduce(
  context: mutable Context,
  name: String,
  mappings: SKJSON.CJArray,
  accumulator: UInt32,
  default: SKJSON.CJSON,
): String {
  accumulatorHandle = FnHandle::make(accumulator);
  skmappings = mappings match {
  | SKJSON.CJArray(v) ->
    v.map(e -> {
      mapping = SKJSON.expectArray(e);
      handleId = SKJSON.asString(mapping[0]);
      eager = EHandle(
        JSONID::keyType,
        JSONFile::type,
        DirName::create(handleId),
      );
      mapHandle = FnHandle::make(
        UInt32::truncate(SKJSON.asFloat(mapping[1]).toInt()),
      );
      return (eager, mapHandle.map)
    })
  };
  eagerMultiMapReduce(
    JSONID::keyType,
    JSONFile::type,
    name,
    context,
    skmappings,
    ExternAccumulator(accumulatorHandle, JSONFile(default)),
  )
    .getDirName()
    .toString()
}

class AsyncValueSaveError(
  key: SKJSON.CJSON,
  params: SKJSON.CJSON,
  reason: String,
) extends .Exception {
  fun getMessage(): String {
    `Unable to save async result for key '${this.key.toJSON()}' and params '${this.params.toJSON()}: ${
      this.reason
    }'.`
  }
}

@export("SkipRuntime_asyncResult")
fun asyncResult(
  callId: String,
  lazyName: String,
  key: SKJSON.CJSON,
  params: SKJSON.CJSON,
  value: SKJSON.CJObject,
): Float {
  SKStore.runWithResult(context ~> {
    resultsDirs = DirName::create(lazyName + "sk_prv/results/");
    context.unsafeMaybeGetEagerDir(resultsDirs) match {
    | Some(dir) ->
      if (!dir.isInput()) {
        throw AsyncValueSaveError(key, params, "Invalid async handle")
      };
      keyId = JSONID(key);
      current = dir.getArray(context, keyId).map(JSONFile::type);
      if (current.isEmpty()) {
        throw AsyncValueSaveError(key, params, "Query info not found")
      };
      cvalue = current[0].value match {
      | x @ SKJSON.CJObject _ -> x
      | _ -> throw AsyncValueSaveError(key, params, "Invalid query info")
      };
      ksuid = SKJSON.getString(cvalue, "ksuid");
      if (!ksuid.map(v -> callId == v).default(false)) {
        // The received response is deprecated
        return void;
      };
      status = SKJSON.getString(value, "status") match {
      | Some(s) -> s
      | _ -> throw AsyncValueSaveError(key, params, "Invalid async result")
      };
      toAdd = status match {
      | "success" -> Array[("params", params)]
      | "failure" ->
        previous(cvalue) match {
        | Some(p) -> Array[("params", params), ("previous", p)]
        | _ -> Array[("params", params)]
        }
      | "unchanged" ->
        previous(cvalue) match {
        | Some(p) -> Array[("params", params), ("previous", p)]
        | _ -> Array[("params", params)]
        }
      | _ ->
        throw AsyncValueSaveError(key, params, `Unknown status '${status}'`)
      };
      toRegister = SKJSON.add(value, toAdd);
      dir.writeArray(context, keyId, Array[JSONFile(toRegister)])
    | None() ->
      throw AsyncValueSaveError(key, params, "Async handle not exist.")
    };
    context.update();
  }) match {
  | Success _ -> 1.0
  | Failure(err) -> -getErrorHdl(err)
  };
}

fun identityMap<K: Key, V: File>(
  _context: mutable Context,
  writer: mutable TWriter<K, V>,
  key: K,
  it: mutable NonEmptyIterator<V>,
): void {
  writer.setArray(key, it.collect(Array));
}

@export("SkipRuntime_sliced")
fun sliced(
  context: mutable Context,
  handleId: String,
  name: String,
  jsonRanges: SKJSON.CJArray,
): String {
  ranges = jsonRanges match {
  | SKJSON.CJArray(ranges) -> asKeyRanges(ranges)
  };
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  eagerMap(
    eager,
    JSONID::keyType,
    JSONFile::type,
    name,
    context,
    identityMap,
    Some(ranges),
  )
    .getDirName()
    .toString()
}

fun noFilter<K: Key, V: File>(
  _context: readonly Context,
  _key: K,
  _value: File,
): Bool {
  true
}

fun countElementAsOne<V: File>(_value: File): Int {
  1
}

fun removeElementAsOne<V: File>(_value: V, _toRemove: Int): File {
  invariant_violation("removeElementAsOne called on singleton value");
}

@export("SkipRuntime_take")
fun take(
  context: mutable Context,
  handleId: String,
  name: String,
  limit: UInt32,
): String {
  sourceDirName = DirName::create(handleId);
  eager = EHandle(JSONID::keyType, JSONFile::type, sourceDirName);
  dirName = sourceDirName.sub(name);
  eager
    .filter(
      context,
      dirName,
      limit.toInt(),
      noFilter,
      countElementAsOne,
      removeElementAsOne,
      None(),
    )
    .getDirName()
    .toString()
}

fun getArray_(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  SKJSON.CJArray(eager.getArray(context, JSONID(key)).map(v -> v.value));
}

@export("SkipRuntime_getArray")
fun getArray(
  optContext: ?mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  optContext match {
  | Some(context) -> getArray_(context, handleId, key)
  | _ ->
    SKStore.runWithResult(context ~> getArray_(context, handleId, key)) match {
    | Success(v) -> v
    | Failure(err) -> throw err
    }
  }
}

fun get_(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  eager.get(context, JSONID(key)).value
}

@export("SkipRuntime_get")
fun get(
  optContext: ?mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  optContext match {
  | Some(context) -> get_(context, handleId, key)
  | _ ->
    SKStore.runWithResult(context ~> get_(context, handleId, key)) match {
    | Success(v) -> v
    | Failure(err) -> throw err
    }
  }
}

fun maybeGet_(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  eager.maybeGet(context, JSONID(key)) match {
  | Some(v) -> v.value
  | None() -> SKJSON.CJNull()
  }
}

@export("SkipRuntime_maybeGet")
fun maybeGet(
  optContext: ?mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  optContext match {
  | Some(context) -> maybeGet_(context, handleId, key)
  | _ ->
    SKStore.runWithResult(context ~> maybeGet_(context, handleId, key)) match {
    | Success(v) -> v
    | Failure(err) -> throw err
    }
  }
}

@export("SkipRuntime_getToken")
fun getToken(context: mutable Context, key: String): Float {
  eager = EHandle(SID::keyType, IntFile::type, kTokenDir);
  eager.get(context, SID(key)).value.toFloat()
}

@export("SkipRuntime_updateTokens")
fun updateTokens(tokens: SKJSON.CJArray, time: Float): Float {
  SKStore.runWithResult(context ~> {
    dir = context.unsafeGetEagerDir(kTokenDir);
    tokens match {
    | SKJSON.CJArray(values) ->
      values.each(t -> {
        token = SKJSON.asString(t);
        dir.writeArray(context, SID(token), Array[IntFile(time.toInt())]);
      })
    };
    context.update();
  }) match {
  | Success _ -> 1.0
  | Failure(err) -> -getErrorHdl(err)
  };
}

@export("SkipRuntime_getArrayLazy")
fun getArrayLazy(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  lazy = LHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  getArraySelf(context, lazy, key)
}

@export("SkipRuntime_getLazy")
fun getLazy(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  lazy = LHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  getSelf(context, lazy, key)
}
@export("SkipRuntime_maybeGetLazy")
fun maybeGetLazy(
  context: mutable Context,
  handleId: String,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  lazy = LHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  maybeGetSelf(context, lazy, key)
}

@export("SkipRuntime_getArraySelf")
fun getArraySelf(
  context: mutable Context,
  handle: LHandle<JSONID, JSONFile>,
  key: SKJSON.CJSON,
): SKJSON.CJArray {
  SKJSON.CJArray(handle.getArray(context, JSONID(key)).map(v -> v.value))
}
@export("SkipRuntime_getSelf")
fun getSelf(
  context: mutable Context,
  handle: LHandle<JSONID, JSONFile>,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  handle.get(context, JSONID(key)).value
}
@export("SkipRuntime_maybeGetSelf")
fun maybeGetSelf(
  context: mutable Context,
  handle: LHandle<JSONID, JSONFile>,
  key: SKJSON.CJSON,
): SKJSON.CJSON {
  handle.maybeGet(context, JSONID(key)) match {
  | Some(v) -> v.value
  | None() -> SKJSON.CJNull()
  }
}
@export("SkipRuntime_size")
fun size(context: mutable Context, handleId: String): Float {
  eager = EHandle(JSONID::keyType, JSONFile::type, DirName::create(handleId));
  eager.size(context).toFloat()
}

@export("SkipRuntime_input")
fun input(
  context: mutable Context,
  name: String,
  values: SKJSON.CJArray,
): String {
  makeInput(
    JSONID::keyType,
    JSONFile::type,
    context,
    name,
    SKJSON.expectArray(values).map(v -> {
      a = SKJSON.expectArray(v);
      (JSONID(a[0]), JSONFile(a[1]))
    }),
  )
}

@export("SkipRuntime_lazy")
fun lazy(context: mutable Context, name: String, lazyFunPtr: UInt32): String {
  lazyHandle = FnHandle::make(lazyFunPtr);
  makeLazy(JSONID::keyType, JSONFile::type, context, name, lazyHandle.lazy)
}

@export("SkipRuntime_asyncLazy")
fun asyncLazy(
  context: mutable Context,
  name: String,
  getFunPtr: UInt32,
  lazyFunPtr: UInt32,
): String {
  getHandle = FnHandle::make(getFunPtr);
  lazyHandle = FnHandle::make(lazyFunPtr);
  fieldFilter = f ~> f != "params" && f != "ksuid";
  check: (JSONFile, SKJSON.CJSON) ~> Check<JSONFile> = (v, params) ~> {
    v.value match {
    | obj @ SKJSON.CJObject _ ->
      if (
        SKJSON.getValue(obj, "params").map(ps -> ps == params).default(false)
      ) {
        Check(true, Some(JSONFile(SKJSON.filter(obj, fieldFilter))))
      } else {
        Check(false, previous(obj).map(e -> JSONFile(e)))
      }
    | _ -> Check(false, None())
    }
  };
  loading: (String, SKJSON.CJSON, ?JSONFile) ~> Loading<JSONFile> = (
    ksuid,
    params,
    optPrevious,
  ) ~> {
    fields: Array<(String, SKJSON.CJSON)> = optPrevious.map(v ->
      v.value
    ) match {
    | Some(p) ->
      Array[
        ("ksuid", SKJSON.CJString(ksuid)),
        ("params", params),
        ("previous", p),
        ("status", SKJSON.CJString("loading")),
      ]
    | _ ->
      Array[
        ("ksuid", SKJSON.CJString(ksuid)),
        ("params", params),
        ("status", SKJSON.CJString("loading")),
      ]
    };
    internal = SKJSON.CJObject(SKJSON.CJFields::create(fields, x -> x));
    Loading(JSONFile(internal), JSONFile(SKJSON.filter(internal, fieldFilter)))
  };
  makeAsyncLazy<JSONID, JSONFile, SKJSON.CJSON>(
    JSONID::keyType,
    JSONFile::type,
    context,
    name,
    getHandle.params,
    lazyHandle.callAsync,
    check,
    loading,
  )
}

fun initCtx(): Context {
  Context{}
}

@export("SkipRuntime_createFor")
fun tsCreateFor(
  session: String,
  inputs: SKJSON.CJArray,
  initValues: SKJSON.CJObject,
  tokens: SKJSON.CJArray,
  time: Float,
): Float {
  createFor(session, inputs, initValues, tokens, time)
}

fun previous(value: SKJSON.CJObject): ?SKJSON.CJSON {
  if (SKJSON.getString(value, "status") == Some("success")) {
    Some(SKJSON.filter(value, f ~> f == "payload" || f == "metadata"))
  } else {
    SKJSON.getValue(value, "previous")
  }
}

@export("SkipRuntime_jsonExtract")
fun jsonExtract(from: SKJSON.CJSON, pattern: String): SKJSON.CJArray {
  fieldsList = SKJSON.PatternParser::mcreate(pattern)
    .toplevelPattern()
    .pmatch(from)
    .collect(Array);
  values = mutable Vector[];
  fieldsList.each(fields -> {
    array = fields.collect(Array).map(field -> {
      cjfields = SKJSON.CJFields::create(Array[field], x -> x);
      SKJSON.CJObject(cjfields)
    });
    values.push(SKJSON.CJArray(array));
  });
  SKJSON.CJArray(values.toArray())
}

@export("SkipRuntime_createReactiveRequest")
fun createReactiveRequest(
  resource: String,
  params: SKJSON.CJObject,
  reactiveAuth: Array<UInt8>,
): SKJSON.CJSON {
  SKStore.runWithResult(context ~> {
    session = toSessionName(reactiveAuth);
    rsessions = EHandle(SID::keyType, IntFile::type, kResourceSessionDir);
    rsessions.writeArray(context, SID(session), Array[IntFile(0)]);
    context.update();
    rDirName = DirName::create(`/sk_prv/resources/session/${session}/`);
    rObject = Resource(resource, params);
    resourceHdl = EHandle(Resource::keyType, IntFile::type, rDirName);
    resourceHdl.writeArray(context, rObject, Array[IntFile(0)]);
    context.update();
    gDirName = DirName::create(`/sk_prv/resources/session/${session}/graph/`);
    graphHdl = EHandle(Resource::keyType, ResourceNames::type, gDirName);
    names = graphHdl.get(context, rObject);
    SKJSON.CJArray(
      Array[
        SKJSON.CJString(names.name),
        SKJSON.CJString(names.handle.getDirName().toString()),
      ],
    );
  }) match {
  | Success(info) -> info
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_closeReactiveRequest")
fun closeReactiveRequest(
  resource: String,
  params: SKJSON.CJObject,
  reactiveAuth: Array<UInt8>,
): Float {
  SKStore.runWithResult(context ~> {
    session = toSessionName(reactiveAuth);
    rDirName = DirName::create(`/sk_prv/resources/session/${session}/`);
    context.maybeGetEagerDir(rDirName).each(_ -> {
      rObject = Resource(resource, params);
      resourceHdl = EHandle(Resource::keyType, IntFile::type, rDirName);
      resourceHdl.writeArray(context, rObject, Array[]);
      context.update();
    });
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_closeSession")
fun closeSession(reactiveAuth: Array<UInt8>): Float {
  SKStore.runWithResult(context ~> {
    session = toSessionName(reactiveAuth);
    rsessions = EHandle(SID::keyType, IntFile::type, kResourceSessionDir);
    rsessions.writeArray(context, SID(session), Array[]);
    context.update();
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_write")
fun write(collection: String, key: SKJSON.CJSON, value: SKJSON.CJArray): Float {
  SKStore.runWithResult(context ~> {
    chdl = EHandle(
      JSONID::keyType,
      JSONFile::type,
      DirName::create(collection),
    );
    value match {
    | SKJSON.CJArray(values) ->
      chdl.writeArray(context, JSONID(key), values.map(v -> JSONFile(v)))
    };
    context.update();
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_writeAll")
fun writeAll(collection: String, values: SKJSON.CJArray): Float {
  SKStore.runWithResult(context ~> {
    chdl = EHandle(
      JSONID::keyType,
      JSONFile::type,
      DirName::create(collection),
    );
    values match {
    | SKJSON.CJArray(vs) ->
      vs.each(e ->
        e match {
        | SKJSON.CJArray(av) ->
          optKey = av.maybeGet(0);
          optVal = av.maybeGet(1);
          (optKey, optVal) match {
          | (Some(key), Some(SKJSON.CJArray(aval))) ->
            chdl.writeArray(context, JSONID(key), aval.map(v -> JSONFile(v)))
          | (Some(key), None()) ->
            chdl.writeArray(context, JSONID(key), Array[])
          | _ -> invariant_violation("Invalid entry.")
          }
        | _ -> invariant_violation("Invalid entry.")
        }
      )
    };
    context.update();
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

@export("SkipRuntime_delete")
fun delete(collection: String, value: SKJSON.CJArray): Float {
  SKStore.runWithResult(context ~> {
    chdl = EHandle(
      JSONID::keyType,
      JSONFile::type,
      DirName::create(collection),
    );
    value match {
    | SKJSON.CJArray(values) ->
      values.each(key -> chdl.writeArray(context, JSONID(key), Array[]))
    };
    context.update();
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

fun toEntry(key: Key, files: Array<File>): SKJSON.CJArray {
  SKJSON.CJArray(
    Array[
      JSONID::keyType(key).value,
      SKJSON.CJArray(files.map(JSONFile::type).map(v -> v.value)),
    ],
  )
}

fun getAll_(dir: EagerDir): SKJSON.CJArray {
  values = mutable Vector<SKJSON.CJArray>[];
  for (kv in dir.unsafeGetFileIter()) {
    (key, files) = kv;
    values.push(toEntry(key, files.collect(Array)));
  };
  SKJSON.CJArray(values.toArray());
}

@export("SkipRuntime_getAll")
fun getAll(collection: String): SKJSON.CJSON {
  SKStore.runWithResult(context ~> {
    getAll_(context.unsafeGetEagerDir(DirName::create(collection)))
  }) match {
  | Success(info) -> info
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_getDiff")
fun getDiff(collection: String, from: Int): SKJSON.CJSON {
  SKStore.runWithResult(context ~> {
    tick = Tick(from);
    edir = context.unsafeGetEagerDir(DirName::create(collection));
    (isReset, changes) = if (tick.value > 0) {
      edir.getChangesAfter(tick)
    } else {
      (true, SortedSet[])
    };
    if (isReset) {
      SKJSON.CJObject(
        SKJSON.CJFields::create(
          Array[
            (
              "values",
              getAll_(context.unsafeGetEagerDir(DirName::create(collection))),
            ),
            ("tick", SKJSON.CJInt(context.tick.value)),
            ("update", SKJSON.CJBool(false)),
          ],
          x -> x,
        ),
      )
    } else {
      values = mutable Vector<SKJSON.CJArray>[];
      if (!changes.isEmpty()) {
        for (key in changes) {
          files = edir.getArrayRaw(key);
          values.push(toEntry(key, files))
        }
      };
      SKJSON.CJObject(
        SKJSON.CJFields::create(
          Array[
            ("values", SKJSON.CJArray(values.toArray())),
            ("tick", SKJSON.CJInt(context.tick.value)),
            ("update", SKJSON.CJBool(true)),
          ],
          x -> x,
        ),
      )
    }
  }) match {
  | Success(info) -> info
  | Failure(err) -> SKJSON.CJFloat(getErrorHdl(err))
  };
}

@export("SkipRuntime_subscribe")
fun subscribe(resource: String, start: Int, notifyPtr: UInt32): Int {
  notifyHandle = FnHandle::make(notifyPtr);
  runWithResult(context ~> {
    session = SKStore.genSym(0);
    tick = Tick(start);
    context.subscribe(
      session,
      NWatch(tick, notifyHandle.notify, true),
      None(),
      Array[
        DirSub(DirName::create(resource), "", OJSON(Array[]), (__) ~> None()),
      ],
      Some(tick),
    );
    return session;
  }) match {
  | Success(session) -> session
  | Failure(err) -> -getErrorHdl(err).toInt()
  };
}

@export("SkipRuntime_unsubscribe")
fun unsubscribe(session: Int): Float {
  SKStore.runWithResult(context ~> {
    context.unsubscribe(session.toInt())
  }) match {
  | Success _ -> 0.0
  | Failure(err) -> getErrorHdl(err)
  };
}

module end; /* SKStore */
