module SKDB;

/*****************************************************************************/
// Permission class.

// They are ultimately represented by integers, but in the code, that
// could be error prone.
/*****************************************************************************/

const kDeletePermission: Int = 1;
const kInsertPermission: Int = 2;
const kReadPermission: Int = 4;

value class Permission(private perm: Int) {
  static fun none(): this {
    Permission(0)
  }
  static fun all(): this {
    Permission(7)
  }

  fun canRead(): Bool {
    this.perm.and(kReadPermission) != 0
  }
  fun canInsert(): Bool {
    this.perm.and(kInsertPermission) != 0
  }
  fun canDelete(): Bool {
    this.perm.and(kDeletePermission) != 0
  }

  fun or(y: Permission): Permission {
    Permission(this.perm.and(y.perm))
  }

  fun and(y: Permission): Permission {
    Permission(this.perm.and(y.perm))
  }

  fun toInt(): Int {
    this.perm
  }
}

/*****************************************************************************/
// Predefined columns.
/*****************************************************************************/

const skdbAuthorColName: Name = Name::create("skdb_author");
const skdbAccessColName: Name = Name::create("skdb_access");
const tableNameColName: Name = Name::create("tableName");
const groupUUIDColName: Name = Name::create("groupUUID");
const userUUIDColName: Name = Name::create("userUUID");
const permissionsColName: Name = Name::create("permissions");

/*****************************************************************************/
// Predefined tables.
//
// Some tables are "predefined" in the sense that fields are expected
// to be found in a certain order, with a certain type etc ... This
// class facilitate the creation of such tables.
//
// To use it: first, extend the class, then, define the schema that is
// expected for this table, and the index you would like to use to
// look up elements (you can find examples below: cf SKDBUsers,
// SKDBGroupPermissions etc ...).
//
// Once you did all of this, you will be able to access the table
// using getIndex (that will return the index) and makeKey (to build
// the key you would like to lookup).
/*****************************************************************************/

base class PredefinedTable private final {
  private columns: Map<String, Int>,
  protected dirName: SKStore.DirName,
  private schema: Array<ColumnDefinition>,
  protected kinds: Array<(Int, IKind, Type)>,
  private indexDirName: SKStore.DirName,
} {
  const name: Name;
  const schemaText: String;
  const indexedFields: Array<Name>;

  static deferred fun create(): this {
    lexer = Lexer(0, Buffer(static::schemaText));
    (_, schema) = parseTableSchema(lexer, 0);

    columns = mutable Map[];
    for (i => col in schema) {
      columns![col.name.lower] = i;
    };
    dirName = SKStore.DirName::create("/" + static::name + "/");
    kinds = schema.mapWithIndex((idx, x) -> (idx, IASC(), x.ty));

    indexName = createIndexName(
      static::name,
      static::indexedFields.map(x ->
        (columns[x.lower], IASC(), schema[columns[x.lower]].ty)
      ),
      static::indexedFields.size(),
    );
    indexDirName = SKStore.DirName::create(indexName.lower + "unique/proj/");
    static{columns => columns.chill(), dirName, schema, kinds, indexDirName}
  }

  fun getIndex(context: readonly SKStore.Context): PredefinedIndex {
    context.unsafeMaybeGetEagerDir(this.indexDirName) match {
    | None() -> error(0, "Privacy layer not initialized")
    | Some(index) -> PredefinedIndex(static::name, index, this.columns)
    }
  }

  fun getColNbr(name: Name): Int {
    this.columns.maybeGet(name.lower) match {
    | None() ->
      print_error(
        `Internal error: could not find column ${name.origName} in table ${
          static::name.origName
        }`,
      );
      skipExit(2)
    | Some(x) -> x
    }
  }

  // Determines if a change in a directoy affects a given user
  deferred fun hasChangedForUser(
    context: readonly SKStore.Context,
    user: UserFile,
    tick: SKStore.Tick,
  ): Bool {
    colNbr = this.columns.maybeGet(userUUIDColName.lower) match {
    | None() -> return false
    | Some(x) -> x
    };

    dir = context.unsafeMaybeGetEagerDir(this.dirName) match {
    | None() ->
      print_error(
        "Error: could not find ${static::name}, privacy layer not initialized",
      );
      skipExit(2)
    | Some(x) -> x
    };

    (isReset, changes) = dir.getChangesAfter(tick);
    if (isReset) return true;
    for (change in changes) {
      change match {
      | RowKey(row, _) ->
        row.getString(colNbr) match {
        | None() ->
          // The change affected every user
          return true
        | Some(x) if (user.name == x) ->
          // The change affected this specific user
          return true
        | _ -> void
        }
      | _ -> invariant_violation("Unexpected key type")
      }
    };
    false
  }
}

// These classes exist to be able to manipulate rows using names
// rather than integers. We want to be able to write
// row.getCol(myColName) rather than row.values[2].

class PredefinedRow(
  rowValues: RowValues,
  tableName: Name,
  columns: Map<String, Int>,
) {
  private fun getCol(colName: Name): ?CValue {
    this.rowValues.getValue(
      this.columns.maybeGet(colName.lower) match {
      | None() ->
        print_error(
          `Internal error: could not find column ${colName.origName} in table ${
            this.tableName.origName
          }`,
        );
        skipExit(2)
      | Some(x) -> x
      },
    )
  }

  fun getInt(colName: Name): Int {
    this.getCol(colName) match {
    | Some(CInt(n)) -> n
    | v ->
      invariant_violation(
        "Undexpected value for col " + colName + " " + inspect(v).toString(),
      )
    }
  }

  fun getString(colName: Name): String {
    this.getCol(colName) match {
    | Some(CString(n)) -> n
    | v ->
      invariant_violation(
        "Undexpected value for col " + colName + " " + inspect(v).toString(),
      )
    }
  }
}

class PredefinedIndex(
  private tableName: Name,
  private dir: SKStore.EagerDir,
  private columns: Map<String, Int>,
) {
  fun get(projKey: IndexProjKey): ?PredefinedRow {
    arr = this.dir.getArrayRaw(projKey);
    if (arr.size() == 0) return None();
    Some(PredefinedRow(RowValues::type(arr[0]), this.tableName, this.columns))
  }
}

/*****************************************************************************/
/* The skdb_users table. */
/*****************************************************************************/

class UserFile(name: String) extends SKStore.File {
  static fun create(
    context: readonly SKStore.Context,
    userUUID: String,
  ): UserFile {
    skdbUsersByName
      .getIndex(context)
      .get(skdbUsersByName.makeKey(userUUID)) match {
    | None() ->
      print_error("Could not find user: " + userUUID);
      skipExit(2)
    | Some(_) -> UserFile(userUUID)
    }
  }
}

const skdbUsersByName: SKDBUsersByName = SKDBUsersByName::create();

class SKDBUsersByName extends PredefinedTable {
  const name: Name = Name::create("skdb_users");

  const schemaText: String = `(
    userUUID STRING PRIMARY KEY,
    permissions INTEGER NOT NULL
  )`;

  // Be careful when changing this schema, make sure that the
  // indexedFields match the function that creates the key.

  const indexedFields: Array<Name> = Array[Name::create("userUUID")];

  fun makeKey(userUUID: String): IndexProjKey {
    IndexProjKey(
      Array[(this.getColNbr(userUUIDColName), Some(CString(userUUID)))],
    )
  }
}

/*****************************************************************************/
/* The skdb_user_permissions table. */
/*****************************************************************************/

const skdbUserPermissions: SKDBUserPermissions = SKDBUserPermissions::create();

class SKDBUserPermissions extends PredefinedTable {
  const name: Name = Name::create("skdb_user_permissions");

  const schemaText: String = `(
    userUUID STRING PRIMARY KEY,
    permissions INTEGER NOT NULL
  )`;

  // Be careful when changing this schema, make sure that the
  // indexedFields match the function that creates the key.

  const indexedFields: Array<Name> = Array[Name::create("userUUID")];

  fun makeKey(userUUID: ?String): IndexProjKey {
    IndexProjKey(
      Array[(this.getColNbr(userUUIDColName), userUUID.map(x -> CString(x)))],
    )
  }
}

/*****************************************************************************/
/* The skdb_group_permissions_joined table. */
/*****************************************************************************/

const skdbGroupPermissions: SKDBGroupPermissions = SKDBGroupPermissions::create();

class SKDBGroupPermissions extends PredefinedTable {
  const name: Name = Name::create("skdb_group_permissions_joined");

  const schemaText: String = `(
    groupUUID STRING NOT NULL,
    userUUID STRING,
    permissions INTEGER NOT NULL,
    skdb_access STRING
  )`;

  const indexedFields: Array<Name> = Array[
    Name::create("groupUUID"),
    Name::create("userUUID"),
  ];

  fun makeKey(groupUUID: String, userUUID: ?String): IndexProjKey {
    IndexProjKey(
      Array[
        (this.getColNbr(groupUUIDColName), Some(CString(groupUUID))),
        (this.getColNbr(userUUIDColName), userUUID.map(x -> CString(x))),
      ],
    )
  }
}

/*****************************************************************************/
/* Primitives checking that a row can be written. */
/*****************************************************************************/

base class AccessResult() {
  children =
  | AROK()
  | ARError(AccessResultError)
}

base class AccessResultError{userUUID: String} uses Show {
  children =
  | ARENullAuthor{}
  | AREWrongAuthor{foundUserName: String}
  | AREWrongAuthorType{}
  | ARECannotDelete{groupUUID: String}
  | ARECannotInsert{groupUUID: String}
  | ARECannotDeleteFromTable{tableName: String}
  | ARECannotInsertIntoTable{tableName: String}
  | ARECannotRead{groupUUID: ?String}
  | ARECannotReadFromTable{tableName: String}

  fun toString(): String
  | ARENullAuthor{} ->
    "The field skdb_author can only be set to the userUUID " +
      "of the connected user " +
      " (user " +
      this.userUUID +
      ")"
  | AREWrongAuthor{foundUserName} ->
    "skdb_author is set to the wrong id " +
      " expected " +
      this.userUUID +
      " (found " +
      foundUserName +
      ")" +
      " (user " +
      this.userUUID +
      ")"
  | AREWrongAuthorType{} ->
    "skdb_author is expected to be an integer" + " (user " + this.userUUID + ")"
  | ARECannotDelete{groupUUID} ->
    "cannot delete with skdb_access set to " +
      groupUUID +
      " (user " +
      this.userUUID +
      ")"
  | ARECannotInsert{groupUUID} ->
    "cannot insert with skdb_access set to " +
      groupUUID +
      " (user " +
      this.userUUID +
      ")"
  | ARECannotRead{groupUUID} ->
    "cannot read with skdb_access set to " +
      groupUUID +
      " (user " +
      this.userUUID +
      ")"
  | ARECannotDeleteFromTable{tableName} ->
    "cannot delete from table " + tableName + " (user " + this.userUUID + ")"
  | ARECannotInsertIntoTable{tableName} ->
    "cannot insert into " + tableName + " (user " + this.userUUID + ")"
  | ARECannotReadFromTable{tableName} ->
    "cannot read from " + tableName + " (user " + this.userUUID + ")"
}

fun checkUserCanReadRow(
  context: readonly SKStore.Context,
  user: UserFile,
  table: DirDescr,
  row: RowValues,
): AccessResult {
  access = AccessSolver::create(context, user.name, table);
  if (!access.canReadTable()) {
    return ARError(
      ARECannotReadFromTable{
        userUUID => user.name,
        tableName => table.name.lower,
      },
    )
  };
  groupIdxOption = table.cols.maybeGet(skdbAccessColName);
  groupIdxOption match {
  | None() ->
    // There is no skdb_access column, but we have access to the table
    AROK()
  | Some(colNbr) ->
    // There is a skdb_access column, let's check that we have the rights
    row.getString(colNbr) match {
    | None() ->
      // skdb_access is set to NULL: no access
      ARError(ARECannotRead{userUUID => user.name, groupUUID => None()})
    | Some(groupUUID) ->
      access.canRead(context, groupUUID) match {
      | true -> AROK()
      | false ->
        ARError(
          ARECannotRead{userUUID => user.name, groupUUID => Some(groupUUID)},
        )
      }
    }
  };
}

fun checkUserCanWriteRow(
  context: readonly SKStore.Context,
  user: UserFile,
  table: DirDescr,
  row: RowValues,
): AccessResult {
  authorIdxOption = table.cols.maybeGet(skdbAuthorColName);
  groupIdxOption = table.cols.maybeGet(skdbAccessColName);
  userUUID = user.name;
  access = AccessSolver::create(context, userUUID, table);
  authorIdxOption match {
  | None() -> void
  | Some(authorIdx) ->
    row.getValue(authorIdx) match {
    | None() -> return ARError(ARENullAuthor{userUUID => user.name})
    | Some(CString(n)) ->
      if (n != user.name) {
        return ARError(
          AREWrongAuthor{userUUID => user.name, foundUserName => n},
        )
      }
    | Some _ -> return ARError(AREWrongAuthorType{userUUID => user.name})
    }
  };
  groupIdxOption match {
  | None() ->
    if (row.repeat == 0) {
      if (!access.canDeleteFromTable()) {
        return ARError(
          ARECannotDeleteFromTable{
            userUUID => user.name,
            tableName => table.name.lower,
          },
        );
      }
    } else {
      if (!access.canInsertIntoTable()) {
        return ARError(
          ARECannotInsertIntoTable{
            userUUID => user.name,
            tableName => table.name.lower,
          },
        );
      }
    }
  | Some(groupIdx) ->
    row.getString(groupIdx) match {
    | None() -> void
    | Some(groupUUID) ->
      if (row.repeat == 0) {
        if (!access.canDelete(context, groupUUID)) {
          return ARError(ARECannotDelete{userUUID => user.name, groupUUID});
        }
      } else {
        if (!access.canInsert(context, groupUUID)) {
          return ARError(ARECannotInsert{userUUID => user.name, groupUUID});
        }
      }
    }
  };
  AROK()
}

/*****************************************************************************/
// The access solver is the object that computes the privacy for any
// given user.
/*****************************************************************************/

mutable class AccessSolver private {
  userUUID: String,
  userMask: Permission,
  private cache: mutable Map<String, Permission> = mutable Map[],
  private mutable currentTick: SKStore.Tick = SKStore.Tick(-1),
} {
  static fun create(
    context: readonly SKStore.Context,
    userUUID: String,
    table: DirDescr,
  ): mutable this {
    tablePermissions = if (table.cols.maybeGet(skdbAccessColName) is Some _) {
      Permission::all()
    } else {
      Permission::none()
    };
    userIndex = skdbUserPermissions.getIndex(context);
    userPermissions = userIndex.get(
      skdbUserPermissions.makeKey(Some(userUUID)),
    ) match {
    | None() ->
      userIndex.get(skdbUserPermissions.makeKey(None())) match {
      | None() ->
        // We could not find permissions specific to the user. We want
        // to be permissive, because the skdb_user table is only there
        // to restrict (not grant) access.
        Permission::all()
      | Some(allUsersPermissions) ->
        Permission(allUsersPermissions.getInt(permissionsColName))
      }
    | Some(thisUserPermissions) ->
      Permission(thisUserPermissions.getInt(permissionsColName))
    };
    mutable static{userUUID, userMask => tablePermissions.and(userPermissions)}
  }

  readonly fun canReadTable(): Bool {
    this.userMask.canRead()
  }

  readonly fun canInsertIntoTable(): Bool {
    this.userMask.canInsert()
  }

  readonly fun canDeleteFromTable(): Bool {
    this.userMask.canDelete()
  }

  private mutable fun getPermissions(
    context: readonly SKStore.Context,
    groupUUID: String,
  ): Permission {
    if (context.tick != this.currentTick) {
      this.cache.clear();
      this.!currentTick = context.tick;
    };
    this.cache.maybeGet(groupUUID) match {
    | None() ->
      result = this.getPermissionsNoCache(context, groupUUID);
      this.cache![groupUUID] = result;
      result
    | Some(x) -> x
    }
  }

  private mutable fun getPermissionsNoCache(
    context: readonly SKStore.Context,
    groupUUID: String,
  ): Permission {
    // Let's first check if the groupUUID is in fact our userUUID
    userIndex = skdbUsersByName.getIndex(context);
    if (userIndex.get(skdbUsersByName.makeKey(groupUUID)) is Some _) {
      // We found the user!
      // Is this data for us?
      if (groupUUID == this.userUUID) {
        return this.userMask;
      } else {
        return Permission::none()
      };
    };
    // The Name is not a userUUID, let's lookup the groupUUID
    groupIndex = skdbGroupPermissions.getIndex(context);
    row = groupIndex.get(
      skdbGroupPermissions.makeKey(groupUUID, Some(this.userUUID)),
    ) match {
    | None() -> groupIndex.get(skdbGroupPermissions.makeKey(groupUUID, None()))
    | x @ Some _ -> x
    };
    row match {
    | None() -> Permission::none()
    | Some(x) -> this.userMask.and(Permission(x.getInt(permissionsColName)))
    }
  }

  mutable fun canRead(
    context: readonly SKStore.Context,
    groupUUID: String,
  ): Bool {
    this.getPermissions(context, groupUUID).canRead()
  }

  mutable fun canInsert(
    context: readonly SKStore.Context,
    groupUUID: String,
  ): Bool {
    this.getPermissions(context, groupUUID).canInsert()
  }

  mutable fun canDelete(
    context: readonly SKStore.Context,
    groupUUID: String,
  ): Bool {
    this.getPermissions(context, groupUUID).canDelete()
  }
}

/*****************************************************************************/
// Code checking if the privacy for a given user (or table) changed.
/*****************************************************************************/

fun userPrivacyChanged(
  context: readonly SKStore.Context,
  userUUIDOpt: ?String,
  tick: SKStore.Tick,
): Bool {
  userUUID = userUUIDOpt match {
  | None() -> return false
  | Some(x) -> x
  };
  user = UserFile::create(context, userUUID);
  skdbGroupPermissions.hasChangedForUser(context, user, tick) ||
    skdbUserPermissions.hasChangedForUser(context, user, tick)
}
