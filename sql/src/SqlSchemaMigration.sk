/*****************************************************************************/
/* SQL schema changes. */
/*****************************************************************************/

module alias P = SQLParser;

module SKDB;

const legacyViews: SKStore.DirName = SKStore.DirName::create("/legacyViews/");

// Recompile and reevaluate any views that depend upon any of the altered directories
private fun resetReactiveViews(
  context: mutable SKStore.Context,
  pos: Int,
  alteredDirs: SortedSet<P.Name>,
  options: Options,
): void {
  viewsDir = context.unsafeGetEagerDir(getViewsDir(context).dirName);
  viewsToReset = viewsDir
    .unsafeGetFileIter()
    .flatMap((x) ->
      x.i1.filter((file) ->
        SelectFile::type(file).cselect.from.any((from) ->
          alteredDirs.contains(from.i0.name)
        )
      )
    )
    .collect(Array);

  for (childView in viewsToReset) {
    selectFile = SelectFile::type(childView);
    newCSelect = try {
      SKDB.Compiler::create(
        false,
        options with {reactive => true},
        selectFile.select.pos,
        selectFile.queryParams,
      ).compileSelect(context, selectFile.select, selectFile.name, true);
    } catch {
    | SqlError _ ->
      error(
        pos,
        `Reactive view ${selectFile.name.toString()} rendered invalid by schema change`,
      )
    | e -> throw e
    };

    dirName = SKStore.DirName::create("/" + selectFile.name + "/");

    tableDir = context.unsafeGetEagerDir(getTableDir(context).dirName);
    fileName = SKStore.SID::create(selectFile.name.lower);
    tableDir.getArrayRaw(fileName).each((x) -> {
      table = context.unsafeGetEagerDir(DirDescr::type(x).dirName);
      clearData: (
        (SKStore.Key, mutable Iterator<SKStore.File>),
      ) -> mutable Iterator<
        (SKStore.Key, (SKStore.Path, SKStore.Path, Array<SKStore.File>)),
      > = (row) -> {
        key = row.i0;
        for (datum in table.unsafeGetAllDataIter(key)) {
          (_tick, source, writer, _value) = datum;
          yield (key, (source, writer, Array[]))
        }
      };
      table.writeArraySourceMany(
        context,
        table.unsafeGetFileIter().flatMap(clearData),
      );
    });

    _ = SKDB.evalSelect(context, newCSelect, None());

    dirDescr = SKDB.Compiler::getDirDescr(
      context,
      (selectFile.select.core as P.SelectCoreQuery _).params,
      newCSelect.from,
      newCSelect.params,
      newCSelect.id,
      dirName,
      true,
    );
    tableDir.writeArray(context, fileName, Array[dirDescr]);
  };
}
fun alterTable(
  context: mutable SKStore.Context,
  pos: Int,
  name: P.Name,
  transformSchema: Array<P.ColumnDefinition> -> Array<P.ColumnDefinition>,
  transformRow: (mutable SKStore.Context, RowValues) -> RowValues,
  options: Options,
): void {
  if (PredefinedTable::isReservedName(name)) {
    error(pos, "Can't add column to predefined table")
  };

  tableDir = getTableDir(context);
  sid = SKStore.SID::create(name.lower);

  oldDescr = tableDir.maybeGet(context, sid) match {
  | None() -> error(pos, "Table '" + name + "' does not exist")
  | Some(descr) -> getLatestDirDescr(context, descr)
  };
  dirName = oldDescr.dirName;
  dir = context.unsafeGetEagerDir(dirName);

  newSchema = transformSchema(oldDescr.schema);
  newKinds = newSchema.mapWithIndex((idx, col) -> (idx, P.IASC(), col.ty));

  convertToNewSchema: (
    (SKStore.Key, mutable Iterator<SKStore.File>),
  ) -> mutable Iterator<
    (SKStore.Key, (SKStore.Path, SKStore.Path, Array<SKStore.File>)),
  > = (kv) -> {
    (key, rowIter) = kv;
    rowIter.next() match {
    | Some(oldRow @ RowValues _) ->
      repeat = oldRow.repeat;
      rowIter.each(r ->
        r match {
        | RowValues(_, rr) -> !repeat = repeat + rr
        | _ -> invariant_violation("Invalid SKDB row")
        }
      );
      newRow = transformRow(context, oldRow with {repeat});
      newKey = RowKey(newRow, newKinds);
      newSource = SKStore.Path::create(dirName, newKey);

      // Since schema/kinds information is encoded in SKDB.RowKeys, we have to both null
      // out the old row(s) and write the new row. (instead of just overwriting the old key)
      for (x in dir.unsafeGetAllDataIter(key)) {
        (_tick, source, writer, _row) = x;
        yield (key, (source, writer, Array[]))
      };
      yield (newKey, (newSource, newSource, Array[newRow]))

    | None() -> void
    | Some(_) -> invariant_violation("Invalid SKDB row")
    };
  };

  modifications = dir.unsafeGetFileIter().flatMap(convertToNewSchema);

  dir.writeArraySourceMany(context, modifications);

  newDescr = DirDescr::create{
    name,
    schema => newSchema,
    dirName,
    alias => oldDescr.alias,
    isInput => true,
  };

  tableDir.writeArray(context, sid, Array[newDescr]);

  transitiveChildren = context.transitiveChildDirs(dirName);

  context.canReuse match {
  | SKStore.CRAlways(except) ->
    context.!canReuse = SKStore.CRAlways(except.union(transitiveChildren))
  | _ -> void
  };

  resetReactiveViews(
    context,
    pos,
    transitiveChildren.map((x) -> P.Name::create(x.dirName)),
    options,
  );
}

fun alterTableAddColumn(
  context: mutable SKStore.Context,
  pos: Int,
  name: P.Name,
  newCol: P.ColumnDefinition,
  options: Options,
): void {
  if (newCol.notNull is Some _ && newCol.default is None _) {
    error(pos, "ADD COLUMN must either be nullable or provide a default value");
  };
  if (newCol.unique is Some _ || newCol.primary is Some _) {
    error(pos, "ADD COLUMN must not impose a uniqueness or PK constraint")
  };

  transformSchema = (oldSchema) -> oldSchema.append(newCol);
  transformRow = (context, oldRow) ->
    RowValues(
      oldRow.values.append(
        newCol.default.flatMap(def -> evaluateDefault(context, def.expr)),
      ),
      oldRow.repeat,
    );
  alterTable(context, pos, name, transformSchema, transformRow, options);
}

// helper for alterTableDropColumn; hoisted due to polymorphic type
private fun dropAtIdx<T>(array: Array<T>, idx: Int): Array<T> {
  n = array.size();
  Array::fillBy(n - 1, i -> array[if (i < idx) i else i + 1]);
}

private fun alterTableDropColumn(
  context: mutable SKStore.Context,
  pos: Int,
  tableName: P.Name,
  colIdx: Int,
  options: Options,
): void {
  transformSchema = (oldSchema) -> dropAtIdx(oldSchema, colIdx);
  transformRow = (_context, oldRow) -> {
    RowValues(dropAtIdx(oldRow.values, colIdx), oldRow.repeat)
  };
  alterTable(context, pos, tableName, transformSchema, transformRow, options);
  errorAllExistingSubs(context, SKStore.DirName::create("/" + tableName + "/"));
}

const skdbOriginal: P.Name = P.Name::create("skdb_original");
// _Extract_ a column `c` from a table `t` with primary key column `id` to a
// one-to-many relation in a new table `t_c`.
fun alterTableExtractColumn(
  context: mutable SKStore.Context,
  stmts: Array<P.Stmt>,
  queryParams: Map<String, P.Value>,
  options: Options,
): ?(
  mutable SKStore.Context,
  mutable SKStore.Context,
  SKStore.Context,
) ~> void {
  // First, validate that the transaction has the expected form:
  // (1) CREATE TABLE t_c AS SELECT c, id, skdb_access, true AS skdb_original FROM t;
  //   i.e. create-table-as-select from some table `t` with selected columns (in any order)
  //       (a) some data column (`c` here),
  //       (b) the primary-key column (`id` here),
  //       (c) `skdb_access` iff `t` has an `skdb_access` column
  //       (d) `true AS skdb_original` verbatim
  // (2) ALTER TABLE t DROP COLUMN c;
  //   i.e. drops the data column selected in the create-table
  if (stmts.size() != 2) {
    pos = if (stmts.size() >= 1) stmts[0].pos else 0;
    error(pos, "Malformed extract-column transaction")
  };
  (createStmt, sourceTable, dataCol, pkCol) = stmts[0] match {
  | stmt @ P.CreateTableAs{
    ifNotExists => false,
    select => P.Select{
      core => P.SelectCoreQuery{
        distinct => false,
        params,
        from => Some(P.FromTable{name}),
        where => None(),
        groupBy => None(),
        having => None(),
      },
      orderBy => None(),
      limit => None(),
      rest,
    },
  } if (rest.size() == 0) ->
    // Validate columns of SELECT: check (a-d) from above
    sourceTable = getTable(context, stmt.pos, name);
    oldSchema = sourceTable.schema;
    params.foldl<(?P.ColumnDefinition, ?P.ColumnDefinition, Bool, Bool)>(
      (acc, curr) -> {
        (seen_data, seen_pk, seen_access, seen_orig) = acc;
        curr match {
        | P.SelectExpr(
          P.VInt(1),
          Some(alias),
        ) if (alias == skdbOriginal && !seen_orig) ->
          (seen_data, seen_pk, seen_access, true)
        | P.SelectExpr(
          P.Identifier(ident, _),
          None(),
        ) if (ident == skdbAccessColName) ->
          (seen_data, seen_pk, true, seen_orig)
        | P.SelectExpr(P.Identifier(ident, _), None()) ->
          oldSchema.find(col -> col.name == ident) match {
          | data_col @ Some(col) if (
            col.primary is None _ &&
            seen_data is None _
          ) ->
            (data_col, seen_pk, seen_access, seen_orig)
          | pk_col @ Some(col) if (
            col.primary is Some _ &&
            seen_pk is None _
          ) ->
            (seen_data, pk_col, seen_access, seen_orig)
          | _ -> error(stmt.pos, "Malformed extract-column transaction")
          }
        | _ -> error(stmt.pos, "Malformed extract-column transaction")
        }
      },
      (None(), None(), false, false),
    ) match {
    | (
      Some(data),
      Some(pk),
      has_skdb_access,
      true,
    ) if (
      has_skdb_access == oldSchema.any(col -> col.name == skdbAccessColName)
    ) ->
      (stmt, sourceTable, data, pk)
    | _ -> error(stmt.pos, "Malformed extract-column transaction")
    }
  | bad_stmt -> error(bad_stmt.pos, "Malformed extract-column transaction")
  };

  colIdx = stmts[1] match {
  | P.AlterTableDropCol{
    name,
    col,
  } if (name == sourceTable.name && col == dataCol.name) ->
    sourceTable.schema.findIdx(schemaCol -> schemaCol.name == col).fromSome()
  | stmt -> error(stmt.pos, "Malformed extract-column transaction6")
  };

  // Construct a system reactive view, checking the constraint that the extracted
  // table contains no more than one "skdb_original" column for each primary key
  // in the source table
  originalUniqueConstraint = {
    pkIdent = P.Identifier(pkCol.name, None());
    check_unique = P.SelectExpr(
      P.Check(
        P.BinOp(
          P.OLtEq(),
          P.Call(P.Name::create("count"), Array[pkIdent], false),
          P.VInt(1),
        ),
      ),
      Some(P.Name::create("unique_original_extracted_value")),
    );
    core = P.SelectCoreQuery{
      params => Array[check_unique],
      from => Some(
        P.FromTable{
          asName => None(),
          indexed => false,
          name => createStmt.name,
        },
      ),
      groupBy => Some(Array[pkIdent]),
      where => Some(P.Identifier(skdbOriginal, None())),
      having => None(),
      distinct => false,
    };
    select = P.Select{
      core,
      orderBy => None(),
      limit => None(),
      pos => stmts[0].pos,
      rest => Array[],
    };
    P.CreateView{
      reactive => true,
      name => P.Name::create(
        "__skdb__unique_original__" + createStmt.name.lower,
      ),
      ifNotExists => false,
      query => P.SQuery(select),
    }
  };

  user = context.getGlobal("USER").map(UserFile::type);
  evaluator = Evaluator{options, user};
  Some((context, delta, root) ~> {
    // NB: lie about being inTransaction, since we're under lock here
    evaluator.stmt(context, queryParams, createStmt, false) match {
    | Some(op) -> op(context, delta, root)
    | None() ->
      error(
        stmts[0].pos,
        "Failed to create table for extract-column transaction",
      )
    };
    evaluator.stmt(
      context,
      queryParams,
      originalUniqueConstraint,
      false,
    ) match {
    | Some(op) -> op(context, delta, root)
    | None() ->
      error(
        stmts[0].pos,
        "Unique skdb_original constraint failed for extract-column transaction",
      )
    };

    alterTableDropColumn(
      context,
      stmts[1].pos,
      sourceTable.name,
      colIdx,
      options,
    );

    resetIndexes(context, sourceTable.name);
    legacyView = createLegacyView(
      context,
      sourceTable.name,
      dataCol,
      pkCol,
      createStmt,
    );

    evaluator.stmt(context, queryParams, legacyView, false) match {
    | Some(op) -> op(context, delta, root)
    | None() -> error(createStmt.pos, "")
    }
  })
}

// Re-create indexes on changed table, in case they reference a column whose index has changed
private fun resetIndexes(
  context: mutable SKStore.Context,
  table: P.Name,
): void {
  tableDirName = getTable(context, 0, table).dirName;
  indexInputDir = getIndexInputDir(context);
  indexOutputDir = getIndexOutputDir(context);
  indexOutputDir.items(context).each(kv -> {
    idxDescr = kv.i1.next() match {
    | Some(x) if (x.tableDirName == tableDirName) -> x
    | _ -> return void
    };
    context.removeDir(idxDescr.dirName);

    key = kv.i0;
    input = indexInputDir.maybeGet(context, key).fromSome();
    indexOutputDir.writeArray(
      context,
      key,
      Array[
        createUserIndex(
          context,
          input.name,
          input.pos,
          input.on,
          input.columns,
          input.unique,
          Some(input.toString()),
        ),
      ],
    )
  })
}

class LegacyViewFile{
  // `legacyView` joins extracted columns with the original table on its primary key column,
  // so as to serve clients connecting on a pre-extraction schema
  legacyView: P.Name,
  pkCol: P.ColumnDefinition,
  // each pair in `extractedCols` is
  // (i0) a column extracted from some table and
  // (i1) the name of the table it's been extracted to
  extractedCols: SortedMap<P.ColumnDefinition, P.Name>,
} extends SKStore.File {
  static fun type(f: SKStore.File): LegacyViewFile {
    f match {
    | x @ LegacyViewFile _ -> x
    | _ -> invariant_violation("Unexpected row file type")
    }
  }
}

fun getLegacyViewsDir(
  context: mutable SKStore.Context,
): SKStore.EHandle<SKStore.Key, LegacyViewFile> {
  makeDir(LegacyViewFile::type, context, legacyViews, () -> {
    context.mkdir(x ~> x, LegacyViewFile::type, legacyViews)
  })
}

// When a column is extracted from a table to a one-to-many relation, we set up a reactive
// view to mimic the pre-extraction schema for any clients tailing on that legacy schema.
private fun createLegacyView(
  context: mutable SKStore.Context,
  sourceTable: P.Name,
  column: P.ColumnDefinition,
  pkCol: P.ColumnDefinition,
  extractionStmt: P.CreateTableAs,
): P.CreateView {
  newName = P.Name::create(
    `__skdb__legacy_schema_${sourceTable}_${column.name}`,
  );

  createViewStmt = (oldTableOrView) -> {
    newTable = extractionStmt.name;

    join = P.Join{
      kind => P.JLeft(false),
      lhs => P.FromTable{name => oldTableOrView, asName => None()},
      rhs => P.FromTable{name => newTable, asName => None()},
      using => None(),
      on => Some(
        P.BinOp(
          P.OEq(),
          P.Identifier(pkCol.name, Some(oldTableOrView)),
          P.Identifier(pkCol.name, Some(newTable)),
        ),
      ),
    };

    viewQuery = P.SelectCoreQuery{
      distinct => false,
      groupBy => None(),
      having => None(),
      from => Some(join),
      params => Array[
        P.SelectStar(Some(oldTableOrView)),
        P.SelectExpr(P.Identifier(column.name, Some(newTable)), None()),
      ],
      where => Some(P.Identifier(skdbOriginal, Some(newTable))),
    };

    P.CreateView{
      reactive => true,
      ifNotExists => false,
      name => newName,
      query => P.SQuery(
        P.Select{
          core => viewQuery,
          orderBy => None(),
          limit => None(),
          rest => Array[],
        },
      ),
    }
  };

  sid = SKStore.SID::create(sourceTable.lower);
  legacyViewsDir = getLegacyViewsDir(context);
  legacyView = legacyViewsDir.maybeGet(context, sid);

  legacyView.each(file -> {
    if (file.extractedCols.keys().any(ec -> ec.name == column.name)) {
      error(
        extractionStmt.pos,
        `a column named ${
          column.name
        } has already been extracted from ${sourceTable}`,
      )
    }
  });

  legacyViewsDir.writeArray(
    context,
    sid,
    Array[
      LegacyViewFile{
        legacyView => newName,
        pkCol,
        extractedCols => legacyView
          .maybe(SortedMap::create(), x -> x.extractedCols)
          .set(column, extractionStmt.name),
      },
    ],
  );

  createViewStmt(legacyView.maybe(sourceTable, file -> file.legacyView));
}

fun propagateRowsToExtractedTables(
  context: mutable SKStore.Context,
  table: DirDescr,
  legacySchema: Array<P.ColumnDefinition>,
  rows: Array<RowValues>,
): SortedMap<DirDescr, Array<RowValues>> {
  legacyView = getLegacyViewsDir(context).maybeGet(
    context,
    SKStore.SID::create(table.name.lower),
  ) match {
  | Some(f) -> f
  | None() ->
    print_error(
      `Missing extracted-column metadata for schema with unknown column(s)`,
    );
    skipExit(1)
  };

  pkIdx = legacySchema
    .indexOf(legacyView.pkCol)
    .fromSome("Missing primary-key column in legacy schema");

  accessIdx = legacySchema
    .findIdx(col -> col.name == skdbAccessColName)
    .fromSome("Missing skdb_access column in legacy schema");

  legacySchema
    .items()
    .filter(item -> !table.schema.contains(item.i1))
    .foldl(
      (map, curr) -> {
        (idx, extractedCol) = curr;
        extractedTable = getTable(
          context,
          0,
          legacyView.extractedCols.get(extractedCol),
        );

        translationIndices = extractedTable.schema.map(col -> {
          if (col == extractedCol) {
            Some(idx)
          } else if (col.name == legacyView.pkCol.name) {
            Some(pkIdx)
          } else if (col.name == skdbAccessColName) {
            Some(accessIdx)
          } else if (col.name == skdbOriginal) {
            None()
          } else {
            invariant_violation(
              "Extracted table schema has unexpected column: " + col.name,
            )
          }
        });

        extractedTableRows = rows.map(row -> {
          values: Array<?SKDB.CValue> = translationIndices.map(idxOpt ->
            idxOpt match {
            | Some(x) -> row.values[x]
            | None() ->
              Some(CInt(1)) // "true" skdb_original for all values on legacy schema
            }
          );
          RowValues::create(values, row.repeat)
        });

        map.set(extractedTable, extractedTableRows)
      },
      SortedMap::create(),
    )
}

module end;
