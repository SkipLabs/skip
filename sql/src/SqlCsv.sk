module SKCSV;

base class Token {
  children =
  | NewLine()
  | Comma()
  | Chars(Array<Char>)
}

@cpp_extern("SKIP_stdin_has_data")
native fun stdinHasData(): Int32;

fun lexRaw(next: () -> Char): mutable Iterator<Token> {
  acc = mutable Vector[];
  lastIsString = false;
  loop {
    next() match {
    | '\n' ->
      if (!lastIsString) {
        str = acc.toArray();
        acc.clear();
        yield Chars(str);
      };
      break void
    | ',' ->
      if (!lastIsString) {
        str = acc.toArray();
        acc.clear();
        yield Chars(str);
      };
      !lastIsString = false;

      yield Comma()
    | '"' ->
      !lastIsString = true;
      acc.push('"');
      loop {
        c = next();
        acc.push(c);
        if (c == '"') {
          break void;
        }
      };
      str = acc.toArray();
      acc.clear();
      yield Chars(str)
    | x ->
      !lastIsString = false;
      acc.push(x)
    }
  }
}

base class CValue {
  children =
  | CInt(Int)
  | CFloat(Float)
  | CString(String)
}

fun trim(chars: Array<Char>): Array<Char> {
  i = 0;
  while (i < chars.size() && chars[i] == ' ') !i = i + 1;
  j = chars.size();
  while (j - 1 >= 0 && chars[j - 1] == ' ') !j = j - 1;
  chars.slice(i, j)
}

fun lex(next: () -> Char): mutable Iterator<(Bool, String)> {
  stringAcc: ?mutable Vector<Char> = None();
  isString: Bool = false;
  for (tok in lexRaw(next)) {
    (tok, stringAcc) match {
    | (Chars(chars), Some(acc)) if (chars.size() > 0 && chars[0] == '"') ->
      !isString = true;
      !chars = trim(chars);
      acc.extend(chars.slice(0, chars.size() - 1))
    | (
      Chars(chars),
      None(),
    ) if (chars.size() > 0 && chars[chars.size() - 1] == '"') ->
      !isString = true;
      !chars = trim(chars);
      !chars = chars.slice(1, chars.size() - 1);
      !stringAcc = Some(Vector::mcreateFromItems(chars))
    | _ ->
      stringAcc match {
      | None() -> void
      | Some(acc) ->
        !stringAcc = None();
        yield (isString, String::fromChars(acc.toArray()))
      };
      !isString = false;
      tok match {
      | Chars(chars) -> yield (false, String::fromChars(trim(chars)))
      | NewLine() -> break void
      | Comma() -> void
      }
    }
  };
  stringAcc match {
  | None() -> void
  | Some(acc) ->
    !stringAcc = None();
    yield (isString, String::fromChars(acc.toArray()))
  }
}

fun parseCsv<T>(
  line: mutable Ref<Int>,
  f: ((Bool, String)) ~> T,
): (Bool, Array<Array<T>>) {
  array = mutable Vector[];
  eof = false;
  vtry(
    () -> {
      for (_ in Range(0, 1000)) {
        values = mutable Vector[];
        for (value in lex(() -> getChar())) {
          values.push(value);
        };
        cvalues = values.map(f);
        array.push(cvalues.toArray());
        line.set(line.get() + 1);
      }
    },
    exn -> {
      if (exn is EndOfFile _) {
        !eof = true;
        return void;
      };
      print_error("Error, line " + line.get() + ": " + exn.getMessage());
      skipExit(23);
    },
  );
  (eof, array.toArray())
}

fun insert(
  context: mutable SKFS.Context,
  line: mutable Ref<Int>,
  options: SKSQL.Options,
  table: SKSQL.DirDescr,
  user: ?SKSQL.UserFile,
): SKFS.ContextOp {
  eval = SKSQL.Evaluator{options, user};
  pos = 0;
  inTransaction = false;
  paramsOpt = None();
  (eof, array) = parseCsv(line, SKSQL.parseCSVValue);
  f = eval.insert(context, pos, None(), inTransaction, table, paramsOpt, array);
  if (!eof) return SKFS.CContinue(f);
  SKFS.CStop(f)
}

fun replayDiff(
  context: mutable SKFS.Context,
  lineNbr: mutable Ref<Int>,
  getLine: () -> String,
  table: SKSQL.DirDescr,
  user: ?(String, String),
): SKFS.ContextOp {
  userFileOpt = user.map(x -> SKSQL.UserFile::create(context, x.i0, x.i1));
  origDir = context.unsafeGetEagerDir(table.dirName);
  buffer: mutable Vector<SKSQL.RowValues> = mutable Vector[];
  if (table.windowSize is Some _) {
    print_error("Cannot use write-csv on a window or a stream");
    skipExit(23);
  };

  makeFun = rows ->
    Some((context, _, _) ~> {
      entries = mutable Vector[];
      dir = origDir;
      for (row in rows) {
        if (row.repeat != 0) continue;
        key: SKFS.BaseName = SKSQL.RowKey(row.setRepeat(1), table.kinds);
        for ((source, _) in dir.getDataIter(context, key)) {
          entries.push((key, (source.path(), Array<SKFS.File>[])));
        };
      };
      if (!entries.isEmpty()) {
        dir.writeArraySourceMany(context, entries.iterator());
      };
      !dir = context.unsafeGetEagerDir(table.dirName);
      dir.writeArrayMany(
        context,
        rows
          .iterator()
          .filter(row -> row.repeat != 0)
          .map(row -> {
            (k, v) = (SKSQL.RowKey(row, table.kinds), Array[row]);
            ((k : SKFS.BaseName), (v : Array<SKFS.File>))
          }),
      );
      context.update();
    });

  vtry<SKFS.ContextOp>(
    () -> {
      loop {
        line = getLine();
        lineNbr.set(lineNbr.get() + 1);
        if (line == "") continue;
        chars = mutable Vector[];
        iter = line.getIter();
        checkpoint = false;
        loop {
          c = iter.next() match {
          | None() if (checkpoint) -> break void
          | None() ->
            print_error(
              "Error, line " + lineNbr.get() + ": unexpected end of line",
            );
            skipExit(23)
          | Some(':') ->
            !checkpoint = true;
            continue
          | Some(x) -> x
          };
          if (c == '\t') break void;
          if (c < '0' || c > '9') {
            print_error(
              "Error, line " + lineNbr.get() + ": expected an integer",
            );
            skipExit(23)
          };
          chars.push(c);
        };
        prefix = String::fromChars(chars.toArray()).toInt();
        if (checkpoint) {
          continue;
        };
        str = line.sub(iter, line.length() - chars.size() - 1);
        values = mutable Vector[];
        strIter = str.getIter();
        next = () -> {
          val = strIter.next();
          val match {
          | None() -> '\n'
          | Some(x) -> x
          }
        };
        for (value in lex(next)) {
          values.push(value);
        };
        cvalues = values.map(SKSQL.parseCSVValue);
        pos = lineNbr.get();
        newRows = SKSQL.computeInsert(
          context,
          false,
          pos,
          None(),
          Array[cvalues.toArray()],
          table,
        );
        userFileOpt match {
        | None() -> void
        | Some(userFile) ->
          SKSQL.checkUserRows(context, userFile, pos, table, newRows)
        };
        buffer.extend(newRows.map(x -> x.setRepeat(prefix)));

        if (stdinHasData() != 0) continue;
        rows = buffer.toArray();
        buffer.clear();

        break SKFS.CContinue(makeFun(rows))
      }
    },
    exn -> {
      if (exn is EndOfFile _) {
        rows = buffer.toArray();
        SKFS.CStop(makeFun(rows))
      } else {
        flushStdout();
        SKFS.CContinue(None())
      }
    },
  );
}

fun replayStdin(): Map<String, (Int, Int)> {
  map = mutable Map<String, (Int, Int)>[];
  lineNbr = 1;
  txNbr = 0;
  vtry(
    () -> {
      loop {
        line = read_line() match {
        | None() -> break map.chill()
        | Some("") ->
          !txNbr = txNbr + 1;
          continue
        | Some(l) -> l
        };
        chars = mutable Vector[];
        iter = line.getIter();
        checkpoint = false;
        loop {
          c = iter.next() match {
          | None() ->
            print_error("Error, line " + lineNbr + ": unexpected end of line");
            skipExit(23)
          | Some(':') ->
            !checkpoint = true;
            break void
          | Some(x) -> x
          };
          if (c == '\t') break void;
          if (c < '0' || c > '9') {
            print_error("Error, line " + lineNbr + ": expected an integer key");
            skipExit(23)
          };
          chars.push(c);
        };
        if (checkpoint) continue;
        repeat = String::fromChars(chars.toArray()).toInt();
        value = line.sub(iter, line.length() - chars.size() - 1);
        if (map.containsKey(value)) {
          (oldTxNbr, oldRepeat) = map[value];
          if (oldTxNbr == txNbr) {
            map![value] = (txNbr, oldRepeat + repeat);
          } else {
            map![value] = (txNbr, repeat);
          }
        } else {
          map![value] = (txNbr, repeat);
        };
        !lineNbr = lineNbr + 1;
      }
    },
    exn -> {
      if (!(exn is EndOfFile _)) {
        print_error("Unexpected error: " + exn.getMessage());
        skipExit(22);
      };
      map.chill()
    },
  );
}
