module SKDB;

fun parseStmt(lex: Lexer, pos: Int): (Int, ?Stmt) {
  (!pos, tok) = lex.next(pos);
  str = lex.wordAt(tok);
  (!pos, result) = str.uppercase() match {
  | "CREATE" ->
    (!pos, x) = parseCreate(lex, tok.posBegin, pos);
    (pos, Some(x))
  | "INSERT" ->
    (!pos, x) = parseInsert(lex, pos);
    (pos, Some(x))
  | "UPDATE" ->
    (!pos, x) = parseUpdate(lex, pos);
    (pos, Some(x))
  | "DROP" ->
    (!pos, x) = parseDrop(lex, pos);
    (pos, Some(x))
  | "DELETE" ->
    (!pos, x) = parseDelete(lex, pos);
    (pos, Some(x))
  | "SELECT" ->
    (!pos, x) = parseSelect(lex, pos);
    (pos, Some(x))
  | "PRAGMA" ->
    while (!lex.isEq(pos, ";")) {
      (!pos, _) = lex.next(pos);
    };
    (pos, None())
  | _ ->
    error(tok.posBegin, "Unexpected SQL statement starting with '" + str + "'")
  };
  if (!isEOF(lex, pos)) {
    !pos = lex.expect(pos, ";");
  };
  (pos, result)
}

fun parseUpdate(lex: Lexer, pos: Int): (Int, Update) {
  posBegin = pos;
  (!pos, name) = lex.nextWord(pos);
  parseUpdateWithName(lex, posBegin, pos, Name::create(name));
}

fun parseUpdateWithName(
  lex: Lexer,
  posBegin: Int,
  pos: Int,
  name: Name,
): (Int, Update) {
  !pos = lex.expectUpper(pos, "SET");
  (!pos, sets) = parseSets(lex, pos);
  where = if (lex.isEqUpper(pos, "WHERE")) {
    !pos = lex.expectUpper(pos, "WHERE");
    (!pos, cond) = parseExpr(lex, pos);
    Some(cond)
  } else {
    None()
  };
  (pos, Update{pos => posBegin, name, sets, where})
}

fun parseSets(lex: Lexer, pos: Int): (Int, Array<(Name, Pos, Expr)>) {
  (!pos, firstNameStr) = lex.nextWord(pos);
  firstName = Name::create(firstNameStr);
  !pos = lex.skipSpaces(pos);
  posEq = pos;
  !pos = lex.expect(pos, "=");
  (!pos, firstValue) = parseExpr(lex, pos);
  result = mutable Vector[(firstName, Pos(posEq), firstValue)];
  loop {
    if (!lex.isEq(pos, ",")) {
      break void;
    };
    !pos = lex.expect(pos, ",");
    (!pos, word) = lex.nextWord(pos);
    name = Name::create(word);
    !pos = lex.skipSpaces(pos);
    !posEq = pos;
    !pos = lex.expect(pos, "=");
    (!pos, value) = parseExpr(lex, pos);
    result.push((name, Pos(posEq), value));
  };
  (pos, result.toArray())
}

fun parseDelete(lex: Lexer, pos: Int): (Int, Delete) {
  posBegin = pos;
  colName = if (lex.isEqUpper(pos, "FROM")) {
    !pos = lex.expectUpper(pos, "FROM");
    None()
  } else {
    (!pos, name) = lex.nextWord(pos);
    !pos = lex.expectUpper(pos, "FROM");
    Some(Name::create(name))
  };
  (!pos, name) = lex.nextWord(pos);
  where = if (lex.isEqUpper(pos, "WHERE")) {
    !pos = lex.expectUpper(pos, "WHERE");
    (!pos, cond) = parseExpr(lex, pos);
    Some(cond)
  } else {
    None()
  };
  (pos, Delete{pos => posBegin, colName, name => Name::create(name), where})
}

fun parseDrop(lex: Lexer, pos: Int): (Int, Drop) {
  kind = if (lex.isEqUpper(pos, "VIEW")) {
    !pos = lex.expectUpper(pos, "VIEW");
    TView()
  } else if (lex.isEqUpper(pos, "INDEX")) {
    !pos = lex.expectUpper(pos, "INDEX");
    TIndex()
  } else {
    !pos = lex.expectUpper(pos, "TABLE");
    TTable()
  };
  (!pos, name) = lex.nextWord(pos);
  (pos, Drop{pos, kind, name => Name::create(name)})
}

fun parseQuery(lex: Lexer, pos: Int): (Int, Query) {
  !pos = lex.expectUpper(pos, "SELECT");
  parseSelect(lex, pos);
}

fun parseSelectParams(lex: Lexer, pos: Int): (Int, SelectParams) {
  (!pos, colNames) = parseColNames(lex, pos);
  selectParams = colNames match {
  | None() ->
    if (lex.isEq(pos, ",")) {
      !pos = lex.expect(pos, ",");
      (!pos, extraParamsOpt) = parseColNames(lex, pos);
      extraParamsOpt match {
      | None() -> error(pos, "*, * not allowed")
      | Some(extraParams) -> SelectParams(true, extraParams)
      }
    } else {
      SelectParams(true, Array[])
    }
  | Some(params) -> SelectParams(false, params)
  };
  (pos, selectParams)
}

fun parseSelect(lex: Lexer, pos: Int): (Int, Select) {
  posBegin = lex.token(pos).posBegin;
  kind = if (lex.isEqUpper(pos, "ALL")) {
    !pos = lex.expectUpper(pos, "ALL");
    SAll()
  } else if (lex.isEqUpper(pos, "DISTINCT")) {
    !pos = lex.expectUpper(pos, "DISTINCT");
    SDistinct()
  } else {
    SNone()
  };
  (!pos, selectParams) = parseSelectParams(lex, pos);
  (from, join) = if (lex.isEqUpper(pos, "FROM")) {
    (!pos, from, join) = parseFromJoin(lex, pos);
    (Some(from), join)
  } else {
    (None(), None())
  };
  where = if (lex.isEqUpper(pos, "WHERE")) {
    !pos = lex.expectUpper(pos, "WHERE");
    (!pos, e) = parseExpr(lex, pos);
    Some(e)
  } else {
    None()
  };
  groupBy = if (lex.isEqUpper(pos, "GROUP")) {
    !pos = lex.expectUpper(pos, "GROUP");
    !pos = lex.expectUpper(pos, "BY");
    (!pos, groupBy) = parseColNames(lex, pos);
    groupBy
  } else {
    None()
  };
  having = if (lex.isEqUpper(pos, "HAVING")) {
    !pos = lex.expectUpper(pos, "HAVING");
    (!pos, cond) = parseExpr(lex, pos);
    Some(cond)
  } else {
    None()
  };
  orderBy = if (lex.isEqUpper(pos, "ORDER")) {
    (!pos, orderBy) = parseOrderBy(lex, pos);
    Some(orderBy)
  } else {
    None()
  };
  limit = if (lex.isEqUpper(pos, "LIMIT")) {
    !pos = lex.expectUpper(pos, "LIMIT");
    (!pos, limit) = parseExpr(lex, pos);
    Some(limit)
  } else {
    None()
  };
  query = Select{
    id => Name::create(""),
    pos => posBegin,
    kind,
    params => selectParams,
    from,
    join,
    where,
    groupBy,
    having,
    orderBy,
    limit,
    rest => None(),
  };

  restVector = mutable Vector[];
  loop {
    rkind = if (lex.isEqUpper(pos, "EXCEPT")) {
      !pos = lex.expectUpper(pos, "EXCEPT");
      QExcept()
    } else if (lex.isEqUpper(pos, "UNION")) {
      !pos = lex.expectUpper(pos, "UNION");
      all = if (lex.isEqUpper(pos, "ALL")) {
        !pos = lex.expectUpper(pos, "ALL");
        true
      } else {
        false
      };
      QUnion(if (all) UAll() else USingle())
    } else if (lex.isEqUpper(pos, "INTERSECT")) {
      !pos = lex.expectUpper(pos, "INTERSECT");
      QIntersect(false)
    } else {
      break void;
    };
    !pos = lex.expectUpper(pos, "SELECT");
    (!pos, select) = parseSelect(lex, pos);
    restVector.push((rkind, select));
  };
  invariant(restVector.size() <= 1);
  !query = query with {
    rest => if (restVector.size() > 0) Some(restVector[0]) else None(),
  };
  !query = query with {
    id => Name::create(
      "SELECT_" + hash(query with {id => Name::create(""), pos => 0}),
    ),
  };
  (pos, query)
}

fun parseColNames(lex: Lexer, pos: Int): (Int, ?Array<(Expr, ?Name)>) {
  (_, tok) = lex.next(pos);
  if (lex.isEqAt(tok, "*")) {
    return (tok.posEnd, None());
  };
  params = mutable Vector[];
  loop {
    (!pos, param) = parseExpr(lex, pos);
    asParamOpt: ?Name = None();
    if (lex.isEqUpper(pos, "AS")) {
      !pos = lex.expectUpper(pos, "AS");
      (!pos, asParam) = lex.nextWord(pos);
      !asParamOpt = Some(Name::create(asParam));
    };
    !pos = lex.skipSpaces(pos);
    if (isEOF(lex, pos)) {
      params.push((param, asParamOpt));
      break void;
    };
    if (
      (lex.content[pos] == '_' || isLetter(lex.content[pos])) &&
      !lex.isKeyword(pos)
    ) {
      (!pos, asParam) = lex.nextWord(pos);
      !asParamOpt = Some(Name::create(asParam));
    };
    params.push((param, asParamOpt));
    if (lex.isEq(pos, ",")) {
      !pos = lex.expect(pos, ",");
    } else {
      break void
    };
  };
  (pos, Some(params.toArray()))
}

fun parseTableName(lex: Lexer, pos: Int): (Int, TableName) {
  sfrom = if (lex.isEq(pos, "(")) {
    !pos = lex.expect(pos, "(");
    (!pos, query) = parseQuery(lex, pos);
    !pos = lex.expect(pos, ")");
    FQuery(query);
  } else {
    (!pos, sfrom) = lex.nextWord(pos);
    FName(Name::create(sfrom))
  };
  posMark = pos;
  if (isEOF(lex, pos)) {
    return (posMark, TableName(sfrom, None()));
  };
  (!pos, tok) = lex.next(pos);
  if (isSymbol(lex.content[tok.posBegin])) {
    return (posMark, TableName(sfrom, None()))
  };
  word = lex.wordAt(tok);
  wordUpper = word.uppercase();
  asStr = wordUpper match {
  | "AS" ->
    (!pos, !word) = lex.nextWord(pos);
    Some(Name::create(word))
  | _ if (isKeyword(word)) ->
    !pos = posMark;
    None()
  | _ ->
    foundNewLine = false;
    cursor = posMark;
    while (cursor < tok.posBegin) {
      if (lex.content[cursor] == '\n') {
        !foundNewLine = true;
        break void;
      };
      !cursor = cursor + 1;
    };
    if (foundNewLine) {
      !pos = posMark;
      None()
    } else {
      Some(Name::create(word))
    }
  };
  indexed = if (lex.isEqUpper(pos, "NOT")) {
    !pos = lex.expectUpper(pos, "NOT");
    !pos = lex.expectUpper(pos, "INDEXED");
    false
  } else {
    true
  };
  (pos, TableName(sfrom, asStr, indexed))
}

fun parseTableNames(lex: Lexer, pos: Int): (Int, Array<TableName>) {
  (!pos, first) = parseTableName(lex, pos);
  tableNames = mutable Vector[first];
  loop {
    if (lex.isEq(pos, ",")) {
      !pos = lex.expect(pos, ",");
    } else {
      break void;
    };
    (!pos, tableName) = parseTableName(lex, pos);
    tableNames.push(tableName);
  };
  (pos, tableNames.toArray())
}

fun parseJoin(lex: Lexer, pos: Int, kind: JoinKind): (Int, Join) {
  !pos = lex.expectUpper(pos, "JOIN");
  (!pos, names) = parseTableNames(lex, pos);
  on = if (lex.isEqUpper(pos, "ON")) {
    !pos = lex.expectUpper(pos, "ON");
    (!pos, paramsOpt) = parseColNames(lex, pos);
    paramsOpt.map(params -> {
      clauses = params.map(x -> x.i0);
      if (clauses.size() == 0) {
        error(pos, "Expected ON clauses");
      };
      (clauses[0], clauses.slice(1, clauses.size()))
    })
  } else {
    None()
  };
  (pos, Join{kind, names, on})
}

fun parseFromJoin(lex: Lexer, pos: Int): (Int, Array<TableName>, ?Join) {
  !pos = lex.expectUpper(pos, "FROM");
  posBeforeParen = pos;
  hasParen = lex.isEq(pos, "(");
  if (hasParen) {
    !pos = lex.expect(pos, "(");
    if (lex.isEqUpper(pos, "SELECT")) {
      !pos = posBeforeParen;
      !hasParen = false;
    }
  };
  (!pos, result) = parseTableNames(lex, pos);
  join = if (lex.isEqUpper(pos, "CROSS")) {
    !pos = lex.expectUpper(pos, "CROSS");
    (!pos, join) = parseJoin(lex, pos, JCross());
    Some(join)
  } else if (lex.isEqUpper(pos, "LEFT")) {
    !pos = lex.expectUpper(pos, "LEFT");
    outer = if (lex.isEqUpper(pos, "OUTER")) {
      !pos = lex.expectUpper(pos, "OUTER");
      true
    } else {
      false
    };
    (!pos, join) = parseJoin(lex, pos, JLeft(outer));
    Some(join)
  } else if (lex.isEqUpper(pos, "RIGHT")) {
    !pos = lex.expectUpper(pos, "RIGHT");
    outer = if (lex.isEqUpper(pos, "OUTER")) {
      !pos = lex.expectUpper(pos, "OUTER");
      true
    } else {
      false
    };
    (!pos, join) = parseJoin(lex, pos, JRight(outer));
    Some(join)
  } else if (lex.isEqUpper(pos, "INNER")) {
    !pos = lex.expectUpper(pos, "INNER");
    (!pos, join) = parseJoin(lex, pos, JInner());
    Some(join)
  } else if (lex.isEqUpper(pos, "JOIN")) {
    (!pos, join) = parseJoin(lex, pos, JNone());
    Some(join)
  } else if (lex.isEqUpper(pos, "FULL")) {
    !pos = lex.expectUpper(pos, "FULL");
    !pos = lex.expectUpper(pos, "OUTER");
    (!pos, join) = parseJoin(lex, pos, JOuter());
    Some(join)
  } else {
    None()
  };
  if (hasParen) !pos = lex.expect(pos, ")");
  (pos, result, join)
}

fun parseOrderByElt(lex: Lexer, pos: Int): (Int, (Expr, IKind)) {
  (!pos, orderBy) = parseExpr(lex, pos);
  kind = if (lex.isEqUpper(pos, "DESC")) {
    !pos = lex.expectUpper(pos, "DESC");
    IDESC()
  } else if (lex.isEqUpper(pos, "ASC")) {
    !pos = lex.expectUpper(pos, "ASC");
    IASC()
  } else {
    INONE()
  };
  (pos, (orderBy, kind))
}

fun parseOrderBy(lex: Lexer, pos: Int): (Int, Array<(Expr, IKind)>) {
  !pos = lex.expectUpper(pos, "ORDER");
  !pos = lex.expectUpper(pos, "BY");
  orders = mutable Vector[];
  (!pos, orderByElt) = parseOrderByElt(lex, pos);
  orders.push(orderByElt);
  while (lex.isEq(pos, ",")) {
    !pos = lex.expect(pos, ",");
    (!pos, !orderByElt) = parseOrderByElt(lex, pos);
    orders.push(orderByElt);
  };
  (pos, orders.toArray())
}

fun parseWhenCases(lex: Lexer, pos: Int): (Int, Array<(Expr, Expr)>) {
  cases = mutable Vector[];
  loop {
    (_, tok) = lex.next(pos);
    if (lex.isEqUpperAt(tok, "ELSE") || lex.isEqUpperAt(tok, "END")) {
      return (tok.posBegin, cases.toArray());
    };
    !pos = lex.expectUpper(pos, "WHEN");
    (!pos, cond) = parseExpr(lex, pos);
    !pos = lex.expectUpper(pos, "THEN");
    (!pos, then) = parseExpr(lex, pos);
    cases.push((cond, then));
  }
}

fun parseElseCase(lex: Lexer, pos: Int): (Int, ?Expr) {
  if (lex.isEqUpper(pos, "ELSE")) {
    !pos = lex.expectUpper(pos, "ELSE");
    (!pos, e) = parseExpr(lex, pos);
    (pos, Some(e))
  } else {
    (pos, None())
  }
}

fun parseExpr(lex: Lexer, pos: Int): (Int, Expr) {
  parseExprWithPrio(100, lex, pos)
}

fun isEOF(lex: Lexer, pos: Int): Bool {
  !pos = lex.skipSpaces(pos);
  pos >= lex.content.size()
}

fun parseOperator(lex: Lexer, pos: Int): ?(Int, String) {
  if (isEOF(lex, pos)) return None();
  (!pos, tok1) = lex.next(pos);
  if (isEOF(lex, pos)) return None();
  (_, tok2) = lex.next(pos);

  if (
    (lex.content[tok2.posBegin] != '*' &&
      isSymbol(lex.content[tok1.posBegin]) &&
      isSymbol(lex.content[tok2.posBegin])) &&
    tok2.posBegin == tok1.posEnd &&
    lex.content[tok2.posBegin] != '\'' &&
    lex.content[tok2.posBegin] != '('
  ) {
    op = lex.wordAt(Token(tok1.posBegin, tok2.posEnd));
    return Some((tok2.posEnd, op))
  };
  if (
    lex.wordAt(tok1).uppercase() == "NOT" &&
    lex.wordAt(tok2).uppercase() == "BETWEEN"
  ) {
    return Some((tok2.posEnd, "NOT BETWEEN"));
  };
  if (
    lex.wordAt(tok1).uppercase() == "NOT" &&
    lex.wordAt(tok2).uppercase() == "IN"
  ) {
    return Some((tok2.posEnd, "NOT IN"));
  };
  if (
    lex.wordAt(tok1).uppercase() == "NOT" &&
    lex.wordAt(tok2).uppercase() == "LIKE"
  ) {
    return Some((tok2.posEnd, "NOT LIKE"));
  };
  token = lex.wordAt(tok1);
  op = token.uppercase();
  Some((pos, op))
}

fun parseExprWithPrio(priority: Int, lex: Lexer, pos: Int): (Int, Expr) {
  (!pos, tok) = lex.next(pos);
  left = if (lex.isEqAt(tok, "(")) {
    (!pos, e) = parseExprWithPrio(100, lex, pos);
    !pos = lex.expect(pos, ")");
    e
  } else if (lex.isEqUpperAt(tok, "TRUE")) {
    VInt(1)
  } else if (lex.isEqUpperAt(tok, "FALSE")) {
    VInt(0)
  } else if (lex.isEqAt(tok, "'")) {
    (!pos, str) = parseString(lex, tok.posBegin);
    VString(str)
  } else if (lex.isEqUpperAt(tok, "x") && lex.isEq(pos, "'")) {
    (!pos, str) = parseString(lex, pos);
    error(pos, "BLOB values are not supported: x'" + str + "'")
  } else if (lex.isEqUpperAt(tok, "NOT")) {
    (!pos, e) = parseExprWithPrio(opPriority["NOT"], lex, pos);
    Not(e)
  } else if (lex.isEqUpperAt(tok, "ALL")) {
    (!pos, e) = parseExprWithPrio(opPriority["ALL"], lex, pos);
    All(e)
  } else if (lex.isEqUpperAt(tok, "DISTINCT")) {
    (!pos, e) = parseExprWithPrio(opPriority["DISTINCT"], lex, pos);
    Distinct(e)
  } else if (lex.isEqUpperAt(tok, "SELECT")) {
    (!pos, select) = parseSelect(lex, pos);
    EQuery(select)
  } else if (lex.isEqUpperAt(tok, "EXISTS")) {
    !pos = lex.expect(pos, "(");
    (!pos, q) = parseQuery(lex, pos);
    !pos = lex.expect(pos, ")");
    Exists(q)
  } else if (lex.isEqUpperAt(tok, "CASE")) {
    condOpt = if (!lex.isEqUpper(pos, "WHEN")) {
      (!pos, cond) = parseExpr(lex, pos);
      Some(cond)
    } else {
      None()
    };
    (!pos, whenCases) = parseWhenCases(lex, pos);
    (!pos, elseCase) = parseElseCase(lex, pos);
    !pos = lex.expectUpper(pos, "END");
    Case(condOpt, whenCases, elseCase)
  } else if (lex.isEqAt(tok, "-")) {
    (!pos, e) = parseExprWithPrio(1, lex, pos);
    UMinus(e)
  } else if (lex.isEqAt(tok, "+")) {
    (!pos, e) = parseExprWithPrio(1, lex, pos);
    UPlus(e)
  } else if (lex.isEqAt(tok, "@")) {
    (!pos, !tok) = lex.next(pos);
    handle = lex.wordAt(tok);
    VParam(handle)
  } else if (lex.wordAt(tok) == ">") {
    invariant_violation("Internal error");
  } else if (lex.wordAt(tok).lowercase() == "null") {
    VNull()
  } else {
    str = lex.wordAt(tok);
    str.toIntOption() match {
    | Some(i) -> VInt(i)
    | None() ->
      str.toFloatOption() match {
      | Some(i) -> VFloat(i)
      | None() -> Identifier(Name::create(str))
      }
    };
  };

  loop {
    posLeft = (pos, left);

    if (isEOF(lex, pos)) {
      return posLeft;
    };

    if (lex.isEq(pos, ".")) {
      !left = left match {
      | Identifier(tableName, _) ->
        !pos = lex.expect(pos, ".");
        (!pos, ctok) = lex.next(pos);
        colName = Name::create(lex.wordAt(ctok));
        Identifier(colName, Some(tableName))
      | _ -> error(pos, "Expected identifier")
      }
    } else if (lex.isEq(pos, "(")) {
      !pos = lex.expect(pos, "(");
      if (lex.isEq(pos, "*")) {
        !pos = lex.expect(pos, "*");
        !pos = lex.expect(pos, ")");
        !left = makeCall(pos, left, None());
      } else if (
        left match {
        | Identifier(x, None()) -> x.lower == "cast"
        | _ -> false
        }
      ) {
        (!pos, e) = parseExpr(lex, pos);
        !pos = lex.expectUpper(pos, "AS");
        (!pos, ty) = parseTypeName(lex, pos);
        !pos = lex.expect(pos, ")");
        !left = Cast(e, ty);
      } else {
        (!pos, params) = parseExprList(lex, pos);
        !left = makeCall(pos, left, Some(params));
      }
    } else {
      opOpt = parseOperator(lex, pos);
      op = opOpt match {
      | None() -> return posLeft
      | Some((newPos, op)) ->
        !pos = newPos;
        if (!opPriority.containsKey(op) || opPriority[op] > priority) {
          return posLeft;
        };
        op
      };
      if (op == "IN") {
        !pos = lex.expect(pos, "(");
        (!pos, el) = parseExprList(lex, pos);
        !left = In(left, el);
      } else if (op == "NOT IN") {
        !pos = lex.expect(pos, "(");
        (!pos, el) = parseExprList(lex, pos);
        !left = Not(In(left, el));
      } else {
        opPriority.maybeGet(op) match {
        | None() -> return posLeft
        | Some(opPrio) ->
          if (opPrio < priority) {
            (!pos, right) = parseExprWithPrio(opPrio, lex, pos);
            if (op == "NOT BETWEEN" || op == "BETWEEN") {
              !pos = lex.expectUpper(pos, "AND");
              (!pos, right2) = parseExprWithPrio(opPrio, lex, pos);
              !right = Binop("AND", right, right2);
            };
            !left = Binop(op, left, right);
          } else {
            return posLeft;
          }
        }
      }
    }
  }
}

fun makeCall(pos: Int, left: Expr, params: ?Array<Expr>): Expr {
  left match {
  | Identifier(fname, None()) -> Call(fname, params)
  | _ -> error(pos, "Unexpected function call")
  }
}

fun parseExprList(lex: Lexer, pos: Int): (Int, Array<Expr>) {
  acc = mutable Vector[];
  loop {
    if (lex.isEq(pos, ")")) {
      !pos = lex.expect(pos, ")");
      return (pos, acc.toArray());
    };
    (!pos, e) = parseExpr(lex, pos);
    acc.push(e);
    if (lex.isEq(pos, ")")) {
      !pos = lex.expect(pos, ")");
      return (pos, acc.toArray());
    };
    !pos = lex.expect(pos, ",");
  }
}

fun parseCreate(lex: Lexer, posBegin: Int, pos: Int): (Int, Stmt) {
  if (lex.isEqUpper(pos, "TABLE")) {
    !pos = lex.expectUpper(pos, "TABLE");
    ifNotExists = false;
    if (lex.isEqUpper(pos, "IF")) {
      !pos = lex.expectUpper(pos, "IF");
      !pos = lex.expectUpper(pos, "NOT");
      !pos = lex.expectUpper(pos, "EXISTS");
      !ifNotExists = true;
    };
    return parseCreateTable(lex, pos, ifNotExists);
  };
  if (lex.isEqUpper(pos, "UNIQUE")) {
    !pos = lex.expectUpper(pos, "UNIQUE");
    !pos = lex.expectUpper(pos, "INDEX");
    ifNotExists = false;
    if (lex.isEqUpper(pos, "IF")) {
      !pos = lex.expectUpper(pos, "IF");
      !pos = lex.expectUpper(pos, "NOT");
      !pos = lex.expectUpper(pos, "EXISTS");
      !ifNotExists = true;
    };
    return parseCreateIndex(lex, posBegin, pos, ifNotExists, true);
  };
  if (lex.isEqUpper(pos, "INDEX")) {
    !pos = lex.expectUpper(pos, "INDEX");
    ifNotExists = false;
    if (lex.isEqUpper(pos, "IF")) {
      !pos = lex.expectUpper(pos, "IF");
      !pos = lex.expectUpper(pos, "NOT");
      !pos = lex.expectUpper(pos, "EXISTS");
      !ifNotExists = true;
    };
    return parseCreateIndex(lex, posBegin, pos, ifNotExists, false);
  };
  if (lex.isEqUpper(pos, "VIRTUAL")) {
    !pos = lex.expectUpper(pos, "VIRTUAL");
    !pos = lex.expectUpper(pos, "VIEW");
    ifNotExists = false;
    if (lex.isEqUpper(pos, "IF")) {
      !pos = lex.expectUpper(pos, "IF");
      !pos = lex.expectUpper(pos, "NOT");
      !pos = lex.expectUpper(pos, "EXISTS");
      !ifNotExists = true;
    };
    return parseView(lex, posBegin, pos, ifNotExists, true);
  };
  if (lex.isEqUpper(pos, "VIEW")) {
    !pos = lex.expectUpper(pos, "VIEW");
    ifNotExists = false;
    if (lex.isEqUpper(pos, "IF")) {
      !pos = lex.expectUpper(pos, "IF");
      !pos = lex.expectUpper(pos, "NOT");
      !pos = lex.expectUpper(pos, "EXISTS");
      !ifNotExists = true;
    };
    return parseView(lex, posBegin, pos, ifNotExists, false);
  };
  error(pos, "Unexpected token");
}

fun parseView(
  lex: Lexer,
  posBegin: Int,
  pos: Int,
  ifNotExists: Bool,
  virtual: Bool,
): (Int, View) {
  (!pos, name) = lex.nextWord(pos);
  if (lex.isEqUpper(pos, "AS")) {
    !pos = lex.expectUpper(pos, "AS");
  };
  !pos = lex.expectUpper(pos, "SELECT");
  (!pos, query) = parseSelect(lex, pos);
  text = lex.content.slice(posBegin, pos);
  (
    pos,
    View{pos, ifNotExists, virtual, name => Name::create(name), query, text},
  )
}

fun parseCreateIndex(
  lex: Lexer,
  posBegin: Int,
  pos: Int,
  ifNotExists: Bool,
  unique: Bool,
): (Int, Index) {
  origPos = pos;
  (!pos, name) = lex.nextWord(pos);
  !pos = lex.expectUpper(pos, "ON");
  (!pos, fields) = parseIndexOn(lex, pos);
  text = Some(lex.content.slice(posBegin, pos));
  (
    pos,
    Index{
      pos => origPos,
      ifNotExists,
      name => Name::create(name),
      fields,
      unique,
      primary => false,
      text,
    },
  )
}

fun parseIndexOn(lex: Lexer, pos: Int): (Int, (Name, Array<(Name, IKind)>)) {
  (!pos, word) = lex.nextWord(pos);
  name = Name::create(word);
  !pos = lex.expect(pos, "(");
  colDescs = mutable Vector[];
  loop {
    (!pos, colNameStr) = lex.nextWord(pos);
    colName = Name::create(colNameStr);
    kind = if (lex.isEqUpper(pos, "DESC")) {
      !pos = lex.expectUpper(pos, "DESC");
      IDESC()
    } else if (lex.isEqUpper(pos, "ASC")) {
      !pos = lex.expectUpper(pos, "ASC");
      IASC()
    } else {
      INONE()
    };
    colDescs.push((colName, kind));
    if (lex.isEq(pos, ",")) {
      !pos = lex.expect(pos, ",");
    } else {
      !pos = lex.expect(pos, ")");
      break void;
    }
  };
  (pos, (name, colDescs.toArray()))
}

fun parseInsert(lex: Lexer, pos: Int): (Int, Stmt) {
  onConflict: ?OnConflict = None();
  if (lex.isEqUpper(pos, "OR")) {
    !pos = lex.expectUpper(pos, "OR");
    !onConflict = Some(
      if (lex.isEqUpper(pos, "IGNORE")) {
        !pos = lex.expectUpper(pos, "IGNORE");
        OCIgnore()
      } else {
        !pos = lex.expectUpper(pos, "REPLACE");
        OCReplace()
      },
    );
  };
  !pos = lex.expectUpper(pos, "INTO");
  posName = lex.token(pos).posBegin;
  (!pos, word) = lex.nextWord(pos);
  name = Name::create(word);
  (!pos, paramsOpt) = parseParamsOpt(lex, pos);
  (!pos, values) = parseValues(lex, pos);
  if (lex.isEqUpper(pos, "ON")) {
    !pos = lex.expectUpper(pos, "ON");
    !pos = lex.expectUpper(pos, "CONFLICT");
    !pos = lex.expect(pos, "(");
    (!pos, _) = lex.nextWord(pos);
    !pos = lex.expect(pos, ")");
    !pos = lex.expectUpper(pos, "DO");
    if (onConflict is Some _) {
      error(pos, "Already have an ON CONFLICT rule");
    };
    if (!lex.isEqUpper(pos, "UPDATE")) {
      error(pos, "Only UPDATE supported after ON CONFLICT");
    };
    !pos = lex.expectUpper(pos, "UPDATE");
    posBegin = pos;
    (!pos, update) = parseUpdateWithName(lex, posBegin, pos, name);
    !onConflict = Some(OCUpdate(update));
  };
  (pos, Insert{pos => posName, onConflict, name, paramsOpt, values})
}

fun parseParamsOpt(lex: Lexer, pos: Int): (Int, ?Array<Name>) {
  if (lex.isEq(pos, "(")) {
    !pos = lex.expect(pos, "(");
    names = mutable Vector[];
    loop {
      (!pos, word) = lex.nextWord(pos);
      name = Name::create(word);
      names.push(name);
      if (lex.isEq(pos, ")")) {
        !pos = lex.expect(pos, ")");
        break void;
      };
      !pos = lex.expect(pos, ",");
    };
    (pos, Some(names.toArray()))
  } else {
    (pos, None())
  }
}

fun parseValues(lex: Lexer, pos: Int): (Int, InsertValues) {
  if (lex.isEqUpper(pos, "SELECT")) {
    !pos = lex.expectUpper(pos, "SELECT");
    (!pos, select) = parseSelect(lex, pos);
    return (pos, IQuery(select));
  };
  !pos = lex.expectUpper(pos, "VALUES");
  parseMultipleValues(lex, pos);
}

fun parseMultipleValues(lex: Lexer, pos: Int): (Int, InsertValues) {
  result = mutable Vector[];
  values = mutable Vector[];
  !pos = lex.expect(pos, "(");
  loop {
    (!pos, value) = parseValue(lex, pos);
    values.push(value);
    if (lex.isEq(pos, ")")) {
      result.push(values.toArray());
      values.clear();
      !pos = lex.expect(pos, ")");
      if (lex.isEq(pos, ",")) {
        !pos = lex.expect(pos, ",");
        !pos = lex.expect(pos, "(");
        continue
      } else {
        break void
      };
    };
    !pos = lex.expect(pos, ",");
  };
  (pos, IValues(result.toArray()))
}

fun parseCSVValue(kv: (Bool, String)): Value {
  (isStr, str) = kv;
  if (isStr) return VString(str);
  if (str == "") return VNull();
  str.toIntOption() match {
  | None() ->
    str.toFloatOption() match {
    | None() -> VString(str)
    | Some(f) -> VFloat(f)
    }
  | Some(x) -> VInt(x)
  }
}

fun parseString(lex: Lexer, pos: Int): (Int, String) {
  posBegin = pos;
  slices = mutable Vector[];
  while (pos < lex.content.size() && lex.content[pos] == '\'') {
    !pos = pos + 1;
    while (pos < lex.content.size() && lex.content[pos] != '\'') {
      !pos = pos + 1;
    };
    slices.push(pos);
    !pos = pos + 1;
  };
  if (pos >= lex.content.size()) {
    error(posBegin, "Unterminated string");
  };
  idx = posBegin + 1;
  strings = mutable Vector[];
  for (i in Range(0, slices.size())) {
    nextIdx = slices[i];
    strings.push(lex.content.slice(idx, nextIdx));
    !idx = nextIdx + 1;
  };
  (pos, concatArray(strings.toArray()))
}

fun makeFloat(
  chars1: readonly Vector<Char>,
  chars2: readonly Vector<Char>,
): Float {
  result = 0.0;
  pow = 1.0;
  for (i in Range(0, chars1.size())) {
    !result =
      result +
      (chars1[chars1.size() - 1 - i].code() - '0'.code()).toFloat() * pow;
    !pow = pow * 10.0;
  };
  !pow = 0.1;
  for (i in Range(0, chars2.size())) {
    !result = result + (chars2[i].code() - '0'.code()).toFloat() * pow;
    !pow = pow / 10.0;
  };
  result
}

fun parseValue(lex: Lexer, pos: Int): (Int, Value) {
  (!pos, tok) = lex.next(pos);

  if (lex.isEqUpperAt(tok, "NULL")) {
    return (tok.posEnd, VNull());
  };

  if (lex.isEqUpperAt(tok, "TRUE")) {
    return (tok.posEnd, VInt(1));
  };

  if (lex.isEqUpperAt(tok, "FALSE")) {
    return (tok.posEnd, VInt(0));
  };

  if (lex.isEqUpperAt(tok, "ID")) {
    !pos = lex.expect(pos, "(");
    (!pos, !tok) = lex.next(pos);
    if (lex.content[tok.posBegin] == ')') {
      return (pos, VId(true, None()));
    };
    if (lex.content[tok.posBegin] != '\'') {
      error(pos, "id expects a string literal");
    };
    (!pos, str) = parseString(lex, tok.posBegin);
    !pos = lex.expect(pos, ")");
    return (pos, VId(true, Some(str)));
  };

  if (lex.isEqUpperAt(tok, "TIME")) {
    !pos = lex.expect(pos, "(");
    !pos = lex.expect(pos, ")");
    return (pos, VTime());
  };

  if (lex.content[tok.posBegin] == '\'') {
    (!pos, str) = parseString(lex, tok.posBegin);
    return (pos, VString(str));
  };

  if (lex.content[tok.posBegin] == '-') {
    (!pos, !tok) = lex.next(pos);
    if (Chars.isDigit(lex.content[tok.posBegin])) {
      (_, kind) = lex.tokenAndKind(tok.posBegin);
      kind match {
      | TKInt() -> return (pos, VInt(-lex.wordAt(tok).toInt()))
      | TKFloat() -> return (pos, VFloat(-lex.wordAt(tok).toFloat()))
      | TKWord() -> invariant_violation("Internal error")
      };
    };

    if (lex.isEqUpperAt(tok, "ID")) {
      !pos = lex.expect(pos, "(");
      (!pos, !tok) = lex.next(pos);
      if (lex.content[tok.posBegin] == ')') {
        return (pos, VId(false, None()));
      };
      if (lex.content[tok.posBegin] != '\'') {
        error(pos, "id expects a string literal");
      };
      (!pos, str) = parseString(lex, tok.posBegin);
      !pos = lex.expect(pos, ")");
      return (pos, VId(false, Some(str)));
    };
  };

  if (Chars.isDigit(lex.content[tok.posBegin])) {
    (_, kind) = lex.tokenAndKind(tok.posBegin);
    kind match {
    | TKInt() -> return (pos, VInt(lex.wordAt(tok).toInt()))
    | TKFloat() -> return (pos, VFloat(lex.wordAt(tok).toFloat()))
    | TKWord() -> invariant_violation("Internal error")
    };
  };

  if (lex.content[tok.posBegin] == '@') {
    (!pos, !tok) = lex.next(pos);
    handle = lex.wordAt(tok);
    return (pos, VParam(handle));
  };

  error(pos, "Invalid value")
}

fun parseCreateTable(lex: Lexer, pos: Int, ifNotExists: Bool): (Int, Table) {
  (!pos, name) = lex.nextWord(pos);
  (!pos, schema) = parseTableSchema(lex, pos);
  (pos, Table{pos, name => Name::create(name), schema, ifNotExists})
}

fun parseTableSchema(lex: Lexer, pos: Int): (Int, Array<TypeDescr>) {
  !pos = lex.expect(pos, "(");
  schema = mutable Vector[];
  loop {
    if (lex.isEqUpper(pos, "FOREIGN")) {
      !pos = lex.expectUpper(pos, "FOREIGN");
      while (!lex.isEq(pos, ",") && !(lex.isEq(pos, ")"))) {
        if (lex.isEq(pos, "(")) {
          count = 1;
          loop {
            (!pos, _) = lex.next(pos);
            if (lex.isEq(pos, "(")) !count = count + 1;
            if (lex.isEq(pos, ")")) !count = count - 1;
            if (count == 0) break void;
          }
        };
        (!pos, _) = lex.next(pos);
      }
    } else if (lex.isEqUpper(pos, "PRIMARY")) {
      !pos = lex.expectUpper(pos, "PRIMARY");
      while (!lex.isEq(pos, ",") && !(lex.isEq(pos, ")"))) {
        if (lex.isEq(pos, "(")) {
          count = 1;
          loop {
            (!pos, _) = lex.next(pos);
            if (lex.isEq(pos, "(")) !count = count + 1;
            if (lex.isEq(pos, ")")) !count = count - 1;
            if (count == 0) break void;
          }
        };
        (!pos, _) = lex.next(pos);
      }
    } else {
      (!pos, name) = lex.nextWord(pos);
      (!pos, ty, primary, unique, default, notNull) = parseType(lex, pos);
      schema.push(
        TypeDescr{
          name => Name::create(name),
          ty,
          primary,
          unique,
          default,
          notNull,
        },
      );
    };
    if (lex.isEq(pos, ")")) {
      !pos = lex.expect(pos, ")");
      break void;
    };
    !pos = lex.expect(pos, ",");
  };
  (pos, schema.toArray())
}

fun parseTypeName(lex: Lexer, pos: Int): (Int, Type) {
  !pos = lex.skipSpaces(pos);
  if (lex.isEqUpper(pos, "FLOAT")) {
    !pos = lex.expectUpper(pos, "FLOAT");
    (pos, FLOAT())
  } else if (lex.isEqUpper(pos, "DOUBLE")) {
    !pos = lex.expectUpper(pos, "DOUBLE");
    (pos, FLOAT())
  } else if (lex.isEqUpper(pos, "REAL")) {
    !pos = lex.expectUpper(pos, "REAL");
    (pos, FLOAT())
  } else if (lex.isEqUpper(pos, "INTEGER")) {
    !pos = lex.expectUpper(pos, "INTEGER");
    (pos, INTEGER())
  } else if (lex.isEqUpper(pos, "BOOLEAN")) {
    !pos = lex.expectUpper(pos, "BOOLEAN");
    (pos, INTEGER())
  } else if (lex.isEqUpper(pos, "TEXT")) {
    !pos = lex.expectUpper(pos, "TEXT");
    (pos, TEXT())
  } else if (lex.isEqUpper(pos, "STRING")) {
    !pos = lex.expectUpper(pos, "STRING");
    (pos, TEXT())
  } else if (lex.isEqUpper(pos, "VARCHAR")) {
    !pos = lex.expectUpper(pos, "VARCHAR");
    !pos = lex.expect(pos, "(");
    (!pos, _) = lex.nextInt(pos);
    !pos = lex.expect(pos, ")");
    (pos, TEXT())
  } else {
    error(pos, "Unknown type");
  }
}

fun parseType(lex: Lexer, pos: Int): (Int, Type, Bool, Bool, ?Value, Bool) {
  (!pos, ty) = parseTypeName(lex, pos);
  (!pos, isPrimaryKey, isUnique, default, isNotNull) = parseTypeRest(lex, pos);
  if (!isNotNull && !isPrimaryKey && !isUnique && default is None()) {
    !default = Some(VNull())
  };
  (pos, ty, isPrimaryKey, isUnique, default, isNotNull)
}

fun parseTypeRest(lex: Lexer, pos: Int): (Int, Bool, Bool, ?Value, Bool) {
  isPrimaryKey = false;
  isUnique = false;
  default: ?Value = None();
  isNotNull = false;

  while (!isEOF(lex, pos)) {
    shouldContinue = false;
    if (lex.isEqUpper(pos, "PRIMARY")) {
      !pos = lex.expectUpper(pos, "PRIMARY");
      !pos = lex.expectUpper(pos, "KEY");
      if (isPrimaryKey) error(pos, "PRIMARY already set");
      !shouldContinue = true;
      !isPrimaryKey = true;
    };
    if (lex.isEqUpper(pos, "UNIQUE")) {
      !pos = lex.expectUpper(pos, "UNIQUE");
      if (isUnique) error(pos, "UNIQUE already set");
      !shouldContinue = true;
      !isUnique = true;
    };
    if (lex.isEqUpper(pos, "DEFAULT")) {
      !pos = lex.expectUpper(pos, "DEFAULT");
      if (default is Some _) error(pos, "DEFAULT already set");
      !shouldContinue = true;
      (!pos, e) = parseValue(lex, pos);
      e match {
      | VNull _
      | VInt _
      | VFloat _
      | VString _ ->
        void
      | VId _
      | VTime _
      | VParam _ ->
        error(pos, "Invalid expression for default value")
      };
      !default = Some(e);
    };
    if (lex.isEqUpper(pos, "NOT")) {
      !pos = lex.expectUpper(pos, "NOT");
      !pos = lex.expectUpper(pos, "NULL");
      if (isNotNull) error(pos, "NOT NULL already set");
      !shouldContinue = true;
      !isNotNull = true;
    };
    if (shouldContinue) continue;
    break void
  };
  (pos, isPrimaryKey, isUnique, default, isNotNull)
}
