module alias T = SKTest;

module SKStoreTest;

const tableStr: String = "CREATE TABLE t1(a INTEGER, b INTEGER);";

fun evalStmt(
  context: mutable SKStore.Context,
  params: Map<String, SKDB.Value>,
  evaluator: SKDB.Evaluator,
  str: String,
): void {
  lex = SKDB.Lexer(0, SKDB.Buffer(str));
  (_, stmtAst) = SKDB.parseStmt(lex, 0);
  _ = evaluator.stmt(context, params, stmtAst.fromSome(), false)
}

fun testSql(): mutable SKStore.Context {
  SKStore.run(context ~> {
    context.!debugMode = false;
    params: Map<String, SKDB.Value> = Map[];
    options = SKDB.Options{
      backtrace => false,
      alwaysAllowJoins => false,
      sync => false,
      showUsedIndexes => false,
    };
    evaluator = SKDB.Evaluator{options, user => None()};
    _table = evalStmt(context, params, evaluator, tableStr);
    T.expectThrow(
      () -> {
        evalStmt(
          context,
          params,
          evaluator,
          "INSERT INTO tdumb(e,c) VALUES(103,102)",
        );
      },
      "INSERT in non-existent table",
    );
    T.expectThrow(
      () -> {
        evalStmt(
          context,
          params,
          evaluator,
          "INSERT INTO t1(e) VALUES(103,102)",
        );
      },
      "INSERT params/values size mismatch",
    );
    T.expectThrow(
      () -> {
        evalStmt(context, params, evaluator, "INSERT INTO t1(e) VALUES(103)");
      },
      "INSERT schema/values size mismatch",
    );
    T.expectThrow(
      () -> {
        evalStmt(
          context,
          params,
          evaluator,
          "INSERT INTO t1(b,a) VALUES(103,102)",
        );
      },
      "INSERT success",
    )
  });
}

module end;
