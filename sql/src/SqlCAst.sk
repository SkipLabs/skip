/*****************************************************************************/
/* The compiled abstract syntax tree. */
/*****************************************************************************/
module alias P = SQLParser;

module SKDB;

value class Pattern{
  firstIsPercent: Bool,
  lastIsPercent: Bool,
  subs: Array<Array<Char>>,
} uses Orderable, Hashable

base class AggrKind uses Orderable {
  children =
  | Noop()
  | Sum(Bool)
  | Count(Bool)
  | Min()
  | Max()
}

base class CValue uses Orderable, Show {
  children =
  | CInt(value: Int)
  | CFloat(value: Float)
  | CString(value: String)

  fun getInt(): ?Int
  | CInt(n) -> Some(n)
  | _ -> None()

  fun +(y: CValue): CValue {
    (this, y) match {
    | (CInt(n1), CInt(n2)) -> CInt(n1 + n2)
    | (CFloat(f1), CFloat(f2)) -> CFloat(f1 + f2)
    | _ -> invariant_violation("Invalid type")
    }
  }

  fun -(y: CValue): CValue {
    (this, y) match {
    | (CInt(n1), CInt(n2)) -> CInt(n1 - n2)
    | (CFloat(f1), CFloat(f2)) -> CFloat(f1 - f2)
    | _ -> invariant_violation("Invalid type")
    }
  }

  fun *(y: Int): CValue {
    this match {
    | CInt(n) -> CInt(n * y)
    | CFloat(f) -> CFloat(f * y.toFloat())
    | _ -> invariant_violation("Invalid type")
    }
  }

  fun toString(): String {
    this match {
    | CInt(n) -> n.toString()
    | CFloat(f) -> inspect(f).toString()
    | CString(str) -> str
    }
  }

  fun toStringWithFormat(format: SKStore.OutputFormat): String {
    this match {
    | CInt(n) -> n.toString()
    | CFloat(f) -> floatToString(f)
    | CString(str) if (format.usesDoubleQuotes()) ->
      result = mutable Vector['"'];
      for (c in str) {
        if (c == '"') {
          format match {
          | SKStore.OJSON _ -> result.push('\\')
          | SKStore.OSQL _ -> void
          | SKStore.OTable _
          | SKStore.OCSV _ ->
            result.push(c)
          | SKStore.OJS _ ->
            invariant_violation(
              "Internal error: JS direct mode should never be pretty-printed",
            )
          }
        };
        result.push(c);
      };
      result.push('"');
      String::fromChars(result.toArray())
    | CString(str) -> str
    }
  }

  fun max(): CValue
  | CInt(_) -> CInt(Int::max)
  | CFloat(_) -> CFloat(Float::inf)
  | CString(_) -> CString(largestString())

  fun min(): CValue
  | CInt(_) -> CInt(Int::min)
  | CFloat(_) -> CFloat(-Float::inf)
  | CString(_) -> CString("")
}

base class CGroupByElt uses Orderable {
  children =
  | CGBExpr(CGExpr, P.Type)
  | CGBCol(Int, P.Type)
}

base class SubSelectTask uses Orderable {
  children =
  | SubSelect(CSelect)
  | SubMerge{
    leftDirName: SKStore.DirName,
    leftColNbr: Int,
    leftIsUnique: Bool,
    leftRanges: ?Array<SKStore.KeyRange>,
    rightDirName: SKStore.DirName,
    rightColNbr: Int,
    rightIsUnique: Bool,
    rightRanges: ?Array<SKStore.KeyRange>,
    childName: SKStore.DirName,
    kinds: Array<(Int, P.IKind, P.Type)>,
    joinKind: P.JoinKind,
    onlyLeftValues: Bool = false,
  }
}

class CSelect{
  isNoop: Bool = false,
  id: P.Name,
  distinct: Bool,
  params: Array<CGExpr>,
  sets: Array<(Int, CGExpr)>,
  aggr: ?Array<(AggrKind, CGExpr)>,
  kinds: Array<(Int, P.IKind, P.Type)>,
  from: Array<(DirDescr, ?Array<SKStore.KeyRange>)>,
  where: ?CExpr<Int>,
  groupBy: ?Array<CGroupByElt>,
  having: ?CExpr<Int>,
  orderBy: ?Array<(Int, P.IKind)>,
  limit: ?CExpr<Int>,
  rest: List<(QueryKind, CSelect)>,
  needUp: Bool,
  directMode: Bool,
  format: SKStore.OutputFormat,
  other: Array<SubSelectTask>,
} extends SKStore.File uses Orderable

class CJoin{
  kind: P.JoinKind,
  names: Array<P.SelectSource>,
  on: ?Array<(CGExpr, ?String)>,
}

base class CGExpr uses Orderable, Hashable {
  children =
  | CGNull()
  | CIExpr(CExpr<Int>)
  | CSExpr(CExpr<String>)
  | CFExpr(CExpr<Float>)

  fun up(): CGExpr {
    this match {
    | CGNull() -> CGNull()
    | CIExpr(ce) -> CIExpr(CUp(ce))
    | CSExpr(ce) -> CSExpr(CUp(ce))
    | CFExpr(ce) -> CFExpr(CUp(ce))
    }
  }

  fun getType(): P.Type {
    this match {
    | CGNull _
    | CIExpr _ ->
      P.INTEGER()
    | CFExpr _ -> P.FLOAT()
    | CSExpr _ -> P.TEXT()
    }
  }
}

@cpp_extern("SKIP_largest_string")
native fun largestString(): String;

base class CExpr<Value: frozen> uses Orderable, Hashable
class CNull<T: frozen>() extends CExpr<T>
class CISize(Int) extends CExpr<Int>

class CFICast(CExpr<Int>) extends CExpr<Float>
class CIFCast(CExpr<Float>) extends CExpr<Int>
class CISCast(CExpr<String>) extends CExpr<Int>
class CSICast(CExpr<Int>) extends CExpr<String>
class CSFCast(CExpr<Float>) extends CExpr<String>
class CFSCast(CExpr<String>) extends CExpr<Float>

class CIGetFrom(Int, Int) extends CExpr<Int>
class CSGetFrom(Int, Int) extends CExpr<String>
class CFGetFrom(Int, Int) extends CExpr<Float>

class CILiteral(Int) extends CExpr<Int>
class CFLiteral(Float) extends CExpr<Float>
class CSLiteral(String) extends CExpr<String>
class CNot(CExpr<Int>) extends CExpr<Int>

class CILte(CExpr<Int>, CExpr<Int>) extends CExpr<Int>
class CILt(CExpr<Int>, CExpr<Int>) extends CExpr<Int>
class CIGte(CExpr<Int>, CExpr<Int>) extends CExpr<Int>
class CIGt(CExpr<Int>, CExpr<Int>) extends CExpr<Int>
class CIEq(CExpr<Int>, CExpr<Int>) extends CExpr<Int>
class CIDiff(CExpr<Int>, CExpr<Int>) extends CExpr<Int>
class CIBetween(CExpr<Int>, CExpr<Int>, CExpr<Int>) extends CExpr<Int>
class CINotBetween(CExpr<Int>, CExpr<Int>, CExpr<Int>) extends CExpr<Int>

class CFLte(CExpr<Float>, CExpr<Float>) extends CExpr<Int>
class CFLt(CExpr<Float>, CExpr<Float>) extends CExpr<Int>
class CFGte(CExpr<Float>, CExpr<Float>) extends CExpr<Int>
class CFGt(CExpr<Float>, CExpr<Float>) extends CExpr<Int>
class CFEq(CExpr<Float>, CExpr<Float>) extends CExpr<Int>
class CFDiff(CExpr<Float>, CExpr<Float>) extends CExpr<Int>
class CFBetween(CExpr<Float>, CExpr<Float>, CExpr<Float>) extends CExpr<Int>
class CFNotBetween(CExpr<Float>, CExpr<Float>, CExpr<Float>) extends CExpr<Int>

class CSLte(CExpr<String>, CExpr<String>) extends CExpr<Int>
class CSLt(CExpr<String>, CExpr<String>) extends CExpr<Int>
class CSGte(CExpr<String>, CExpr<String>) extends CExpr<Int>
class CSGt(CExpr<String>, CExpr<String>) extends CExpr<Int>
class CSEq(CExpr<String>, CExpr<String>) extends CExpr<Int>
class CSDiff(CExpr<String>, CExpr<String>) extends CExpr<Int>
class CSBetween(CExpr<String>, CExpr<String>, CExpr<String>) extends CExpr<Int>
class CSNotBetween(
  CExpr<String>,
  CExpr<String>,
  CExpr<String>,
) extends CExpr<Int>
class CSLike(CExpr<String>, Pattern) extends CExpr<Int>

class CAdd<T: frozen>(CExpr<T>, CExpr<T>) extends CExpr<T>
class CSub<T: frozen>(CExpr<T>, CExpr<T>) extends CExpr<T>
class CMul<T: frozen>(CExpr<T>, CExpr<T>) extends CExpr<T>
class CDiv<T: frozen>(CExpr<T>, CExpr<T>) extends CExpr<T>
class CMod<T: frozen>(CExpr<T>, CExpr<T>) extends CExpr<T>

class CIf<T: frozen>(CExpr<Int>, CExpr<T>, CExpr<T>) extends CExpr<T>

class CIIn(CExpr<Int>, Array<CExpr<Int>>) extends CExpr<Int>
class CFIn(CExpr<Float>, Array<CExpr<Float>>) extends CExpr<Int>
class CSIn(CExpr<String>, Array<CExpr<String>>) extends CExpr<Int>

class CExists(cselect: CSelect) extends CExpr<Int> {
  fun hash(): Int {
    this.cselect.id.hash()
  }
}
class CIQuery(cselect: CSelect) extends CExpr<Int> {
  fun hash(): Int {
    this.cselect.id.hash()
  }
}
class CFQuery(cselect: CSelect) extends CExpr<Float> {
  fun hash(): Int {
    this.cselect.id.hash()
  }
}
class CSQuery(cselect: CSelect) extends CExpr<String> {
  fun hash(): Int {
    this.cselect.id.hash()
  }
}

class CIAbs(CExpr<Int>) extends CExpr<Int>
class CFAbs(CExpr<Float>) extends CExpr<Float>
class COr(CExpr<Int>, CExpr<Int>) extends CExpr<Int>
class CAnd(CExpr<Int>, CExpr<Int>) extends CExpr<Int>

class CUp<T: frozen>(CExpr<T>) extends CExpr<T>
class CCoalesce<T: frozen>(Array<CExpr<T>>) extends CExpr<T>
class CIIsNull(CExpr<Int>) extends CExpr<Int>
class CFIsNull(CExpr<Float>) extends CExpr<Int>
class CSIsNull(CExpr<String>) extends CExpr<Int>
class CSConcat(CExpr<String>, CExpr<String>) extends CExpr<String>
class CSUpper(CExpr<String>) extends CExpr<String>
class CSLower(CExpr<String>) extends CExpr<String>

class CNullIf<T: frozen>(CExpr<T>, CExpr<T>) extends CExpr<T>
class CStrftime(
  CExpr<String>,
  CExpr<String>,
  Array<CExpr<String>>,
) extends CExpr<String>

class COn(P.JoinKind, CExpr<Int>) extends CExpr<Int>

module end;
