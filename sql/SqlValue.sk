module SKFS;

extension base class BaseName {
  overridable fun compare(y: BaseName): Order {
    (this, y) match {
    | (SKFS.DirTag(), SKFS.DirTag()) -> EQ()
    | (SKFS.DirTag(), _) -> LT()
    | (_, SKFS.DirTag()) -> GT()

    | (SKFS.FilesTag(), SKFS.FilesTag()) -> EQ()
    | (SKFS.FilesTag(), _) -> LT()
    | (_, SKFS.FilesTag()) -> GT()

    | (SKFS.SizeTag(), SKFS.SizeTag()) -> EQ()
    | (SKFS.SizeTag(), _) -> LT()
    | (_, SKFS.SizeTag()) -> GT()

    | (SKFS.IsEmptyTag(), SKFS.IsEmptyTag()) -> EQ()
    | (SKFS.IsEmptyTag(), _) -> LT()
    | (_, SKFS.IsEmptyTag()) -> GT()

    | (dir1 @ SKFS.DirName _, SKFS.DirName _) -> dir1.compare(y)
    | (SKFS.DirName _, _) -> LT()
    | (_, SKFS.DirName _) -> GT()

    | (SKFS.IID(n1), SKFS.IID(n2)) -> n1.compare(n2)
    | (SKFS.IID(_), _) -> LT()
    | (_, SKFS.IID(_)) -> GT()

    | (SKFS.SID(n1), SKFS.SID(n2)) -> n1.compare(n2)
    | (SKFS.SID(_), _) -> LT()
    | (_, SKFS.SID(_)) -> GT()

    | (SKSQL.ProjKey(k1, n1, v1), SKSQL.ProjKey(k2, n2, v2)) ->
      ((k1, n1, v1)).compare((k2, n2, v2))
    | (SKSQL.ProjKey _, _) -> LT()
    | (_, SKSQL.ProjKey _) -> GT()

    | (SKSQL.RowKey(row1, kinds), SKSQL.RowKey(row2, _)) ->
      SKSQL.compareRows(kinds, row1, row2)

    | (
      SKSQL.TrackedQuery(q1, start1, end1),
      SKSQL.TrackedQuery(q2, start2, end2),
    ) ->
      (q1, start1, end1).compare((q2, start2, end2))
    | (SKSQL.TrackedQuery _, _) -> LT()
    | (_, SKSQL.TrackedQuery _) -> GT()

    | (SKSQL.CValueFile(x1), SKSQL.CValueFile(x2)) -> x1.compare(x2)
    | (SKSQL.CValueFile _, _) -> LT()
    | (_, SKSQL.CValueFile _) -> GT()
    }
  }
}

module end;

module SKSQL;

fun compareRows(
  kinds: Array<(Int, IKind, Type)>,
  x: RowValues,
  y: RowValues,
): Order {
  xsize = x.size();
  ysize = y.size();
  for (i in Range(0, kinds.size())) {
    if (i >= xsize) return LT();
    if (i >= ysize) return GT();
    (idx, direction, _ty) = kinds[i];
    value1 = x.getValue(idx);
    value2 = y.getValue(idx);
    (value1, value2) match {
    | (None(), None()) -> continue
    | (None(), _) ->
      return direction match {
      | IDESC() -> GT()
      | _ -> LT()
      }
    | (_, None()) ->
      return direction match {
      | IDESC() -> LT()
      | _ -> GT()
      }
    | (Some(v1), Some(v2)) ->
      cmp = direction match {
      | INONE()
      | IASC() ->
        v1.compare(v2)
      | IDESC() -> v2.compare(v1)
      };
      if (cmp != EQ()) return cmp
    }
  };
  EQ()
}

class RowKey(
  row: RowValues,
  kinds: Array<(Int, IKind, Type)>,
) extends SKFS.BaseName {
  static fun create(row: RowValues, kinds: Array<(Int, IKind, Type)>): this {
    static(row, kinds)
  }

  fun toString(): String {
    inspect(this).toString();
  }

  fun toKVStringRemove(format: SKFS.OutputFormat): String {
    this.row.setRepeat(0).toKVString(format, this)
  }
}

base class Row extends SKFS.File {
  fun size(): Int;
  fun getInt(n: Int): ?Int;
  fun getFloat(n: Int): ?Float;
  fun getString(n: Int): ?String;
  fun getValue(n: Int): ?CValue;
  fun items(): mutable Iterator<(Int, ?CValue)>;
  static overridable fun fromFile(f: SKFS.File): Row {
    f match {
    | r @ RowValues _ -> r
    | r @ RowKind _ -> r
    | _ -> invariant_violation("Unexpected Row File")
    }
  }
  fun toString(): String {
    buffer = mutable Vector[];
    o = x -> buffer.push(x);
    o("(");
    for (i => cvalue in this) {
      cvalue match {
      | None() -> o("NULL")
      | Some(CInt(n)) -> o(n.toString())
      | Some(CFloat(f)) -> o(f.toString())
      | Some(CString(s)) ->
        o("'");
        chars = mutable Vector[];
        for (c in s) {
          if (c == '\'') chars.push(c);
          chars.push(c);
        };
        o(String::fromChars(chars.toArray()));
        o("'")
      };
      if (i != this.size() - 1) {
        o(",")
      }
    };
    o(")");
    concatArray(buffer.toArray())
  }
}

class RowValues private (
  values: Array<?CValue>,
  repeat: Int,
) extends Row uses Orderable {
  static fun create(values: Array<?CValue>, repeat: Int = 1): this {
    invariant(repeat >= 1);
    static(values, repeat)
  }

  fun setRepeat(repeat: Int): this {
    invariant(repeat >= 0);
    !this.repeat = repeat;
    this
  }

  fun getRepeat(): Int {
    this.repeat
  }

  fun size(): Int {
    this.values.size()
  }

  fun toStringSingle(format: SKFS.OutputFormat): String {
    values = this.values;
    size = values.size();
    if (!(format is SKFS.OJSON _) && size == 1) {
      values[0] match {
      | None() -> return ""
      | Some(v) -> return v.toStringWithFormat(format)
      }
    };
    result = mutable Vector[];
    if (format is SKFS.OJSON _) {
      result.push("{");
    };
    for (i in Range(0, size - 1)) {
      format match {
      | SKFS.OJSON(fieldNames) -> result.push("\"" + fieldNames[i] + "\":")
      | _ -> void
      };
      values[i] match {
      | None() -> if (format is SKFS.OJSON _) result.push("null") else void
      | Some(v) -> result.push(v.toStringWithFormat(format))
      };
      result.push(if (format.usesComma()) "," else "|");
    };
    format match {
    | SKFS.OJSON(fieldNames) -> result.push("\"" + fieldNames[size - 1] + "\":")
    | _ -> void
    };
    values[size - 1] match {
    | None() -> if (format is SKFS.OJSON _) result.push("null") else void
    | Some(v) -> result.push(v.toStringWithFormat(format))
    };
    if (format is SKFS.OJSON _) {
      result.push("}");
    };
    Array.concatStringSequence(result)
  }

  fun toKVString(format: SKFS.OutputFormat, _key: SKFS.BaseName): String {
    this.repeat.toString() + "\t" + this.toStringSingle(format) + "\n"
  }

  fun toKVStringRemove(format: SKFS.OutputFormat, _key: SKFS.BaseName): String {
    0.toString() + "\t" + this.toStringSingle(format) + "\n"
  }

  fun getInt(n: Int): ?Int {
    this.values[n] match {
    | Some(CInt(v)) -> Some(v)
    | _ -> None()
    }
  }

  fun getFloat(n: Int): ?Float {
    this.values[n] match {
    | Some(CFloat(v)) -> Some(v)
    | _ -> None()
    }
  }

  fun getString(n: Int): ?String {
    this.values[n] match {
    | Some(CString(v)) -> Some(v)
    | _ -> None()
    }
  }

  fun getValue(n: Int): ?CValue {
    this.values[n]
  }

  fun items(): mutable Iterator<(Int, ?CValue)> {
    this.values.items()
  }

  static fun fromFile(f: SKFS.File): RowValues {
    f match {
    | r @ RowValues _ -> r
    | _ -> invariant_violation("Unexpected Row File")
    }
  }
}

class RowKind(order: Int, kind: QueryKind, row: Row) extends Row {
  fun size(): Int {
    this.row.size()
  }
  fun getInt(n: Int): ?Int {
    this.row.getInt(n)
  }
  fun getFloat(n: Int): ?Float {
    this.row.getFloat(n)
  }
  fun getString(n: Int): ?String {
    this.row.getString(n)
  }
  fun getValue(n: Int): ?CValue {
    this.row.getValue(n)
  }
  fun items(): mutable Iterator<(Int, ?CValue)> {
    this.row.items()
  }
  static fun fromFile(f: SKFS.File): RowKind {
    f match {
    | r @ RowKind _ -> r
    | _ -> invariant_violation("Unexpected Row File")
    }
  }
}
