/*****************************************************************************/
/* Flattens the type structure into a set of paths associated to value. */
/*****************************************************************************/

module SKJSON;

base class PrimType() uses Show {
  children =
  | PTInt()
  | PTBool()
  | PTFloat()
  | PTString()
  | PTEmptyArray()
  | PTEmptyObject()

  fun toString(): String
  | PTInt() -> "int"
  | PTBool() -> "bool"
  | PTFloat() -> "float"
  | PTString() -> "string"
  | PTEmptyArray() -> "array"
  | PTEmptyObject() -> "object"
}

fun flatten(
  iter: mutable Iterator<(String, CJSON)>,
): mutable Iterator<(String, String, ?PrimType, ?Int, ?Float, ?String)> {
  for (row in iter) {
    (id, json) = row;
    for (elt in flattenHelper(id, List[], "", json)) {
      yield elt
    }
  }
}

fun mkPath(path: List<PathElement>): String {
  pathToString(path.reversed())
}

fun flattenHelper(
  id: String,
  path: List<PathElement>,
  pathStr: String,
  json: CJSON,
): mutable Iterator<(String, String, ?PrimType, ?Int, ?Float, ?String)> {
  json match {
  | CJNull() -> yield (id, pathStr, None(), None(), None(), None())
  | CJBool(true) -> yield (id, pathStr, Some(PTBool()), Some(1), None(), None())
  | CJBool(false) ->
    yield (id, pathStr, Some(PTBool()), Some(0), None(), None())
  | CJInt(i) -> yield (id, pathStr, Some(PTInt()), Some(i), None(), None())
  | CJFloat(f) -> yield (id, pathStr, Some(PTFloat()), None(), Some(f), None())
  | CJString(s) ->
    yield (id, pathStr, Some(PTString()), None(), None(), Some(s))
  | CJArray(arr) if (arr.isEmpty()) ->
    yield (id, pathStr, Some(PTEmptyArray()), None(), None(), None())
  | CJArray(arr) ->
    for (i => v in arr) {
      newPath = List.Cons(PEIndex(i), path);
      newPathStr = mkPath(newPath);
      for (elt in flattenHelper(id, newPath, newPathStr, v)) {
        yield elt
      }
    }
  | CJObject(fields) if (fields.isEmpty()) ->
    yield (id, pathStr, Some(PTEmptyObject()), None(), None(), None())
  | CJObject(fields) ->
    sortedFields = fields.items().collect(Array).sortedBy(x ~> x.i0);
    for (kv in sortedFields) {
      (fieldName, fieldValue) = kv;
      newPath = List.Cons(PEField(fieldName), path);
      for (elt in flattenHelper(id, newPath, mkPath(newPath), fieldValue)) {
        yield elt
      }
    }
  }
}

/*****************************************************************************/
/* Code to reconstruction objects from a denormalized form. */
/*****************************************************************************/

base class PathElement uses Orderable {
  children =
  | PEField(String)
  | PEIndex(Int)
}

fun pathToString(path: List<PathElement>): String {
  path match {
  | List.Nil() -> ""
  | List.Cons(head, tail) ->
    head match {
    | PEField(x) -> "." + x
    | PEIndex(x) -> "[" + x + "]"
    } + pathToString(tail)
  }
}

class ReconstructError(msg: String) extends Exception {
  fun getMessage(): String {
    "Error: " + this.msg
  }
}

fun buildPathValueIter(
  rows: mutable Iterator<(String, String, ?PrimType, ?Int, ?Float, ?String)>,
): mutable Iterator<(String, Array<(List<PathElement>, CJSON)>)> {
  lastRow: ?(String, String, ?PrimType, ?Int, ?Float, ?String) = None();
  objectPaths = mutable Vector[];
  for (row in rows) {
    lastRow match {
    | Some(lrow) if (lrow.i0 > row.i0) ->
      throw ReconstructError(
        "Object id out of order: " + lrow.i0 + "/" + row.i0,
      )
    | Some(lrow) if (lrow.i0 == row.i0) ->
      if (lrow.i1 > row.i1) {
        throw ReconstructError(
          "Object path out of order: " + lrow.i1 + "/" + row.i1,
        )
      };
      if (lrow.i1 == row.i1) {
        throw ReconstructError(
          "Path defined multiple times: " + row.i0 + row.i1,
        )
      }
    | Some(lrow) ->
      arr = objectPaths.toArray();
      objectPaths.clear();
      yield (lrow.i0, arr)
    | _ -> void
    };
    !lastRow = Some(row);
    path = TypeParser::mcreate(row.i1).path().toArray();
    value = row.i2 match {
    | None() -> CJNull()
    | Some(PTInt()) -> CJInt(row.i3.fromSome())
    | Some(PTBool()) -> CJBool(row.i3.fromSome() != 0)
    | Some(PTFloat()) -> CJFloat(row.i4.fromSome())
    | Some(PTString()) -> CJString(row.i5.fromSome())
    | Some(PTEmptyArray()) -> CJArray(Array[])
    | Some(PTEmptyObject()) -> CJObject(CJFields::empty())
    };
    objectPaths.push((List::createFromItems(path), value));
  };
  lastRow match {
  | Some(lrow) if (!objectPaths.isEmpty()) ->
    arr = objectPaths.toArray();
    yield (lrow.i0, arr)
  | _ -> void
  }
}

fun reconstruct(
  rows: mutable Iterator<(String, String, ?PrimType, ?Int, ?Float, ?String)>,
  internFieldNames: Array<String> -> Array<String>,
): mutable Iterator<(String, CJSON)> {
  for (objectPaths in buildPathValueIter(rows)) {
    (objectID, paths) = objectPaths;
    json = reconstructHelper(paths, internFieldNames);
    yield (objectID, json);
  }
}

fun reconstructHelper(
  pathValueIter: Array<(List<PathElement>, CJSON)>,
  internFieldNames: Array<String> -> Array<String>,
): CJSON {
  objects = mutable Vector[];
  for (kv in pathValueIter) {
    (path, value) = kv;
    path match {
    | List.Nil() -> return value
    | List.Cons(
      head,
      tail,
    ) if (objects.size() != 0 && head == objects[objects.size() - 1].i0) ->
      objects[objects.size() - 1].i1.push((tail, value))
    | List.Cons(head, tail) ->
      objects.push((head, mutable Vector[(tail, value)]))
    }
  };
  array = mutable Vector[];
  fields = mutable Vector[];
  for (obj in objects) {
    json = reconstructHelper(obj.i1.toArray(), internFieldNames);
    obj.i0 match {
    | PEField(fieldName) -> fields.push((fieldName, json))
    | PEIndex(n) -> array.push((n, json))
    }
  };
  if (array.isEmpty()) {
    return CJObject(
      CJFields::create(fields.sortedBy(x ~> x.i0).toArray(), internFieldNames),
    )
  };
  if (fields.isEmpty()) {
    arr = array.sortedBy(x ~> x.i0);
    for (i in Range(0, arr.size())) {
      if (arr[i].i0 != i) {
        throw ReconstructError("Missing array index: " + i)
      }
    };
    return CJArray(arr.map(x -> x.i1).toArray())
  };
  throw ReconstructError("JSON is both an object and an array")
}

module end;
